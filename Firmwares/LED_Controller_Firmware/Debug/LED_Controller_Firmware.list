
LED_Controller_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080045f4  080045f4  000055f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d4  080047d4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08004838  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004838  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edb4  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3a  00000000  00000000  00014e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00016d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6d  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022496  00000000  00000000  0001853d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe1e  00000000  00000000  0003a9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f3a  00000000  00000000  0004a7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d72b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d94  00000000  00000000  0011d770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00121504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080045dc 	.word	0x080045dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080045dc 	.word	0x080045dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fda0 	bl	80010f8 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f001 fd30 	bl	800201c <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <CAN1_TX_IRQHandler+0x10>)
 80005c6:	f001 f9ea 	bl	800199e <HAL_CAN_IRQHandler>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000bc 	.word	0x200000bc

080005d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <CAN1_RX0_IRQHandler+0x10>)
 80005da:	f001 f9e0 	bl	800199e <HAL_CAN_IRQHandler>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000bc 	.word	0x200000bc

080005e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <CAN1_SCE_IRQHandler+0x10>)
 80005ee:	f001 f9d6 	bl	800199e <HAL_CAN_IRQHandler>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000bc 	.word	0x200000bc

080005fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <TIM6_DAC_IRQHandler+0x10>)
 8000602:	f002 fdad 	bl	8003160 <HAL_TIM_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e4 	.word	0x200000e4

08000610 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  * Waits for button to be pressed then sends the CAN bus message
  */
void EXTI15_10_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <EXTI15_10_IRQHandler+0x18>)
 8000616:	f002 fd33 	bl	8003080 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800061a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800061e:	f001 fed3 	bl	80023c8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000e4 	.word	0x200000e4

0800062c <main>:
uint8_t led_no = 0;
uint8_t fsm_state = 0;
CAN_RxHeaderTypeDef RxHeader;

int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000630:	f000 fd10 	bl	8001054 <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000634:	2032      	movs	r0, #50	@ 0x32
 8000636:	f000 f825 	bl	8000684 <SystemClock_Config_HSE>
  GPIO_Init();
 800063a:	f000 f90f 	bl	800085c <GPIO_Init>
  UART2_Init();
 800063e:	f000 f999 	bl	8000974 <UART2_Init>
  TIMER6_Init();
 8000642:	f000 f97b 	bl	800093c <TIMER6_Init>
  CAN1_Init();
 8000646:	f000 f9bb 	bl	80009c0 <CAN1_Init>
  CAN_Filter_Config();
 800064a:	f000 f8df 	bl	800080c <CAN_Filter_Config>

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 800064e:	f240 4103 	movw	r1, #1027	@ 0x403
 8000652:	480a      	ldr	r0, [pc, #40]	@ (800067c <main+0x50>)
 8000654:	f001 f97d 	bl	8001952 <HAL_CAN_ActivateNotification>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <main+0x36>
  {
    Error_handler();
 800065e:	f000 fbad 	bl	8000dbc <Error_handler>
  }

  if( HAL_CAN_Start(&hcan1) != HAL_OK)
 8000662:	4806      	ldr	r0, [pc, #24]	@ (800067c <main+0x50>)
 8000664:	f000 ff44 	bl	80014f0 <HAL_CAN_Start>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <main+0x46>
  {
    Error_handler();
 800066e:	f000 fba5 	bl	8000dbc <Error_handler>
  }
  // Start the TIMER interrupt
  HAL_TIM_Base_Start_IT(&htimer6);
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <main+0x54>)
 8000674:	f002 fd04 	bl	8003080 <HAL_TIM_Base_Start_IT>

  while(1);
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0x4c>
 800067c:	200000bc 	.word	0x200000bc
 8000680:	200000e4 	.word	0x200000e4

08000684 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b096      	sub	sp, #88	@ 0x58
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 800068e:	2300      	movs	r3, #0
 8000690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b78      	cmp	r3, #120	@ 0x78
 80006ac:	d038      	beq.n	8000720 <SystemClock_Config_HSE+0x9c>
 80006ae:	2b78      	cmp	r3, #120	@ 0x78
 80006b0:	dc7c      	bgt.n	80007ac <SystemClock_Config_HSE+0x128>
 80006b2:	2b32      	cmp	r3, #50	@ 0x32
 80006b4:	d002      	beq.n	80006bc <SystemClock_Config_HSE+0x38>
 80006b6:	2b54      	cmp	r3, #84	@ 0x54
 80006b8:	d019      	beq.n	80006ee <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80006ba:	e077      	b.n	80007ac <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80006c0:	2332      	movs	r3, #50	@ 0x32
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006ec:	e032      	b.n	8000754 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 80006f2:	2354      	movs	r3, #84	@ 0x54
 80006f4:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000702:	230f      	movs	r3, #15
 8000704:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000712:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800071e:	e019      	b.n	8000754 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000724:	2378      	movs	r3, #120	@ 0x78
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000734:	230f      	movs	r3, #15
 8000736:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 800074c:	2303      	movs	r3, #3
 800074e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000752:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f9a3 	bl	8002aa4 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config_HSE+0xe4>
  {
    Error_handler();
 8000764:	f000 fb2a 	bl	8000dbc <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000768:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fe4c 	bl	8002410 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config_HSE+0xfe>
  {
    Error_handler();
 800077e:	f000 fb1d 	bl	8000dbc <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000782:	f001 ff2b 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8000786:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 8000788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800078a:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <SystemClock_Config_HSE+0x130>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	099b      	lsrs	r3, r3, #6
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fc19 	bl	8001fca <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000798:	2004      	movs	r0, #4
 800079a:	f001 fc23 	bl	8001fe4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	f04f 30ff 	mov.w	r0, #4294967295
 80007a6:	f001 fbe6 	bl	8001f76 <HAL_NVIC_SetPriority>
 80007aa:	e000      	b.n	80007ae <SystemClock_Config_HSE+0x12a>
    return ;
 80007ac:	bf00      	nop
}
 80007ae:	3758      	adds	r7, #88	@ 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	10624dd3 	.word	0x10624dd3

080007b8 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x499;
 80007c2:	f240 4399 	movw	r3, #1177	@ 0x499
 80007c6:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  message = fsm_state;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <CAN1_Tx+0x48>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80007d6:	2120      	movs	r1, #32
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <CAN1_Tx+0x4c>)
 80007da:	f001 fdda 	bl	8002392 <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	1cfa      	adds	r2, r7, #3
 80007e2:	f107 0108 	add.w	r1, r7, #8
 80007e6:	4808      	ldr	r0, [pc, #32]	@ (8000808 <CAN1_Tx+0x50>)
 80007e8:	f000 fec6 	bl	8001578 <HAL_CAN_AddTxMessage>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <CAN1_Tx+0x3e>
  {
    Error_handler();
 80007f2:	f000 fae3 	bl	8000dbc <Error_handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000012c 	.word	0x2000012c
 8000804:	40020000 	.word	0x40020000
 8000808:	200000bc 	.word	0x200000bc

0800080c <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  // Accept only 4XX
  // id 1000 = 0x8
  // mask 1110 = 0xE
  can1_filter_init.FilterIdHigh = 0x8000;
 800081e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000822:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0XE000;
 8000828:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800082c:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	@ (8000858 <CAN_Filter_Config+0x4c>)
 8000840:	f000 fd76 	bl	8001330 <HAL_CAN_ConfigFilter>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <CAN_Filter_Config+0x42>
  {
    Error_handler();
 800084a:	f000 fab7 	bl	8000dbc <Error_handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	@ 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000bc 	.word	0x200000bc

0800085c <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  // enabling the clocks for the GPIO ports
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b31      	ldr	r3, [pc, #196]	@ (800092c <GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a30      	ldr	r2, [pc, #192]	@ (800092c <GPIO_Init+0xd0>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a29      	ldr	r2, [pc, #164]	@ (800092c <GPIO_Init+0xd0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a22      	ldr	r2, [pc, #136]	@ (800092c <GPIO_Init+0xd0>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  // configure GPIOs
  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 80008b6:	2320      	movs	r3, #32
 80008b8:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4819      	ldr	r0, [pc, #100]	@ (8000930 <GPIO_Init+0xd4>)
 80008ca:	f001 fbb5 	bl	8002038 <HAL_GPIO_Init>

  // pin 6, 8, 9 from port C
  ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_6;
 80008ce:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80008d2:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4814      	ldr	r0, [pc, #80]	@ (8000934 <GPIO_Init+0xd8>)
 80008e4:	f001 fba8 	bl	8002038 <HAL_GPIO_Init>

  // pin 8 from port B
  ledgpio.Pin = GPIO_PIN_8;
 80008e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ec:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB,&ledgpio);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	480e      	ldr	r0, [pc, #56]	@ (8000938 <GPIO_Init+0xdc>)
 80008fe:	f001 fb9b 	bl	8002038 <HAL_GPIO_Init>

  // pin 13 set to interrup falling edge
  // button pin > gives interrupt
  ledgpio.Pin = GPIO_PIN_13;
 8000902:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000906:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000908:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090c:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4806      	ldr	r0, [pc, #24]	@ (8000934 <GPIO_Init+0xd8>)
 800091a:	f001 fb8d 	bl	8002038 <HAL_GPIO_Init>

  // enables the IRQ on pins 10-15
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800091e:	2028      	movs	r0, #40	@ 0x28
 8000920:	f001 fb45 	bl	8001fae <HAL_NVIC_EnableIRQ>
}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400

0800093c <TIMER6_Init>:
  * Generates an interrupt every 1 second
  * @param None
  * @retval None
  */
void TIMER6_Init(void)
{ // APB clock1 84 MHz
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  // CNT_CLK = TIMx_CLK / (prescaler+1)
  htimer6.Instance = TIM6;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <TIMER6_Init+0x30>)
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <TIMER6_Init+0x34>)
 8000944:	601a      	str	r2, [r3, #0]
  //  Every one second:
  //  htimer6.Init.Prescaler = 4999;
  //  htimer6.Init.Period = 10000-1;

  // Every 5 seconds:
  htimer6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <TIMER6_Init+0x30>)
 8000948:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800094c:	605a      	str	r2, [r3, #4]
  htimer6.Init.Period = 4999;      // 1kHz → 5s interrupt
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <TIMER6_Init+0x30>)
 8000950:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000954:	60da      	str	r2, [r3, #12]
  if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <TIMER6_Init+0x30>)
 8000958:	f002 fb42 	bl	8002fe0 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <TIMER6_Init+0x2a>
  {
    Error_handler();
 8000962:	f000 fa2b 	bl	8000dbc <Error_handler>
  }
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000e4 	.word	0x200000e4
 8000970:	40001000 	.word	0x40001000

08000974 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <UART2_Init+0x44>)
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <UART2_Init+0x48>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <UART2_Init+0x44>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <UART2_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <UART2_Init+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <UART2_Init+0x44>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <UART2_Init+0x44>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <UART2_Init+0x44>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <UART2_Init+0x44>)
 80009a6:	f002 fdbf 	bl	8003528 <HAL_UART_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 80009b0:	f000 fa04 	bl	8000dbc <Error_handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000078 	.word	0x20000078
 80009bc:	40004400 	.word	0x40004400

080009c0 <CAN1_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void CAN1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <CAN1_Init+0x64>)
 80009c6:	4a18      	ldr	r2, [pc, #96]	@ (8000a28 <CAN1_Init+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009ca:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <CAN1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hcan1.Init.AutoBusOff = ENABLE;
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <CAN1_Init+0x64>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoRetransmission = ENABLE;
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <CAN1_Init+0x64>)
 80009d8:	2201      	movs	r2, #1
 80009da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <CAN1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <CAN1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <CAN1_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <CAN1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	775a      	strb	r2, [r3, #29]
  //  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;

  //  Settings related to CAN bit timings
  //  Setting resulting bit rate to 250k as per DALY BMS reqs
  //  The prescalar, time values were derived from http://www.bittiming.can-wiki.info/
  hcan1.Init.Prescaler = 10;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <CAN1_Init+0x64>)
 80009f6:	220a      	movs	r2, #10
 80009f8:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <CAN1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <CAN1_Init+0x64>)
 8000a02:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000a06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <CAN1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]

  if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <CAN1_Init+0x64>)
 8000a10:	f000 fb92 	bl	8001138 <HAL_CAN_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <CAN1_Init+0x5e>
  {
    Error_handler();
 8000a1a:	f000 f9cf 	bl	8000dbc <Error_handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000bc 	.word	0x200000bc
 8000a28:	40006400 	.word	0x40006400

08000a2c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b090      	sub	sp, #64	@ 0x40
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	490a      	ldr	r1, [pc, #40]	@ (8000a64 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 f936 	bl	8003cac <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbe3 	bl	8000210 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f107 010c 	add.w	r1, r7, #12
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000a58:	f002 fdb3 	bl	80035c2 <HAL_UART_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3740      	adds	r7, #64	@ 0x40
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	080045f4 	.word	0x080045f4
 8000a68:	20000078 	.word	0x20000078

08000a6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	@ 0x40
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 f916 	bl	8003cac <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fbc3 	bl	8000210 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	f107 010c 	add.w	r1, r7, #12
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a98:	f002 fd93 	bl	80035c2 <HAL_UART_Transmit>
}
 8000a9c:	bf00      	nop
 8000a9e:	3740      	adds	r7, #64	@ 0x40
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	08004610 	.word	0x08004610
 8000aa8:	20000078 	.word	0x20000078

08000aac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	@ 0x40
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	490a      	ldr	r1, [pc, #40]	@ (8000ae4 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 f8f6 	bl	8003cac <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fba3 	bl	8000210 <strlen>
 8000aca:	4603      	mov	r3, r0
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	f107 010c 	add.w	r1, r7, #12
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000ad8:	f002 fd73 	bl	80035c2 <HAL_UART_Transmit>
}
 8000adc:	bf00      	nop
 8000ade:	3740      	adds	r7, #64	@ 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	0800462c 	.word	0x0800462c
 8000ae8:	20000078 	.word	0x20000078

08000aec <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b092      	sub	sp, #72	@ 0x48
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint8_t rcvd_msg[8]; // 8 is max cap for std CAN

  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000af4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af8:	4a64      	ldr	r2, [pc, #400]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f000 fe16 	bl	800172e <HAL_CAN_GetRxMessage>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
  {
    Error_handler();
 8000b08:	f000 f958 	bl	8000dbc <Error_handler>
  }

  // We can find what state the FSM is now from the msg
  if(RxHeader.StdId == 0x401 && RxHeader.RTR == 0 )
 8000b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d112      	bne.n	8000b3e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000b18:	4b5c      	ldr	r3, [pc, #368]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10e      	bne.n	8000b3e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
  { // FAULT state

    fsm_state = 0;
 8000b20:	4b5b      	ldr	r3, [pc, #364]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000b26:	f000 f8cf 	bl	8000cc8 <LED_Manage_Output>
    sprintf(msg,"0x401 FAULT SATE INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000b2a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4957      	ldr	r1, [pc, #348]	@ (8000c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f003 f8b8 	bl	8003cac <siprintf>
 8000b3c:	e094      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
  }

  else if ( RxHeader.StdId == 0x402 && RxHeader.RTR == 0)
 8000b3e:	4b53      	ldr	r3, [pc, #332]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f240 4202 	movw	r2, #1026	@ 0x402
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d112      	bne.n	8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 8000b4a:	4b50      	ldr	r3, [pc, #320]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10e      	bne.n	8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
  { // SAFE TO APPROACH state

    fsm_state = 1;
 8000b52:	4b4f      	ldr	r3, [pc, #316]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000b58:	f000 f8b6 	bl	8000cc8 <LED_Manage_Output>

    sprintf(msg,"0x402 SAFE TO APPROACH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000b5c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b60:	461a      	mov	r2, r3
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	494c      	ldr	r1, [pc, #304]	@ (8000c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 f89f 	bl	8003cac <siprintf>
 8000b6e:	e07b      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
  }

  else if ( RxHeader.StdId == 0x403 && RxHeader.RTR == 0)
 8000b70:	4b46      	ldr	r3, [pc, #280]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f240 4203 	movw	r2, #1027	@ 0x403
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d112      	bne.n	8000ba2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
 8000b7c:	4b43      	ldr	r3, [pc, #268]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10e      	bne.n	8000ba2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
    { // RDY TO LAUNCH state

    fsm_state = 2;
 8000b84:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000b8a:	f000 f89d 	bl	8000cc8 <LED_Manage_Output>
    sprintf(msg,"0x403 RDY TO LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000b8e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b92:	461a      	mov	r2, r3
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4940      	ldr	r1, [pc, #256]	@ (8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f886 	bl	8003cac <siprintf>
 8000ba0:	e062      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
    }

  else if ( RxHeader.StdId == 0x404 && RxHeader.RTR == 0)
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f240 4204 	movw	r2, #1028	@ 0x404
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d112      	bne.n	8000bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
 8000bae:	4b37      	ldr	r3, [pc, #220]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
    { // Launching - Omitted for KDAYS

    fsm_state = 3;
 8000bb6:	4b36      	ldr	r3, [pc, #216]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000bbc:	f000 f884 	bl	8000cc8 <LED_Manage_Output>

      sprintf(msg,"illegal 0x404 LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000bc0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4935      	ldr	r1, [pc, #212]	@ (8000ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 f86d 	bl	8003cac <siprintf>
 8000bd2:	e049      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
    }
  else if ( RxHeader.StdId == 0x405 && RxHeader.RTR == 0)
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f240 4205 	movw	r2, #1029	@ 0x405
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d112      	bne.n	8000c06 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
 8000be0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10e      	bne.n	8000c06 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
    { // CRAWLING state

    fsm_state = 4;
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000bee:	f000 f86b 	bl	8000cc8 <LED_Manage_Output>
    sprintf(msg,"0x405 CRAWLING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000bf2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4929      	ldr	r1, [pc, #164]	@ (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 f854 	bl	8003cac <siprintf>
 8000c04:	e030      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
    }
  else if ( RxHeader.StdId == 0x406 && RxHeader.RTR == 0)
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f240 4206 	movw	r2, #1030	@ 0x406
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d112      	bne.n	8000c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10e      	bne.n	8000c38 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
    { // BRAKING state

    fsm_state = 5;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000c1c:	2205      	movs	r2, #5
 8000c1e:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000c20:	f000 f852 	bl	8000cc8 <LED_Manage_Output>
    sprintf(msg,"0x406 BRAKING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000c24:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	491e      	ldr	r1, [pc, #120]	@ (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 f83b 	bl	8003cac <siprintf>
 8000c36:	e017      	b.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
    }

  else if ( RxHeader.StdId == 0x407 && RxHeader.RTR == 0)
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f240 4207 	movw	r2, #1031	@ 0x407
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d111      	bne.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10d      	bne.n	8000c68 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
    { // DEBUG sate

    fsm_state = 6;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000c4e:	2206      	movs	r2, #6
 8000c50:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000c52:	f000 f839 	bl	8000cc8 <LED_Manage_Output>
    sprintf(msg,"0x407 DEBUG state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000c56:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4912      	ldr	r1, [pc, #72]	@ (8000cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 f822 	bl	8003cac <siprintf>
//  {
//    //its a reply ( data frame) by n2 to n1
//    sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
//  }

   HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff facf 	bl	8000210 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f107 010c 	add.w	r1, r7, #12
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c80:	f002 fc9f 	bl	80035c2 <HAL_UART_Transmit>
}
 8000c84:	bf00      	nop
 8000c86:	3748      	adds	r7, #72	@ 0x48
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000130 	.word	0x20000130
 8000c90:	2000012c 	.word	0x2000012c
 8000c94:	08004648 	.word	0x08004648
 8000c98:	08004670 	.word	0x08004670
 8000c9c:	080046a4 	.word	0x080046a4
 8000ca0:	080046d4 	.word	0x080046d4
 8000ca4:	08004704 	.word	0x08004704
 8000ca8:	08004730 	.word	0x08004730
 8000cac:	08004758 	.word	0x08004758
 8000cb0:	20000078 	.word	0x20000078

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8000cbc:	f7ff fd7c 	bl	80007b8 <CAN1_Tx>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <LED_Manage_Output>:

void LED_Manage_Output()
{  // based on the global uni8_t fsm_state change the colors of the LED strip
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  switch(fsm_state) {
 8000ccc:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <LED_Manage_Output+0xe8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d86a      	bhi.n	8000dac <LED_Manage_Output+0xe4>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <LED_Manage_Output+0x14>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000d1d 	.word	0x08000d1d
 8000ce4:	08000d4d 	.word	0x08000d4d
 8000ce8:	08000d7d 	.word	0x08000d7d
  case 1 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cf2:	4830      	ldr	r0, [pc, #192]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000cf4:	f001 fb34 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cfe:	482d      	ldr	r0, [pc, #180]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d00:	f001 fb2e 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0a:	482b      	ldr	r0, [pc, #172]	@ (8000db8 <LED_Manage_Output+0xf0>)
 8000d0c:	f001 fb28 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	@ 0x40
 8000d14:	4827      	ldr	r0, [pc, #156]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d16:	f001 fb23 	bl	8002360 <HAL_GPIO_WritePin>
    break;
 8000d1a:	e047      	b.n	8000dac <LED_Manage_Output+0xe4>
  case 2 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d22:	4824      	ldr	r0, [pc, #144]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d24:	f001 fb1c 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2e:	4821      	ldr	r0, [pc, #132]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d30:	f001 fb16 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3a:	481f      	ldr	r0, [pc, #124]	@ (8000db8 <LED_Manage_Output+0xf0>)
 8000d3c:	f001 fb10 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	@ 0x40
 8000d44:	481b      	ldr	r0, [pc, #108]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d46:	f001 fb0b 	bl	8002360 <HAL_GPIO_WritePin>
    break;
 8000d4a:	e02f      	b.n	8000dac <LED_Manage_Output+0xe4>
  case 3 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d52:	4818      	ldr	r0, [pc, #96]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d54:	f001 fb04 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5e:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d60:	f001 fafe 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d6a:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <LED_Manage_Output+0xf0>)
 8000d6c:	f001 faf8 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2140      	movs	r1, #64	@ 0x40
 8000d74:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d76:	f001 faf3 	bl	8002360 <HAL_GPIO_WritePin>
    break;
 8000d7a:	e017      	b.n	8000dac <LED_Manage_Output+0xe4>
  case 4 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d82:	480c      	ldr	r0, [pc, #48]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d84:	f001 faec 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d8e:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000d90:	f001 fae6 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9a:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <LED_Manage_Output+0xf0>)
 8000d9c:	f001 fae0 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2140      	movs	r1, #64	@ 0x40
 8000da4:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <LED_Manage_Output+0xec>)
 8000da6:	f001 fadb 	bl	8002360 <HAL_GPIO_WritePin>
    break;
 8000daa:	bf00      	nop
  }
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000012c 	.word	0x2000012c
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020400 	.word	0x40020400

08000dbc <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  while(1);
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_handler+0x4>

08000dc4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f001 f8c9 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <HAL_MspInit+0x40>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <HAL_MspInit+0x40>)
 8000dd4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000dd8:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f06f 000b 	mvn.w	r0, #11
 8000de2:	f001 f8c8 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	f06f 000a 	mvn.w	r0, #10
 8000dee:	f001 f8c2 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	f06f 0009 	mvn.w	r0, #9
 8000dfa:	f001 f8bc 	bl	8001f76 <HAL_NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a16      	ldr	r2, [pc, #88]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_UART_MspInit+0x88>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000e58:	2307      	movs	r3, #7
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e64:	f001 f8e8 	bl	8002038 <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000e68:	2308      	movs	r3, #8
 8000e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <HAL_UART_MspInit+0x8c>)
 8000e74:	f001 f8e0 	bl	8002038 <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e78:	2026      	movs	r0, #38	@ 0x26
 8000e7a:	f001 f898 	bl	8001fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	2026      	movs	r0, #38	@ 0x26
 8000e84:	f001 f877 	bl	8001f76 <HAL_NVIC_SetPriority>
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_CAN1_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <HAL_CAN_MspInit+0x90>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_CAN_MspInit+0x90>)
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <HAL_CAN_MspInit+0x90>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]

  /**CAN1 GPIO Configuration
     PA11     ------> CAN1_RX
     PA12     ------> CAN1_TX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ebc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ece:	2309      	movs	r3, #9
 8000ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4814      	ldr	r0, [pc, #80]	@ (8000f2c <HAL_CAN_MspInit+0x94>)
 8000eda:	f001 f8ad 	bl	8002038 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	2013      	movs	r0, #19
 8000ee4:	f001 f847 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	210f      	movs	r1, #15
 8000eec:	2014      	movs	r0, #20
 8000eee:	f001 f842 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	2015      	movs	r0, #21
 8000ef8:	f001 f83d 	bl	8001f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	210f      	movs	r1, #15
 8000f00:	2016      	movs	r0, #22
 8000f02:	f001 f838 	bl	8001f76 <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f06:	2013      	movs	r0, #19
 8000f08:	f001 f851 	bl	8001fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f0c:	2014      	movs	r0, #20
 8000f0e:	f001 f84e 	bl	8001fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f12:	2015      	movs	r0, #21
 8000f14:	f001 f84b 	bl	8001fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f18:	2016      	movs	r0, #22
 8000f1a:	f001 f848 	bl	8001fae <HAL_NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_TIM_Base_MspInit+0x3c>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_TIM_Base_MspInit+0x3c>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_TIM_Base_MspInit+0x3c>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f001 f82a 	bl	8001fae <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	2036      	movs	r0, #54	@ 0x36
 8000f60:	f001 f809 	bl	8001f76 <HAL_NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f002 fea4 	bl	8003cec <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20020000 	.word	0x20020000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	2000014c 	.word	0x2000014c
 8000fd8:	200002a0 	.word	0x200002a0

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	@ (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	@ (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f002 fe63 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fafb 	bl	800062c <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001044:	080047dc 	.word	0x080047dc
  ldr r2, =_sbss
 8001048:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800104c:	2000029c 	.word	0x2000029c

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 ff6f 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe9c 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ff87 	bl	8001fca <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 ff4f 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008
 800111c:	20000150 	.word	0x20000150

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000150 	.word	0x20000150

08001138 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0ed      	b.n	8001326 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fe9e 	bl	8000e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff ffd8 	bl	8001120 <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001172:	e012      	b.n	800119a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001174:	f7ff ffd4 	bl	8001120 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d90b      	bls.n	800119a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0c5      	b.n	8001326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0e5      	beq.n	8001174 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0202 	bic.w	r2, r2, #2
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b8:	f7ff ffb2 	bl	8001120 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011be:	e012      	b.n	80011e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c0:	f7ff ffae 	bl	8001120 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d90b      	bls.n	80011e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e09f      	b.n	8001326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e5      	bne.n	80011c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7e5b      	ldrb	r3, [r3, #25]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e9b      	ldrb	r3, [r3, #26]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0220 	bic.w	r2, r2, #32
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7edb      	ldrb	r3, [r3, #27]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0210 	bic.w	r2, r2, #16
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0210 	orr.w	r2, r2, #16
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7f1b      	ldrb	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0208 	bic.w	r2, r2, #8
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7f5b      	ldrb	r3, [r3, #29]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0204 	orr.w	r2, r2, #4
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	ea42 0103 	orr.w	r1, r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001346:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001348:	7cfb      	ldrb	r3, [r7, #19]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d003      	beq.n	8001356 <HAL_CAN_ConfigFilter+0x26>
 800134e:	7cfb      	ldrb	r3, [r7, #19]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 80be 	bne.w	80014d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001356:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <HAL_CAN_ConfigFilter+0x1bc>)
 8001358:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001370:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d123      	bne.n	8001400 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3248      	adds	r2, #72	@ 0x48
 80013e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	3348      	adds	r3, #72	@ 0x48
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d122      	bne.n	800144e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001428:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3248      	adds	r2, #72	@ 0x48
 800142e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001442:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001444:	6979      	ldr	r1, [r7, #20]
 8001446:	3348      	adds	r3, #72	@ 0x48
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001468:	e007      	b.n	800147a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	431a      	orrs	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001494:	e007      	b.n	80014a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c4:	f023 0201 	bic.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e006      	b.n	80014e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40006400 	.word	0x40006400

080014f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d12e      	bne.n	8001562 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fe00 	bl	8001120 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001522:	e012      	b.n	800154a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001524:	f7ff fdfc 	bl	8001120 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d90b      	bls.n	800154a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e012      	b.n	8001570 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e006      	b.n	8001570 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001566:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001596:	7ffb      	ldrb	r3, [r7, #31]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_AddTxMessage+0x2c>
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	f040 80b8 	bne.w	8001714 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10a      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a0 	beq.w	8001704 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	0e1b      	lsrs	r3, r3, #24
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d907      	bls.n	80015e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e09e      	b.n	8001722 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015e4:	2201      	movs	r2, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	409a      	lsls	r2, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	6809      	ldr	r1, [r1, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3318      	adds	r3, #24
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	440b      	add	r3, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e00f      	b.n	8001632 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800161c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001622:	68f9      	ldr	r1, [r7, #12]
 8001624:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001626:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3318      	adds	r3, #24
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3318      	adds	r3, #24
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	440b      	add	r3, r1
 8001642:	3304      	adds	r3, #4
 8001644:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	7d1b      	ldrb	r3, [r3, #20]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d111      	bne.n	8001672 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3318      	adds	r3, #24
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	3304      	adds	r3, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	6811      	ldr	r1, [r2, #0]
 8001662:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3318      	adds	r3, #24
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	3304      	adds	r3, #4
 8001670:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3307      	adds	r3, #7
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	061a      	lsls	r2, r3, #24
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3306      	adds	r3, #6
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3305      	adds	r3, #5
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4313      	orrs	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	3204      	adds	r2, #4
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	4610      	mov	r0, r2
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	ea43 0200 	orr.w	r2, r3, r0
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	440b      	add	r3, r1
 80016a4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80016a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3302      	adds	r3, #2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4610      	mov	r0, r2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	6811      	ldr	r1, [r2, #0]
 80016d0:	ea43 0200 	orr.w	r2, r3, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	440b      	add	r3, r1
 80016da:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3318      	adds	r3, #24
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	6811      	ldr	r1, [r2, #0]
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3318      	adds	r3, #24
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	440b      	add	r3, r1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e00e      	b.n	8001722 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e006      	b.n	8001722 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001742:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d003      	beq.n	8001752 <HAL_CAN_GetRxMessage+0x24>
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b02      	cmp	r3, #2
 800174e:	f040 80f3 	bne.w	8001938 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10e      	bne.n	8001776 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0e7      	b.n	8001946 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d107      	bne.n	8001794 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0d8      	b.n	8001946 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	331b      	adds	r3, #27
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0204 	and.w	r2, r3, #4
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	331b      	adds	r3, #27
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0d5b      	lsrs	r3, r3, #21
 80017c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00b      	b.n	80017e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	331b      	adds	r3, #27
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4413      	add	r3, r2
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	331b      	adds	r3, #27
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0202 	and.w	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	331b      	adds	r3, #27
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	3304      	adds	r3, #4
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 020f 	and.w	r2, r3, #15
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	331b      	adds	r3, #27
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	331b      	adds	r3, #27
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0a1a      	lsrs	r2, r3, #8
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	4413      	add	r3, r2
 800187c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0c1a      	lsrs	r2, r3, #16
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	3302      	adds	r3, #2
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0e1a      	lsrs	r2, r3, #24
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	3303      	adds	r3, #3
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3304      	adds	r3, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	0a1a      	lsrs	r2, r3, #8
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	3305      	adds	r3, #5
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0c1a      	lsrs	r2, r3, #16
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3306      	adds	r3, #6
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0e1a      	lsrs	r2, r3, #24
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3307      	adds	r3, #7
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0220 	orr.w	r2, r2, #32
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e007      	b.n	8001934 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	e006      	b.n	8001946 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001962:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d002      	beq.n	8001970 <HAL_CAN_ActivateNotification+0x1e>
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d109      	bne.n	8001984 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6959      	ldr	r1, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e006      	b.n	8001992 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b08a      	sub	sp, #40	@ 0x28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d07c      	beq.n	8001ade <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d023      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff f813 	bl	8000a2c <HAL_CAN_TxMailbox0CompleteCallback>
 8001a06:	e016      	b.n	8001a36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1a:	e00c      	b.n	8001a36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a2e:	e002      	b.n	8001a36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f96b 	bl	8001d0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d024      	beq.n	8001a8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff f809 	bl	8000a6c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a5a:	e016      	b.n	8001a8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e00c      	b.n	8001a8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a82:	e002      	b.n	8001a8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f94b 	bl	8001d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d024      	beq.n	8001ade <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7fe ffff 	bl	8000aac <HAL_CAN_TxMailbox2CompleteCallback>
 8001aae:	e016      	b.n	8001ade <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac2:	e00c      	b.n	8001ade <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	e002      	b.n	8001ade <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f92b 	bl	8001d34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00c      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2210      	movs	r2, #16
 8001b00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f912 	bl	8001d48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7fe ffd5 	bl	8000aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00c      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2210      	movs	r2, #16
 8001b64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8f4 	bl	8001d70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f8db 	bl	8001d5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8de 	bl	8001d84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2208      	movs	r2, #8
 8001be2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8d7 	bl	8001d98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d07b      	beq.n	8001cec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d072      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d043      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03e      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c6c:	2b60      	cmp	r3, #96	@ 0x60
 8001c6e:	d02b      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x32a>
 8001c70:	2b60      	cmp	r3, #96	@ 0x60
 8001c72:	d82e      	bhi.n	8001cd2 <HAL_CAN_IRQHandler+0x334>
 8001c74:	2b50      	cmp	r3, #80	@ 0x50
 8001c76:	d022      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x320>
 8001c78:	2b50      	cmp	r3, #80	@ 0x50
 8001c7a:	d82a      	bhi.n	8001cd2 <HAL_CAN_IRQHandler+0x334>
 8001c7c:	2b40      	cmp	r3, #64	@ 0x40
 8001c7e:	d019      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x316>
 8001c80:	2b40      	cmp	r3, #64	@ 0x40
 8001c82:	d826      	bhi.n	8001cd2 <HAL_CAN_IRQHandler+0x334>
 8001c84:	2b30      	cmp	r3, #48	@ 0x30
 8001c86:	d010      	beq.n	8001caa <HAL_CAN_IRQHandler+0x30c>
 8001c88:	2b30      	cmp	r3, #48	@ 0x30
 8001c8a:	d822      	bhi.n	8001cd2 <HAL_CAN_IRQHandler+0x334>
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d002      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x2f8>
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d005      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c94:	e01d      	b.n	8001cd2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c9e:	e019      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca8:	e014      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb2:	e00f      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cbc:	e00a      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc6:	e005      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd0:	e000      	b.n	8001cd4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cd2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ce2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f854 	bl	8001dac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff3e 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff31 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d106      	bne.n	8002000 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a08      	ldr	r2, [pc, #32]	@ (8002018 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001ffe:	e005      	b.n	800200c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002020:	f000 f802 	bl	8002028 <HAL_SYSTICK_Callback>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	@ (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	@ (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	@ (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	@ (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	@ (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	@ (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	@ (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_GPIO_Init+0x324>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	@ 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	041a      	lsls	r2, r3, #16
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	400b      	ands	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023d2:	4b08      	ldr	r3, [pc, #32]	@ (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f806 	bl	80023f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40013c00 	.word	0x40013c00

080023f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0cc      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b68      	ldr	r3, [pc, #416]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d90c      	bls.n	800244c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b65      	ldr	r3, [pc, #404]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b63      	ldr	r3, [pc, #396]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b8      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002464:	4b59      	ldr	r3, [pc, #356]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a58      	ldr	r2, [pc, #352]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800246e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800247c:	4b53      	ldr	r3, [pc, #332]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b50      	ldr	r3, [pc, #320]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	494d      	ldr	r1, [pc, #308]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d044      	beq.n	8002530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b47      	ldr	r3, [pc, #284]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d119      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e07f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3b      	ldr	r3, [pc, #236]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e067      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b37      	ldr	r3, [pc, #220]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4934      	ldr	r1, [pc, #208]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002500:	f7fe fe0e 	bl	8001120 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe fe0a 	bl	8001120 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04f      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2b      	ldr	r3, [pc, #172]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d20c      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e032      	b.n	80025be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4916      	ldr	r1, [pc, #88]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490e      	ldr	r1, [pc, #56]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002596:	f000 f855 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490a      	ldr	r1, [pc, #40]	@ (80025d0 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a09      	ldr	r2, [pc, #36]	@ (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025b2:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd6e 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08004780 	.word	0x08004780
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000004 	.word	0x20000004

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08004790 	.word	0x08004790

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffdc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0b5b      	lsrs	r3, r3, #13
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	@ (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	08004790 	.word	0x08004790

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002648:	b0ae      	sub	sp, #184	@ 0xb8
 800264a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800266a:	4bcb      	ldr	r3, [pc, #812]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b0c      	cmp	r3, #12
 8002674:	f200 8206 	bhi.w	8002a84 <HAL_RCC_GetSysClockFreq+0x440>
 8002678:	a201      	add	r2, pc, #4	@ (adr r2, 8002680 <HAL_RCC_GetSysClockFreq+0x3c>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080026b5 	.word	0x080026b5
 8002684:	08002a85 	.word	0x08002a85
 8002688:	08002a85 	.word	0x08002a85
 800268c:	08002a85 	.word	0x08002a85
 8002690:	080026bd 	.word	0x080026bd
 8002694:	08002a85 	.word	0x08002a85
 8002698:	08002a85 	.word	0x08002a85
 800269c:	08002a85 	.word	0x08002a85
 80026a0:	080026c5 	.word	0x080026c5
 80026a4:	08002a85 	.word	0x08002a85
 80026a8:	08002a85 	.word	0x08002a85
 80026ac:	08002a85 	.word	0x08002a85
 80026b0:	080028b5 	.word	0x080028b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4bb9      	ldr	r3, [pc, #740]	@ (800299c <HAL_RCC_GetSysClockFreq+0x358>)
 80026b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80026ba:	e1e7      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026bc:	4bb8      	ldr	r3, [pc, #736]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026c2:	e1e3      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c4:	4bb4      	ldr	r3, [pc, #720]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d071      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026dc:	4bae      	ldr	r3, [pc, #696]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80026ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002702:	4622      	mov	r2, r4
 8002704:	462b      	mov	r3, r5
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4621      	mov	r1, r4
 800271c:	1a51      	subs	r1, r2, r1
 800271e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002720:	4629      	mov	r1, r5
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	647b      	str	r3, [r7, #68]	@ 0x44
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002734:	4649      	mov	r1, r9
 8002736:	018b      	lsls	r3, r1, #6
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800273e:	4641      	mov	r1, r8
 8002740:	018a      	lsls	r2, r1, #6
 8002742:	4641      	mov	r1, r8
 8002744:	1a51      	subs	r1, r2, r1
 8002746:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002748:	4649      	mov	r1, r9
 800274a:	eb63 0301 	sbc.w	r3, r3, r1
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800275c:	4649      	mov	r1, r9
 800275e:	00cb      	lsls	r3, r1, #3
 8002760:	4641      	mov	r1, r8
 8002762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002766:	4641      	mov	r1, r8
 8002768:	00ca      	lsls	r2, r1, #3
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	4603      	mov	r3, r0
 8002770:	4622      	mov	r2, r4
 8002772:	189b      	adds	r3, r3, r2
 8002774:	633b      	str	r3, [r7, #48]	@ 0x30
 8002776:	462b      	mov	r3, r5
 8002778:	460a      	mov	r2, r1
 800277a:	eb42 0303 	adc.w	r3, r2, r3
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800278c:	4629      	mov	r1, r5
 800278e:	024b      	lsls	r3, r1, #9
 8002790:	4621      	mov	r1, r4
 8002792:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002796:	4621      	mov	r1, r4
 8002798:	024a      	lsls	r2, r1, #9
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027b0:	f7fd fd86 	bl	80002c0 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027be:	e067      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b75      	ldr	r3, [pc, #468]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	2200      	movs	r2, #0
 80027c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80027d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027da:	2300      	movs	r3, #0
 80027dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80027e2:	4622      	mov	r2, r4
 80027e4:	462b      	mov	r3, r5
 80027e6:	f04f 0000 	mov.w	r0, #0
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	0159      	lsls	r1, r3, #5
 80027f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f4:	0150      	lsls	r0, r2, #5
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4621      	mov	r1, r4
 80027fc:	1a51      	subs	r1, r2, r1
 80027fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002800:	4629      	mov	r1, r5
 8002802:	eb63 0301 	sbc.w	r3, r3, r1
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002814:	4649      	mov	r1, r9
 8002816:	018b      	lsls	r3, r1, #6
 8002818:	4641      	mov	r1, r8
 800281a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800281e:	4641      	mov	r1, r8
 8002820:	018a      	lsls	r2, r1, #6
 8002822:	4641      	mov	r1, r8
 8002824:	ebb2 0a01 	subs.w	sl, r2, r1
 8002828:	4649      	mov	r1, r9
 800282a:	eb63 0b01 	sbc.w	fp, r3, r1
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800283a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800283e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002842:	4692      	mov	sl, r2
 8002844:	469b      	mov	fp, r3
 8002846:	4623      	mov	r3, r4
 8002848:	eb1a 0303 	adds.w	r3, sl, r3
 800284c:	623b      	str	r3, [r7, #32]
 800284e:	462b      	mov	r3, r5
 8002850:	eb4b 0303 	adc.w	r3, fp, r3
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002862:	4629      	mov	r1, r5
 8002864:	028b      	lsls	r3, r1, #10
 8002866:	4621      	mov	r1, r4
 8002868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800286c:	4621      	mov	r1, r4
 800286e:	028a      	lsls	r2, r1, #10
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002878:	2200      	movs	r2, #0
 800287a:	673b      	str	r3, [r7, #112]	@ 0x70
 800287c:	677a      	str	r2, [r7, #116]	@ 0x74
 800287e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002882:	f7fd fd1d 	bl	80002c0 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4613      	mov	r3, r2
 800288c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002890:	4b41      	ldr	r3, [pc, #260]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80028a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028b2:	e0eb      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b4:	4b38      	ldr	r3, [pc, #224]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c0:	4b35      	ldr	r3, [pc, #212]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d06b      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028cc:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	2200      	movs	r2, #0
 80028d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028de:	663b      	str	r3, [r7, #96]	@ 0x60
 80028e0:	2300      	movs	r3, #0
 80028e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80028e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80028e8:	4622      	mov	r2, r4
 80028ea:	462b      	mov	r3, r5
 80028ec:	f04f 0000 	mov.w	r0, #0
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	0159      	lsls	r1, r3, #5
 80028f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fa:	0150      	lsls	r0, r2, #5
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4621      	mov	r1, r4
 8002902:	1a51      	subs	r1, r2, r1
 8002904:	61b9      	str	r1, [r7, #24]
 8002906:	4629      	mov	r1, r5
 8002908:	eb63 0301 	sbc.w	r3, r3, r1
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800291a:	4659      	mov	r1, fp
 800291c:	018b      	lsls	r3, r1, #6
 800291e:	4651      	mov	r1, sl
 8002920:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002924:	4651      	mov	r1, sl
 8002926:	018a      	lsls	r2, r1, #6
 8002928:	4651      	mov	r1, sl
 800292a:	ebb2 0801 	subs.w	r8, r2, r1
 800292e:	4659      	mov	r1, fp
 8002930:	eb63 0901 	sbc.w	r9, r3, r1
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002940:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002944:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002948:	4690      	mov	r8, r2
 800294a:	4699      	mov	r9, r3
 800294c:	4623      	mov	r3, r4
 800294e:	eb18 0303 	adds.w	r3, r8, r3
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	462b      	mov	r3, r5
 8002956:	eb49 0303 	adc.w	r3, r9, r3
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002968:	4629      	mov	r1, r5
 800296a:	024b      	lsls	r3, r1, #9
 800296c:	4621      	mov	r1, r4
 800296e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002972:	4621      	mov	r1, r4
 8002974:	024a      	lsls	r2, r1, #9
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800297e:	2200      	movs	r2, #0
 8002980:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002982:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002984:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002988:	f7fd fc9a 	bl	80002c0 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002996:	e065      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x420>
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a4:	4b3d      	ldr	r3, [pc, #244]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x458>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	2200      	movs	r2, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	4611      	mov	r1, r2
 80029b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b6:	2300      	movs	r3, #0
 80029b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80029ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029be:	4642      	mov	r2, r8
 80029c0:	464b      	mov	r3, r9
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d0:	0150      	lsls	r0, r2, #5
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4641      	mov	r1, r8
 80029d8:	1a51      	subs	r1, r2, r1
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	4649      	mov	r1, r9
 80029de:	eb63 0301 	sbc.w	r3, r3, r1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029f0:	4659      	mov	r1, fp
 80029f2:	018b      	lsls	r3, r1, #6
 80029f4:	4651      	mov	r1, sl
 80029f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fa:	4651      	mov	r1, sl
 80029fc:	018a      	lsls	r2, r1, #6
 80029fe:	4651      	mov	r1, sl
 8002a00:	1a54      	subs	r4, r2, r1
 8002a02:	4659      	mov	r1, fp
 8002a04:	eb63 0501 	sbc.w	r5, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	00eb      	lsls	r3, r5, #3
 8002a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a16:	00e2      	lsls	r2, r4, #3
 8002a18:	4614      	mov	r4, r2
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	18e3      	adds	r3, r4, r3
 8002a20:	603b      	str	r3, [r7, #0]
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb45 0303 	adc.w	r3, r5, r3
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a36:	4629      	mov	r1, r5
 8002a38:	028b      	lsls	r3, r1, #10
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a40:	4621      	mov	r1, r4
 8002a42:	028a      	lsls	r2, r1, #10
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a56:	f7fd fc33 	bl	80002c0 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a64:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x458>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0f1b      	lsrs	r3, r3, #28
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a82:	e003      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	37b8      	adds	r7, #184	@ 0xb8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	00f42400 	.word	0x00f42400

08002aa4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e28d      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8083 	beq.w	8002bca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ac4:	4b94      	ldr	r3, [pc, #592]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d019      	beq.n	8002b04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ad0:	4b91      	ldr	r3, [pc, #580]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002adc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ae8:	d00c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aea:	4b8b      	ldr	r3, [pc, #556]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d112      	bne.n	8002b1c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	4b88      	ldr	r3, [pc, #544]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b02:	d10b      	bne.n	8002b1c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	4b84      	ldr	r3, [pc, #528]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x124>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d157      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e25a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x90>
 8002b26:	4b7c      	ldr	r3, [pc, #496]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xcc>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0xb4>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a72      	ldr	r2, [pc, #456]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xcc>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b6c      	ldr	r3, [pc, #432]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6b      	ldr	r2, [pc, #428]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fad2 	bl	8001120 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe face 	bl	8001120 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	@ 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e21f      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b61      	ldr	r3, [pc, #388]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xdc>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fabe 	bl	8001120 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe faba 	bl	8001120 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e20b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b57      	ldr	r3, [pc, #348]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x104>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06f      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bd6:	4b50      	ldr	r3, [pc, #320]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d017      	beq.n	8002c12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002be2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x186>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1d3      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0x278>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fa67 	bl	8001120 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fa63 	bl	8001120 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1b4      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_RCC_OscConfig+0x278>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fa46 	bl	8001120 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa42 	bl	8001120 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e193      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fa26 	bl	8001120 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fa22 	bl	8001120 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e173      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x234>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	@ (8002d20 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fa0f 	bl	8001120 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fa0b 	bl	8001120 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e15c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b83      	ldr	r3, [pc, #524]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7f      	ldr	r3, [pc, #508]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a7e      	ldr	r2, [pc, #504]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b79      	ldr	r3, [pc, #484]	@ (8002f54 <HAL_RCC_OscConfig+0x4b0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b76      	ldr	r3, [pc, #472]	@ (8002f54 <HAL_RCC_OscConfig+0x4b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a75      	ldr	r2, [pc, #468]	@ (8002f54 <HAL_RCC_OscConfig+0x4b0>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe f9cb 	bl	8001120 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe f9c7 	bl	8001120 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e118      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f54 <HAL_RCC_OscConfig+0x4b0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x31e>
 8002db4:	4b66      	ldr	r3, [pc, #408]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db8:	4a65      	ldr	r2, [pc, #404]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x358>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x340>
 8002dca:	4b61      	ldr	r3, [pc, #388]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a60      	ldr	r2, [pc, #384]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dda:	4a5d      	ldr	r2, [pc, #372]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x358>
 8002de4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	4a59      	ldr	r2, [pc, #356]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df0:	4b57      	ldr	r3, [pc, #348]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	4a56      	ldr	r2, [pc, #344]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f98c 	bl	8001120 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f988 	bl	8001120 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0d7      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b4b      	ldr	r3, [pc, #300]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x368>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f976 	bl	8001120 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe f972 	bl	8001120 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0c1      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b3b      	ldr	r3, [pc, #236]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	4a3a      	ldr	r2, [pc, #232]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80ad 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d060      	beq.n	8002f44 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d145      	bne.n	8002f16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_RCC_OscConfig+0x4b4>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f946 	bl	8001120 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f942 	bl	8001120 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e093      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee0:	071b      	lsls	r3, r3, #28
 8002ee2:	491b      	ldr	r1, [pc, #108]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4b4>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7fe f917 	bl	8001120 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fe f913 	bl	8001120 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e064      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x452>
 8002f14:	e05c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f16:	4b10      	ldr	r3, [pc, #64]	@ (8002f58 <HAL_RCC_OscConfig+0x4b4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f900 	bl	8001120 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe f8fc 	bl	8001120 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e04d      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x480>
 8002f42:	e045      	b.n	8002fd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e040      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_RCC_OscConfig+0x538>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d030      	beq.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d129      	bne.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d122      	bne.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d119      	bne.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d10f      	bne.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e041      	b.n	8003076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd ff92 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3304      	adds	r3, #4
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f000 f9ce 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d001      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e04e      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a23      	ldr	r2, [pc, #140]	@ (8003144 <HAL_TIM_Base_Start_IT+0xc4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d022      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c2:	d01d      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <HAL_TIM_Base_Start_IT+0xc8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1e      	ldr	r2, [pc, #120]	@ (800314c <HAL_TIM_Base_Start_IT+0xcc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <HAL_TIM_Base_Start_IT+0xd0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <HAL_TIM_Base_Start_IT+0xd4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_TIM_Base_Start_IT+0xd8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x80>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a18      	ldr	r2, [pc, #96]	@ (800315c <HAL_TIM_Base_Start_IT+0xdc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d010      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e007      	b.n	8003134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40010400 	.word	0x40010400
 8003158:	40014000 	.word	0x40014000
 800315c:	40001800 	.word	0x40001800

08003160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d122      	bne.n	80031bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0202 	mvn.w	r2, #2
 800318c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8ee 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f8e0 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8f1 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d122      	bne.n	8003210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d11b      	bne.n	8003210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0204 	mvn.w	r2, #4
 80031e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8c4 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8b6 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8c7 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d122      	bne.n	8003264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b08      	cmp	r3, #8
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0208 	mvn.w	r2, #8
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2204      	movs	r2, #4
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f89a 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f88c 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f89d 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d122      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b10      	cmp	r3, #16
 800327e:	d11b      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2208      	movs	r2, #8
 800328e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f870 	bl	8003384 <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f862 	bl	8003370 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f873 	bl	8003398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0201 	mvn.w	r2, #1
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fce8 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d10e      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	2b80      	cmp	r3, #128	@ 0x80
 80032fe:	d107      	bne.n	8003310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f902 	bl	8003514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331a:	2b40      	cmp	r3, #64	@ 0x40
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f838 	bl	80033ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b20      	cmp	r3, #32
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0220 	mvn.w	r2, #32
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8cc 	bl	8003500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a40      	ldr	r2, [pc, #256]	@ (80034d4 <TIM_Base_SetConfig+0x114>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d013      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033de:	d00f      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3d      	ldr	r2, [pc, #244]	@ (80034d8 <TIM_Base_SetConfig+0x118>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00b      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3c      	ldr	r2, [pc, #240]	@ (80034dc <TIM_Base_SetConfig+0x11c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	@ (80034e0 <TIM_Base_SetConfig+0x120>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3a      	ldr	r2, [pc, #232]	@ (80034e4 <TIM_Base_SetConfig+0x124>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d108      	bne.n	8003412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2f      	ldr	r2, [pc, #188]	@ (80034d4 <TIM_Base_SetConfig+0x114>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d02b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003420:	d027      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2c      	ldr	r2, [pc, #176]	@ (80034d8 <TIM_Base_SetConfig+0x118>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d023      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2b      	ldr	r2, [pc, #172]	@ (80034dc <TIM_Base_SetConfig+0x11c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2a      	ldr	r2, [pc, #168]	@ (80034e0 <TIM_Base_SetConfig+0x120>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a29      	ldr	r2, [pc, #164]	@ (80034e4 <TIM_Base_SetConfig+0x124>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <TIM_Base_SetConfig+0x128>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <TIM_Base_SetConfig+0x12c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <TIM_Base_SetConfig+0x130>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a25      	ldr	r2, [pc, #148]	@ (80034f4 <TIM_Base_SetConfig+0x134>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a24      	ldr	r2, [pc, #144]	@ (80034f8 <TIM_Base_SetConfig+0x138>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a23      	ldr	r2, [pc, #140]	@ (80034fc <TIM_Base_SetConfig+0x13c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <TIM_Base_SetConfig+0x114>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d003      	beq.n	80034b8 <TIM_Base_SetConfig+0xf8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a0c      	ldr	r2, [pc, #48]	@ (80034e4 <TIM_Base_SetConfig+0x124>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d103      	bne.n	80034c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	615a      	str	r2, [r3, #20]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40010400 	.word	0x40010400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	40001800 	.word	0x40001800
 80034f8:	40001c00 	.word	0x40001c00
 80034fc:	40002000 	.word	0x40002000

08003500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e03f      	b.n	80035ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fc5a 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	@ 0x24
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800356a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f929 	bl	80037c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08a      	sub	sp, #40	@ 0x28
 80035c6:	af02      	add	r7, sp, #8
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	4613      	mov	r3, r2
 80035d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d17c      	bne.n	80036dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <HAL_UART_Transmit+0x2c>
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e075      	b.n	80036de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_UART_Transmit+0x3e>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e06e      	b.n	80036de <HAL_UART_Transmit+0x11c>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	@ 0x21
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003616:	f7fd fd83 	bl	8001120 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	88fa      	ldrh	r2, [r7, #6]
 8003626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003630:	d108      	bne.n	8003644 <HAL_UART_Transmit+0x82>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e003      	b.n	800364c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003654:	e02a      	b.n	80036ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2180      	movs	r1, #128	@ 0x80
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f840 	bl	80036e6 <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e036      	b.n	80036de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3302      	adds	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e007      	b.n	800369e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	3301      	adds	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1cf      	bne.n	8003656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2140      	movs	r1, #64	@ 0x40
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f810 	bl	80036e6 <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e006      	b.n	80036de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b090      	sub	sp, #64	@ 0x40
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	603b      	str	r3, [r7, #0]
 80036f2:	4613      	mov	r3, r2
 80036f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	e050      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d04c      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x30>
 8003706:	f7fd fd0b 	bl	8001120 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003712:	429a      	cmp	r2, r3
 8003714:	d241      	bcs.n	800379a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800372c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003736:	637a      	str	r2, [r7, #52]	@ 0x34
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800373c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e5      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3314      	adds	r3, #20
 8003750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	613b      	str	r3, [r7, #16]
   return(result);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3314      	adds	r3, #20
 8003768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800376a:	623a      	str	r2, [r7, #32]
 800376c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	69f9      	ldr	r1, [r7, #28]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	61bb      	str	r3, [r7, #24]
   return(result);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e5      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e00f      	b.n	80037ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d09f      	beq.n	80036f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3740      	adds	r7, #64	@ 0x40
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b0c0      	sub	sp, #256	@ 0x100
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	ea40 0301 	orr.w	r3, r0, r1
 80037ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800381c:	f021 010c 	bic.w	r1, r1, #12
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	6999      	ldr	r1, [r3, #24]
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	ea40 0301 	orr.w	r3, r0, r1
 800384a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b8f      	ldr	r3, [pc, #572]	@ (8003a90 <UART_SetConfig+0x2cc>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0xa0>
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a94 <UART_SetConfig+0x2d0>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d104      	bne.n	800386e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7fe feda 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8003868:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800386c:	e003      	b.n	8003876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7fe fec1 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003872:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	f040 810c 	bne.w	8003a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800388e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	1891      	adds	r1, r2, r2
 800389c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800389e:	415b      	adcs	r3, r3
 80038a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038a6:	4621      	mov	r1, r4
 80038a8:	eb12 0801 	adds.w	r8, r2, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb43 0901 	adc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb49 0303 	adc.w	r3, r9, r3
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	18db      	adds	r3, r3, r3
 80038f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038f8:	4613      	mov	r3, r2
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003908:	f7fc fcda 	bl	80002c0 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003912:	fba3 2302 	umull	r2, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	011c      	lsls	r4, r3, #4
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003924:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003934:	415b      	adcs	r3, r3
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800393c:	4641      	mov	r1, r8
 800393e:	eb12 0a01 	adds.w	sl, r2, r1
 8003942:	4649      	mov	r1, r9
 8003944:	eb43 0b01 	adc.w	fp, r3, r1
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395c:	4692      	mov	sl, r2
 800395e:	469b      	mov	fp, r3
 8003960:	4643      	mov	r3, r8
 8003962:	eb1a 0303 	adds.w	r3, sl, r3
 8003966:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800396a:	464b      	mov	r3, r9
 800396c:	eb4b 0303 	adc.w	r3, fp, r3
 8003970:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003980:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003988:	460b      	mov	r3, r1
 800398a:	18db      	adds	r3, r3, r3
 800398c:	643b      	str	r3, [r7, #64]	@ 0x40
 800398e:	4613      	mov	r3, r2
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	647b      	str	r3, [r7, #68]	@ 0x44
 8003996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800399a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800399e:	f7fc fc8f 	bl	80002c0 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <UART_SetConfig+0x2d4>)
 80039aa:	fba3 2301 	umull	r2, r3, r3, r1
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2264      	movs	r2, #100	@ 0x64
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	1acb      	subs	r3, r1, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039be:	4b36      	ldr	r3, [pc, #216]	@ (8003a98 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 2302 	umull	r2, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039cc:	441c      	add	r4, r3
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039e8:	415b      	adcs	r3, r3
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a5a:	f7fc fc31 	bl	80002c0 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	@ 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	@ 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <UART_SetConfig+0x2d4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4422      	add	r2, r4
 8003a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a8c:	e106      	b.n	8003c9c <UART_SetConfig+0x4d8>
 8003a8e:	bf00      	nop
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003aae:	4642      	mov	r2, r8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	6239      	str	r1, [r7, #32]
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003abe:	4641      	mov	r1, r8
 8003ac0:	1854      	adds	r4, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0501 	adc.w	r5, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	00eb      	lsls	r3, r5, #3
 8003ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad6:	00e2      	lsls	r2, r4, #3
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	eb45 0303 	adc.w	r3, r5, r3
 8003aea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4621      	mov	r1, r4
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b1c:	f7fc fbd0 	bl	80002c0 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b60      	ldr	r3, [pc, #384]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	011c      	lsls	r4, r3, #4
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	61b9      	str	r1, [r7, #24]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6139      	str	r1, [r7, #16]
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ba8:	4649      	mov	r1, r9
 8003baa:	008b      	lsls	r3, r1, #2
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	008a      	lsls	r2, r1, #2
 8003bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bba:	f7fc fb81 	bl	80002c0 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b38      	ldr	r3, [pc, #224]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	@ 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	3332      	adds	r3, #50	@ 0x32
 8003bd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be4:	441c      	add	r4, r3
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c58:	4649      	mov	r1, r9
 8003c5a:	008b      	lsls	r3, r1, #2
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c62:	4641      	mov	r1, r8
 8003c64:	008a      	lsls	r2, r1, #2
 8003c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c6a:	f7fc fb29 	bl	80002c0 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	@ 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	@ 0x32
 8003c86:	4a08      	ldr	r2, [pc, #32]	@ (8003ca8 <UART_SetConfig+0x4e4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4422      	add	r2, r4
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <siprintf>:
 8003cac:	b40e      	push	{r1, r2, r3}
 8003cae:	b500      	push	{lr}
 8003cb0:	b09c      	sub	sp, #112	@ 0x70
 8003cb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003cb4:	9002      	str	r0, [sp, #8]
 8003cb6:	9006      	str	r0, [sp, #24]
 8003cb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cbc:	4809      	ldr	r0, [pc, #36]	@ (8003ce4 <siprintf+0x38>)
 8003cbe:	9107      	str	r1, [sp, #28]
 8003cc0:	9104      	str	r1, [sp, #16]
 8003cc2:	4909      	ldr	r1, [pc, #36]	@ (8003ce8 <siprintf+0x3c>)
 8003cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cc8:	9105      	str	r1, [sp, #20]
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	a902      	add	r1, sp, #8
 8003cd0:	f000 f98c 	bl	8003fec <_svfiprintf_r>
 8003cd4:	9b02      	ldr	r3, [sp, #8]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	b01c      	add	sp, #112	@ 0x70
 8003cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	4770      	bx	lr
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	ffff0208 	.word	0xffff0208

08003cec <__errno>:
 8003cec:	4b01      	ldr	r3, [pc, #4]	@ (8003cf4 <__errno+0x8>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2600      	movs	r6, #0
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4d0b      	ldr	r5, [pc, #44]	@ (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f000 fc66 	bl	80045dc <_init>
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2600      	movs	r6, #0
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	080047d4 	.word	0x080047d4
 8003d34:	080047d4 	.word	0x080047d4
 8003d38:	080047d4 	.word	0x080047d4
 8003d3c:	080047d8 	.word	0x080047d8

08003d40 <__retarget_lock_acquire_recursive>:
 8003d40:	4770      	bx	lr

08003d42 <__retarget_lock_release_recursive>:
 8003d42:	4770      	bx	lr

08003d44 <_free_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4605      	mov	r5, r0
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d041      	beq.n	8003dd0 <_free_r+0x8c>
 8003d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d50:	1f0c      	subs	r4, r1, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	18e4      	addlt	r4, r4, r3
 8003d58:	f000 f8e0 	bl	8003f1c <__malloc_lock>
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <_free_r+0x90>)
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	b933      	cbnz	r3, 8003d70 <_free_r+0x2c>
 8003d62:	6063      	str	r3, [r4, #4]
 8003d64:	6014      	str	r4, [r2, #0]
 8003d66:	4628      	mov	r0, r5
 8003d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6c:	f000 b8dc 	b.w	8003f28 <__malloc_unlock>
 8003d70:	42a3      	cmp	r3, r4
 8003d72:	d908      	bls.n	8003d86 <_free_r+0x42>
 8003d74:	6820      	ldr	r0, [r4, #0]
 8003d76:	1821      	adds	r1, r4, r0
 8003d78:	428b      	cmp	r3, r1
 8003d7a:	bf01      	itttt	eq
 8003d7c:	6819      	ldreq	r1, [r3, #0]
 8003d7e:	685b      	ldreq	r3, [r3, #4]
 8003d80:	1809      	addeq	r1, r1, r0
 8003d82:	6021      	streq	r1, [r4, #0]
 8003d84:	e7ed      	b.n	8003d62 <_free_r+0x1e>
 8003d86:	461a      	mov	r2, r3
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	b10b      	cbz	r3, 8003d90 <_free_r+0x4c>
 8003d8c:	42a3      	cmp	r3, r4
 8003d8e:	d9fa      	bls.n	8003d86 <_free_r+0x42>
 8003d90:	6811      	ldr	r1, [r2, #0]
 8003d92:	1850      	adds	r0, r2, r1
 8003d94:	42a0      	cmp	r0, r4
 8003d96:	d10b      	bne.n	8003db0 <_free_r+0x6c>
 8003d98:	6820      	ldr	r0, [r4, #0]
 8003d9a:	4401      	add	r1, r0
 8003d9c:	1850      	adds	r0, r2, r1
 8003d9e:	4283      	cmp	r3, r0
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	d1e0      	bne.n	8003d66 <_free_r+0x22>
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	6053      	str	r3, [r2, #4]
 8003daa:	4408      	add	r0, r1
 8003dac:	6010      	str	r0, [r2, #0]
 8003dae:	e7da      	b.n	8003d66 <_free_r+0x22>
 8003db0:	d902      	bls.n	8003db8 <_free_r+0x74>
 8003db2:	230c      	movs	r3, #12
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	e7d6      	b.n	8003d66 <_free_r+0x22>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	1821      	adds	r1, r4, r0
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	bf04      	itt	eq
 8003dc0:	6819      	ldreq	r1, [r3, #0]
 8003dc2:	685b      	ldreq	r3, [r3, #4]
 8003dc4:	6063      	str	r3, [r4, #4]
 8003dc6:	bf04      	itt	eq
 8003dc8:	1809      	addeq	r1, r1, r0
 8003dca:	6021      	streq	r1, [r4, #0]
 8003dcc:	6054      	str	r4, [r2, #4]
 8003dce:	e7ca      	b.n	8003d66 <_free_r+0x22>
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000298 	.word	0x20000298

08003dd8 <sbrk_aligned>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	4e0f      	ldr	r6, [pc, #60]	@ (8003e18 <sbrk_aligned+0x40>)
 8003ddc:	460c      	mov	r4, r1
 8003dde:	6831      	ldr	r1, [r6, #0]
 8003de0:	4605      	mov	r5, r0
 8003de2:	b911      	cbnz	r1, 8003dea <sbrk_aligned+0x12>
 8003de4:	f000 fba6 	bl	8004534 <_sbrk_r>
 8003de8:	6030      	str	r0, [r6, #0]
 8003dea:	4621      	mov	r1, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 fba1 	bl	8004534 <_sbrk_r>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d103      	bne.n	8003dfe <sbrk_aligned+0x26>
 8003df6:	f04f 34ff 	mov.w	r4, #4294967295
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	1cc4      	adds	r4, r0, #3
 8003e00:	f024 0403 	bic.w	r4, r4, #3
 8003e04:	42a0      	cmp	r0, r4
 8003e06:	d0f8      	beq.n	8003dfa <sbrk_aligned+0x22>
 8003e08:	1a21      	subs	r1, r4, r0
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f000 fb92 	bl	8004534 <_sbrk_r>
 8003e10:	3001      	adds	r0, #1
 8003e12:	d1f2      	bne.n	8003dfa <sbrk_aligned+0x22>
 8003e14:	e7ef      	b.n	8003df6 <sbrk_aligned+0x1e>
 8003e16:	bf00      	nop
 8003e18:	20000294 	.word	0x20000294

08003e1c <_malloc_r>:
 8003e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e20:	1ccd      	adds	r5, r1, #3
 8003e22:	f025 0503 	bic.w	r5, r5, #3
 8003e26:	3508      	adds	r5, #8
 8003e28:	2d0c      	cmp	r5, #12
 8003e2a:	bf38      	it	cc
 8003e2c:	250c      	movcc	r5, #12
 8003e2e:	2d00      	cmp	r5, #0
 8003e30:	4606      	mov	r6, r0
 8003e32:	db01      	blt.n	8003e38 <_malloc_r+0x1c>
 8003e34:	42a9      	cmp	r1, r5
 8003e36:	d904      	bls.n	8003e42 <_malloc_r+0x26>
 8003e38:	230c      	movs	r3, #12
 8003e3a:	6033      	str	r3, [r6, #0]
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f18 <_malloc_r+0xfc>
 8003e46:	f000 f869 	bl	8003f1c <__malloc_lock>
 8003e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e4e:	461c      	mov	r4, r3
 8003e50:	bb44      	cbnz	r4, 8003ea4 <_malloc_r+0x88>
 8003e52:	4629      	mov	r1, r5
 8003e54:	4630      	mov	r0, r6
 8003e56:	f7ff ffbf 	bl	8003dd8 <sbrk_aligned>
 8003e5a:	1c43      	adds	r3, r0, #1
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	d158      	bne.n	8003f12 <_malloc_r+0xf6>
 8003e60:	f8d8 4000 	ldr.w	r4, [r8]
 8003e64:	4627      	mov	r7, r4
 8003e66:	2f00      	cmp	r7, #0
 8003e68:	d143      	bne.n	8003ef2 <_malloc_r+0xd6>
 8003e6a:	2c00      	cmp	r4, #0
 8003e6c:	d04b      	beq.n	8003f06 <_malloc_r+0xea>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	4639      	mov	r1, r7
 8003e72:	4630      	mov	r0, r6
 8003e74:	eb04 0903 	add.w	r9, r4, r3
 8003e78:	f000 fb5c 	bl	8004534 <_sbrk_r>
 8003e7c:	4581      	cmp	r9, r0
 8003e7e:	d142      	bne.n	8003f06 <_malloc_r+0xea>
 8003e80:	6821      	ldr	r1, [r4, #0]
 8003e82:	1a6d      	subs	r5, r5, r1
 8003e84:	4629      	mov	r1, r5
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff ffa6 	bl	8003dd8 <sbrk_aligned>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d03a      	beq.n	8003f06 <_malloc_r+0xea>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	442b      	add	r3, r5
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	f8d8 3000 	ldr.w	r3, [r8]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	bb62      	cbnz	r2, 8003ef8 <_malloc_r+0xdc>
 8003e9e:	f8c8 7000 	str.w	r7, [r8]
 8003ea2:	e00f      	b.n	8003ec4 <_malloc_r+0xa8>
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	1b52      	subs	r2, r2, r5
 8003ea8:	d420      	bmi.n	8003eec <_malloc_r+0xd0>
 8003eaa:	2a0b      	cmp	r2, #11
 8003eac:	d917      	bls.n	8003ede <_malloc_r+0xc2>
 8003eae:	1961      	adds	r1, r4, r5
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	6025      	str	r5, [r4, #0]
 8003eb4:	bf18      	it	ne
 8003eb6:	6059      	strne	r1, [r3, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	bf08      	it	eq
 8003ebc:	f8c8 1000 	streq.w	r1, [r8]
 8003ec0:	5162      	str	r2, [r4, r5]
 8003ec2:	604b      	str	r3, [r1, #4]
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f82f 	bl	8003f28 <__malloc_unlock>
 8003eca:	f104 000b 	add.w	r0, r4, #11
 8003ece:	1d23      	adds	r3, r4, #4
 8003ed0:	f020 0007 	bic.w	r0, r0, #7
 8003ed4:	1ac2      	subs	r2, r0, r3
 8003ed6:	bf1c      	itt	ne
 8003ed8:	1a1b      	subne	r3, r3, r0
 8003eda:	50a3      	strne	r3, [r4, r2]
 8003edc:	e7af      	b.n	8003e3e <_malloc_r+0x22>
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	bf0c      	ite	eq
 8003ee4:	f8c8 2000 	streq.w	r2, [r8]
 8003ee8:	605a      	strne	r2, [r3, #4]
 8003eea:	e7eb      	b.n	8003ec4 <_malloc_r+0xa8>
 8003eec:	4623      	mov	r3, r4
 8003eee:	6864      	ldr	r4, [r4, #4]
 8003ef0:	e7ae      	b.n	8003e50 <_malloc_r+0x34>
 8003ef2:	463c      	mov	r4, r7
 8003ef4:	687f      	ldr	r7, [r7, #4]
 8003ef6:	e7b6      	b.n	8003e66 <_malloc_r+0x4a>
 8003ef8:	461a      	mov	r2, r3
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d1fb      	bne.n	8003ef8 <_malloc_r+0xdc>
 8003f00:	2300      	movs	r3, #0
 8003f02:	6053      	str	r3, [r2, #4]
 8003f04:	e7de      	b.n	8003ec4 <_malloc_r+0xa8>
 8003f06:	230c      	movs	r3, #12
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 f80c 	bl	8003f28 <__malloc_unlock>
 8003f10:	e794      	b.n	8003e3c <_malloc_r+0x20>
 8003f12:	6005      	str	r5, [r0, #0]
 8003f14:	e7d6      	b.n	8003ec4 <_malloc_r+0xa8>
 8003f16:	bf00      	nop
 8003f18:	20000298 	.word	0x20000298

08003f1c <__malloc_lock>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	@ (8003f24 <__malloc_lock+0x8>)
 8003f1e:	f7ff bf0f 	b.w	8003d40 <__retarget_lock_acquire_recursive>
 8003f22:	bf00      	nop
 8003f24:	20000290 	.word	0x20000290

08003f28 <__malloc_unlock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	@ (8003f30 <__malloc_unlock+0x8>)
 8003f2a:	f7ff bf0a 	b.w	8003d42 <__retarget_lock_release_recursive>
 8003f2e:	bf00      	nop
 8003f30:	20000290 	.word	0x20000290

08003f34 <__ssputs_r>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	688e      	ldr	r6, [r1, #8]
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	42be      	cmp	r6, r7
 8003f3e:	680b      	ldr	r3, [r1, #0]
 8003f40:	4682      	mov	sl, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4690      	mov	r8, r2
 8003f46:	d82d      	bhi.n	8003fa4 <__ssputs_r+0x70>
 8003f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f50:	d026      	beq.n	8003fa0 <__ssputs_r+0x6c>
 8003f52:	6965      	ldr	r5, [r4, #20]
 8003f54:	6909      	ldr	r1, [r1, #16]
 8003f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f5a:	eba3 0901 	sub.w	r9, r3, r1
 8003f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f62:	1c7b      	adds	r3, r7, #1
 8003f64:	444b      	add	r3, r9
 8003f66:	106d      	asrs	r5, r5, #1
 8003f68:	429d      	cmp	r5, r3
 8003f6a:	bf38      	it	cc
 8003f6c:	461d      	movcc	r5, r3
 8003f6e:	0553      	lsls	r3, r2, #21
 8003f70:	d527      	bpl.n	8003fc2 <__ssputs_r+0x8e>
 8003f72:	4629      	mov	r1, r5
 8003f74:	f7ff ff52 	bl	8003e1c <_malloc_r>
 8003f78:	4606      	mov	r6, r0
 8003f7a:	b360      	cbz	r0, 8003fd6 <__ssputs_r+0xa2>
 8003f7c:	6921      	ldr	r1, [r4, #16]
 8003f7e:	464a      	mov	r2, r9
 8003f80:	f000 fae8 	bl	8004554 <memcpy>
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	6126      	str	r6, [r4, #16]
 8003f92:	6165      	str	r5, [r4, #20]
 8003f94:	444e      	add	r6, r9
 8003f96:	eba5 0509 	sub.w	r5, r5, r9
 8003f9a:	6026      	str	r6, [r4, #0]
 8003f9c:	60a5      	str	r5, [r4, #8]
 8003f9e:	463e      	mov	r6, r7
 8003fa0:	42be      	cmp	r6, r7
 8003fa2:	d900      	bls.n	8003fa6 <__ssputs_r+0x72>
 8003fa4:	463e      	mov	r6, r7
 8003fa6:	6820      	ldr	r0, [r4, #0]
 8003fa8:	4632      	mov	r2, r6
 8003faa:	4641      	mov	r1, r8
 8003fac:	f000 faa8 	bl	8004500 <memmove>
 8003fb0:	68a3      	ldr	r3, [r4, #8]
 8003fb2:	1b9b      	subs	r3, r3, r6
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	4433      	add	r3, r6
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	f000 fad4 	bl	8004570 <_realloc_r>
 8003fc8:	4606      	mov	r6, r0
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d1e0      	bne.n	8003f90 <__ssputs_r+0x5c>
 8003fce:	6921      	ldr	r1, [r4, #16]
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	f7ff feb7 	bl	8003d44 <_free_r>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	f8ca 3000 	str.w	r3, [sl]
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	e7e9      	b.n	8003fbe <__ssputs_r+0x8a>
	...

08003fec <_svfiprintf_r>:
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff0:	4698      	mov	r8, r3
 8003ff2:	898b      	ldrh	r3, [r1, #12]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	b09d      	sub	sp, #116	@ 0x74
 8003ff8:	4607      	mov	r7, r0
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	d510      	bpl.n	8004022 <_svfiprintf_r+0x36>
 8004000:	690b      	ldr	r3, [r1, #16]
 8004002:	b973      	cbnz	r3, 8004022 <_svfiprintf_r+0x36>
 8004004:	2140      	movs	r1, #64	@ 0x40
 8004006:	f7ff ff09 	bl	8003e1c <_malloc_r>
 800400a:	6028      	str	r0, [r5, #0]
 800400c:	6128      	str	r0, [r5, #16]
 800400e:	b930      	cbnz	r0, 800401e <_svfiprintf_r+0x32>
 8004010:	230c      	movs	r3, #12
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	b01d      	add	sp, #116	@ 0x74
 800401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401e:	2340      	movs	r3, #64	@ 0x40
 8004020:	616b      	str	r3, [r5, #20]
 8004022:	2300      	movs	r3, #0
 8004024:	9309      	str	r3, [sp, #36]	@ 0x24
 8004026:	2320      	movs	r3, #32
 8004028:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800402c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004030:	2330      	movs	r3, #48	@ 0x30
 8004032:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041d0 <_svfiprintf_r+0x1e4>
 8004036:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800403a:	f04f 0901 	mov.w	r9, #1
 800403e:	4623      	mov	r3, r4
 8004040:	469a      	mov	sl, r3
 8004042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004046:	b10a      	cbz	r2, 800404c <_svfiprintf_r+0x60>
 8004048:	2a25      	cmp	r2, #37	@ 0x25
 800404a:	d1f9      	bne.n	8004040 <_svfiprintf_r+0x54>
 800404c:	ebba 0b04 	subs.w	fp, sl, r4
 8004050:	d00b      	beq.n	800406a <_svfiprintf_r+0x7e>
 8004052:	465b      	mov	r3, fp
 8004054:	4622      	mov	r2, r4
 8004056:	4629      	mov	r1, r5
 8004058:	4638      	mov	r0, r7
 800405a:	f7ff ff6b 	bl	8003f34 <__ssputs_r>
 800405e:	3001      	adds	r0, #1
 8004060:	f000 80a7 	beq.w	80041b2 <_svfiprintf_r+0x1c6>
 8004064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004066:	445a      	add	r2, fp
 8004068:	9209      	str	r2, [sp, #36]	@ 0x24
 800406a:	f89a 3000 	ldrb.w	r3, [sl]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 809f 	beq.w	80041b2 <_svfiprintf_r+0x1c6>
 8004074:	2300      	movs	r3, #0
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800407e:	f10a 0a01 	add.w	sl, sl, #1
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	9307      	str	r3, [sp, #28]
 8004086:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800408a:	931a      	str	r3, [sp, #104]	@ 0x68
 800408c:	4654      	mov	r4, sl
 800408e:	2205      	movs	r2, #5
 8004090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004094:	484e      	ldr	r0, [pc, #312]	@ (80041d0 <_svfiprintf_r+0x1e4>)
 8004096:	f7fc f8c3 	bl	8000220 <memchr>
 800409a:	9a04      	ldr	r2, [sp, #16]
 800409c:	b9d8      	cbnz	r0, 80040d6 <_svfiprintf_r+0xea>
 800409e:	06d0      	lsls	r0, r2, #27
 80040a0:	bf44      	itt	mi
 80040a2:	2320      	movmi	r3, #32
 80040a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040a8:	0711      	lsls	r1, r2, #28
 80040aa:	bf44      	itt	mi
 80040ac:	232b      	movmi	r3, #43	@ 0x2b
 80040ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040b2:	f89a 3000 	ldrb.w	r3, [sl]
 80040b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040b8:	d015      	beq.n	80040e6 <_svfiprintf_r+0xfa>
 80040ba:	9a07      	ldr	r2, [sp, #28]
 80040bc:	4654      	mov	r4, sl
 80040be:	2000      	movs	r0, #0
 80040c0:	f04f 0c0a 	mov.w	ip, #10
 80040c4:	4621      	mov	r1, r4
 80040c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ca:	3b30      	subs	r3, #48	@ 0x30
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d94b      	bls.n	8004168 <_svfiprintf_r+0x17c>
 80040d0:	b1b0      	cbz	r0, 8004100 <_svfiprintf_r+0x114>
 80040d2:	9207      	str	r2, [sp, #28]
 80040d4:	e014      	b.n	8004100 <_svfiprintf_r+0x114>
 80040d6:	eba0 0308 	sub.w	r3, r0, r8
 80040da:	fa09 f303 	lsl.w	r3, r9, r3
 80040de:	4313      	orrs	r3, r2
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	46a2      	mov	sl, r4
 80040e4:	e7d2      	b.n	800408c <_svfiprintf_r+0xa0>
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	1d19      	adds	r1, r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	9103      	str	r1, [sp, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbb      	ittet	lt
 80040f2:	425b      	neglt	r3, r3
 80040f4:	f042 0202 	orrlt.w	r2, r2, #2
 80040f8:	9307      	strge	r3, [sp, #28]
 80040fa:	9307      	strlt	r3, [sp, #28]
 80040fc:	bfb8      	it	lt
 80040fe:	9204      	strlt	r2, [sp, #16]
 8004100:	7823      	ldrb	r3, [r4, #0]
 8004102:	2b2e      	cmp	r3, #46	@ 0x2e
 8004104:	d10a      	bne.n	800411c <_svfiprintf_r+0x130>
 8004106:	7863      	ldrb	r3, [r4, #1]
 8004108:	2b2a      	cmp	r3, #42	@ 0x2a
 800410a:	d132      	bne.n	8004172 <_svfiprintf_r+0x186>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	9203      	str	r2, [sp, #12]
 8004114:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004118:	3402      	adds	r4, #2
 800411a:	9305      	str	r3, [sp, #20]
 800411c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041e0 <_svfiprintf_r+0x1f4>
 8004120:	7821      	ldrb	r1, [r4, #0]
 8004122:	2203      	movs	r2, #3
 8004124:	4650      	mov	r0, sl
 8004126:	f7fc f87b 	bl	8000220 <memchr>
 800412a:	b138      	cbz	r0, 800413c <_svfiprintf_r+0x150>
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	eba0 000a 	sub.w	r0, r0, sl
 8004132:	2240      	movs	r2, #64	@ 0x40
 8004134:	4082      	lsls	r2, r0
 8004136:	4313      	orrs	r3, r2
 8004138:	3401      	adds	r4, #1
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004140:	4824      	ldr	r0, [pc, #144]	@ (80041d4 <_svfiprintf_r+0x1e8>)
 8004142:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004146:	2206      	movs	r2, #6
 8004148:	f7fc f86a 	bl	8000220 <memchr>
 800414c:	2800      	cmp	r0, #0
 800414e:	d036      	beq.n	80041be <_svfiprintf_r+0x1d2>
 8004150:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <_svfiprintf_r+0x1ec>)
 8004152:	bb1b      	cbnz	r3, 800419c <_svfiprintf_r+0x1b0>
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	3307      	adds	r3, #7
 8004158:	f023 0307 	bic.w	r3, r3, #7
 800415c:	3308      	adds	r3, #8
 800415e:	9303      	str	r3, [sp, #12]
 8004160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004162:	4433      	add	r3, r6
 8004164:	9309      	str	r3, [sp, #36]	@ 0x24
 8004166:	e76a      	b.n	800403e <_svfiprintf_r+0x52>
 8004168:	fb0c 3202 	mla	r2, ip, r2, r3
 800416c:	460c      	mov	r4, r1
 800416e:	2001      	movs	r0, #1
 8004170:	e7a8      	b.n	80040c4 <_svfiprintf_r+0xd8>
 8004172:	2300      	movs	r3, #0
 8004174:	3401      	adds	r4, #1
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	4619      	mov	r1, r3
 800417a:	f04f 0c0a 	mov.w	ip, #10
 800417e:	4620      	mov	r0, r4
 8004180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004184:	3a30      	subs	r2, #48	@ 0x30
 8004186:	2a09      	cmp	r2, #9
 8004188:	d903      	bls.n	8004192 <_svfiprintf_r+0x1a6>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0c6      	beq.n	800411c <_svfiprintf_r+0x130>
 800418e:	9105      	str	r1, [sp, #20]
 8004190:	e7c4      	b.n	800411c <_svfiprintf_r+0x130>
 8004192:	fb0c 2101 	mla	r1, ip, r1, r2
 8004196:	4604      	mov	r4, r0
 8004198:	2301      	movs	r3, #1
 800419a:	e7f0      	b.n	800417e <_svfiprintf_r+0x192>
 800419c:	ab03      	add	r3, sp, #12
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	462a      	mov	r2, r5
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <_svfiprintf_r+0x1f0>)
 80041a4:	a904      	add	r1, sp, #16
 80041a6:	4638      	mov	r0, r7
 80041a8:	f3af 8000 	nop.w
 80041ac:	1c42      	adds	r2, r0, #1
 80041ae:	4606      	mov	r6, r0
 80041b0:	d1d6      	bne.n	8004160 <_svfiprintf_r+0x174>
 80041b2:	89ab      	ldrh	r3, [r5, #12]
 80041b4:	065b      	lsls	r3, r3, #25
 80041b6:	f53f af2d 	bmi.w	8004014 <_svfiprintf_r+0x28>
 80041ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041bc:	e72c      	b.n	8004018 <_svfiprintf_r+0x2c>
 80041be:	ab03      	add	r3, sp, #12
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	462a      	mov	r2, r5
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <_svfiprintf_r+0x1f0>)
 80041c6:	a904      	add	r1, sp, #16
 80041c8:	4638      	mov	r0, r7
 80041ca:	f000 f879 	bl	80042c0 <_printf_i>
 80041ce:	e7ed      	b.n	80041ac <_svfiprintf_r+0x1c0>
 80041d0:	08004798 	.word	0x08004798
 80041d4:	080047a2 	.word	0x080047a2
 80041d8:	00000000 	.word	0x00000000
 80041dc:	08003f35 	.word	0x08003f35
 80041e0:	0800479e 	.word	0x0800479e

080041e4 <_printf_common>:
 80041e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	4616      	mov	r6, r2
 80041ea:	4698      	mov	r8, r3
 80041ec:	688a      	ldr	r2, [r1, #8]
 80041ee:	690b      	ldr	r3, [r1, #16]
 80041f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bfb8      	it	lt
 80041f8:	4613      	movlt	r3, r2
 80041fa:	6033      	str	r3, [r6, #0]
 80041fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004200:	4607      	mov	r7, r0
 8004202:	460c      	mov	r4, r1
 8004204:	b10a      	cbz	r2, 800420a <_printf_common+0x26>
 8004206:	3301      	adds	r3, #1
 8004208:	6033      	str	r3, [r6, #0]
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	0699      	lsls	r1, r3, #26
 800420e:	bf42      	ittt	mi
 8004210:	6833      	ldrmi	r3, [r6, #0]
 8004212:	3302      	addmi	r3, #2
 8004214:	6033      	strmi	r3, [r6, #0]
 8004216:	6825      	ldr	r5, [r4, #0]
 8004218:	f015 0506 	ands.w	r5, r5, #6
 800421c:	d106      	bne.n	800422c <_printf_common+0x48>
 800421e:	f104 0a19 	add.w	sl, r4, #25
 8004222:	68e3      	ldr	r3, [r4, #12]
 8004224:	6832      	ldr	r2, [r6, #0]
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	42ab      	cmp	r3, r5
 800422a:	dc26      	bgt.n	800427a <_printf_common+0x96>
 800422c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004230:	6822      	ldr	r2, [r4, #0]
 8004232:	3b00      	subs	r3, #0
 8004234:	bf18      	it	ne
 8004236:	2301      	movne	r3, #1
 8004238:	0692      	lsls	r2, r2, #26
 800423a:	d42b      	bmi.n	8004294 <_printf_common+0xb0>
 800423c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004240:	4641      	mov	r1, r8
 8004242:	4638      	mov	r0, r7
 8004244:	47c8      	blx	r9
 8004246:	3001      	adds	r0, #1
 8004248:	d01e      	beq.n	8004288 <_printf_common+0xa4>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	6922      	ldr	r2, [r4, #16]
 800424e:	f003 0306 	and.w	r3, r3, #6
 8004252:	2b04      	cmp	r3, #4
 8004254:	bf02      	ittt	eq
 8004256:	68e5      	ldreq	r5, [r4, #12]
 8004258:	6833      	ldreq	r3, [r6, #0]
 800425a:	1aed      	subeq	r5, r5, r3
 800425c:	68a3      	ldr	r3, [r4, #8]
 800425e:	bf0c      	ite	eq
 8004260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004264:	2500      	movne	r5, #0
 8004266:	4293      	cmp	r3, r2
 8004268:	bfc4      	itt	gt
 800426a:	1a9b      	subgt	r3, r3, r2
 800426c:	18ed      	addgt	r5, r5, r3
 800426e:	2600      	movs	r6, #0
 8004270:	341a      	adds	r4, #26
 8004272:	42b5      	cmp	r5, r6
 8004274:	d11a      	bne.n	80042ac <_printf_common+0xc8>
 8004276:	2000      	movs	r0, #0
 8004278:	e008      	b.n	800428c <_printf_common+0xa8>
 800427a:	2301      	movs	r3, #1
 800427c:	4652      	mov	r2, sl
 800427e:	4641      	mov	r1, r8
 8004280:	4638      	mov	r0, r7
 8004282:	47c8      	blx	r9
 8004284:	3001      	adds	r0, #1
 8004286:	d103      	bne.n	8004290 <_printf_common+0xac>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004290:	3501      	adds	r5, #1
 8004292:	e7c6      	b.n	8004222 <_printf_common+0x3e>
 8004294:	18e1      	adds	r1, r4, r3
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	2030      	movs	r0, #48	@ 0x30
 800429a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800429e:	4422      	add	r2, r4
 80042a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042a8:	3302      	adds	r3, #2
 80042aa:	e7c7      	b.n	800423c <_printf_common+0x58>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4622      	mov	r2, r4
 80042b0:	4641      	mov	r1, r8
 80042b2:	4638      	mov	r0, r7
 80042b4:	47c8      	blx	r9
 80042b6:	3001      	adds	r0, #1
 80042b8:	d0e6      	beq.n	8004288 <_printf_common+0xa4>
 80042ba:	3601      	adds	r6, #1
 80042bc:	e7d9      	b.n	8004272 <_printf_common+0x8e>
	...

080042c0 <_printf_i>:
 80042c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	7e0f      	ldrb	r7, [r1, #24]
 80042c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042c8:	2f78      	cmp	r7, #120	@ 0x78
 80042ca:	4691      	mov	r9, r2
 80042cc:	4680      	mov	r8, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	469a      	mov	sl, r3
 80042d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042d6:	d807      	bhi.n	80042e8 <_printf_i+0x28>
 80042d8:	2f62      	cmp	r7, #98	@ 0x62
 80042da:	d80a      	bhi.n	80042f2 <_printf_i+0x32>
 80042dc:	2f00      	cmp	r7, #0
 80042de:	f000 80d2 	beq.w	8004486 <_printf_i+0x1c6>
 80042e2:	2f58      	cmp	r7, #88	@ 0x58
 80042e4:	f000 80b9 	beq.w	800445a <_printf_i+0x19a>
 80042e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042f0:	e03a      	b.n	8004368 <_printf_i+0xa8>
 80042f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042f6:	2b15      	cmp	r3, #21
 80042f8:	d8f6      	bhi.n	80042e8 <_printf_i+0x28>
 80042fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004300 <_printf_i+0x40>)
 80042fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004300:	08004359 	.word	0x08004359
 8004304:	0800436d 	.word	0x0800436d
 8004308:	080042e9 	.word	0x080042e9
 800430c:	080042e9 	.word	0x080042e9
 8004310:	080042e9 	.word	0x080042e9
 8004314:	080042e9 	.word	0x080042e9
 8004318:	0800436d 	.word	0x0800436d
 800431c:	080042e9 	.word	0x080042e9
 8004320:	080042e9 	.word	0x080042e9
 8004324:	080042e9 	.word	0x080042e9
 8004328:	080042e9 	.word	0x080042e9
 800432c:	0800446d 	.word	0x0800446d
 8004330:	08004397 	.word	0x08004397
 8004334:	08004427 	.word	0x08004427
 8004338:	080042e9 	.word	0x080042e9
 800433c:	080042e9 	.word	0x080042e9
 8004340:	0800448f 	.word	0x0800448f
 8004344:	080042e9 	.word	0x080042e9
 8004348:	08004397 	.word	0x08004397
 800434c:	080042e9 	.word	0x080042e9
 8004350:	080042e9 	.word	0x080042e9
 8004354:	0800442f 	.word	0x0800442f
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	1d1a      	adds	r2, r3, #4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6032      	str	r2, [r6, #0]
 8004360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004368:	2301      	movs	r3, #1
 800436a:	e09d      	b.n	80044a8 <_printf_i+0x1e8>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	6031      	str	r1, [r6, #0]
 8004374:	0606      	lsls	r6, r0, #24
 8004376:	d501      	bpl.n	800437c <_printf_i+0xbc>
 8004378:	681d      	ldr	r5, [r3, #0]
 800437a:	e003      	b.n	8004384 <_printf_i+0xc4>
 800437c:	0645      	lsls	r5, r0, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0xb8>
 8004380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004384:	2d00      	cmp	r5, #0
 8004386:	da03      	bge.n	8004390 <_printf_i+0xd0>
 8004388:	232d      	movs	r3, #45	@ 0x2d
 800438a:	426d      	negs	r5, r5
 800438c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004390:	4859      	ldr	r0, [pc, #356]	@ (80044f8 <_printf_i+0x238>)
 8004392:	230a      	movs	r3, #10
 8004394:	e011      	b.n	80043ba <_printf_i+0xfa>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	6833      	ldr	r3, [r6, #0]
 800439a:	0608      	lsls	r0, r1, #24
 800439c:	f853 5b04 	ldr.w	r5, [r3], #4
 80043a0:	d402      	bmi.n	80043a8 <_printf_i+0xe8>
 80043a2:	0649      	lsls	r1, r1, #25
 80043a4:	bf48      	it	mi
 80043a6:	b2ad      	uxthmi	r5, r5
 80043a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043aa:	4853      	ldr	r0, [pc, #332]	@ (80044f8 <_printf_i+0x238>)
 80043ac:	6033      	str	r3, [r6, #0]
 80043ae:	bf14      	ite	ne
 80043b0:	230a      	movne	r3, #10
 80043b2:	2308      	moveq	r3, #8
 80043b4:	2100      	movs	r1, #0
 80043b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ba:	6866      	ldr	r6, [r4, #4]
 80043bc:	60a6      	str	r6, [r4, #8]
 80043be:	2e00      	cmp	r6, #0
 80043c0:	bfa2      	ittt	ge
 80043c2:	6821      	ldrge	r1, [r4, #0]
 80043c4:	f021 0104 	bicge.w	r1, r1, #4
 80043c8:	6021      	strge	r1, [r4, #0]
 80043ca:	b90d      	cbnz	r5, 80043d0 <_printf_i+0x110>
 80043cc:	2e00      	cmp	r6, #0
 80043ce:	d04b      	beq.n	8004468 <_printf_i+0x1a8>
 80043d0:	4616      	mov	r6, r2
 80043d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80043d6:	fb03 5711 	mls	r7, r3, r1, r5
 80043da:	5dc7      	ldrb	r7, [r0, r7]
 80043dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043e0:	462f      	mov	r7, r5
 80043e2:	42bb      	cmp	r3, r7
 80043e4:	460d      	mov	r5, r1
 80043e6:	d9f4      	bls.n	80043d2 <_printf_i+0x112>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d10b      	bne.n	8004404 <_printf_i+0x144>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07df      	lsls	r7, r3, #31
 80043f0:	d508      	bpl.n	8004404 <_printf_i+0x144>
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	6861      	ldr	r1, [r4, #4]
 80043f6:	4299      	cmp	r1, r3
 80043f8:	bfde      	ittt	le
 80043fa:	2330      	movle	r3, #48	@ 0x30
 80043fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004400:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004404:	1b92      	subs	r2, r2, r6
 8004406:	6122      	str	r2, [r4, #16]
 8004408:	f8cd a000 	str.w	sl, [sp]
 800440c:	464b      	mov	r3, r9
 800440e:	aa03      	add	r2, sp, #12
 8004410:	4621      	mov	r1, r4
 8004412:	4640      	mov	r0, r8
 8004414:	f7ff fee6 	bl	80041e4 <_printf_common>
 8004418:	3001      	adds	r0, #1
 800441a:	d14a      	bne.n	80044b2 <_printf_i+0x1f2>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	b004      	add	sp, #16
 8004422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	4833      	ldr	r0, [pc, #204]	@ (80044fc <_printf_i+0x23c>)
 8004430:	2778      	movs	r7, #120	@ 0x78
 8004432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	6831      	ldr	r1, [r6, #0]
 800443a:	061f      	lsls	r7, r3, #24
 800443c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004440:	d402      	bmi.n	8004448 <_printf_i+0x188>
 8004442:	065f      	lsls	r7, r3, #25
 8004444:	bf48      	it	mi
 8004446:	b2ad      	uxthmi	r5, r5
 8004448:	6031      	str	r1, [r6, #0]
 800444a:	07d9      	lsls	r1, r3, #31
 800444c:	bf44      	itt	mi
 800444e:	f043 0320 	orrmi.w	r3, r3, #32
 8004452:	6023      	strmi	r3, [r4, #0]
 8004454:	b11d      	cbz	r5, 800445e <_printf_i+0x19e>
 8004456:	2310      	movs	r3, #16
 8004458:	e7ac      	b.n	80043b4 <_printf_i+0xf4>
 800445a:	4827      	ldr	r0, [pc, #156]	@ (80044f8 <_printf_i+0x238>)
 800445c:	e7e9      	b.n	8004432 <_printf_i+0x172>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	f023 0320 	bic.w	r3, r3, #32
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	e7f6      	b.n	8004456 <_printf_i+0x196>
 8004468:	4616      	mov	r6, r2
 800446a:	e7bd      	b.n	80043e8 <_printf_i+0x128>
 800446c:	6833      	ldr	r3, [r6, #0]
 800446e:	6825      	ldr	r5, [r4, #0]
 8004470:	6961      	ldr	r1, [r4, #20]
 8004472:	1d18      	adds	r0, r3, #4
 8004474:	6030      	str	r0, [r6, #0]
 8004476:	062e      	lsls	r6, r5, #24
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	d501      	bpl.n	8004480 <_printf_i+0x1c0>
 800447c:	6019      	str	r1, [r3, #0]
 800447e:	e002      	b.n	8004486 <_printf_i+0x1c6>
 8004480:	0668      	lsls	r0, r5, #25
 8004482:	d5fb      	bpl.n	800447c <_printf_i+0x1bc>
 8004484:	8019      	strh	r1, [r3, #0]
 8004486:	2300      	movs	r3, #0
 8004488:	6123      	str	r3, [r4, #16]
 800448a:	4616      	mov	r6, r2
 800448c:	e7bc      	b.n	8004408 <_printf_i+0x148>
 800448e:	6833      	ldr	r3, [r6, #0]
 8004490:	1d1a      	adds	r2, r3, #4
 8004492:	6032      	str	r2, [r6, #0]
 8004494:	681e      	ldr	r6, [r3, #0]
 8004496:	6862      	ldr	r2, [r4, #4]
 8004498:	2100      	movs	r1, #0
 800449a:	4630      	mov	r0, r6
 800449c:	f7fb fec0 	bl	8000220 <memchr>
 80044a0:	b108      	cbz	r0, 80044a6 <_printf_i+0x1e6>
 80044a2:	1b80      	subs	r0, r0, r6
 80044a4:	6060      	str	r0, [r4, #4]
 80044a6:	6863      	ldr	r3, [r4, #4]
 80044a8:	6123      	str	r3, [r4, #16]
 80044aa:	2300      	movs	r3, #0
 80044ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b0:	e7aa      	b.n	8004408 <_printf_i+0x148>
 80044b2:	6923      	ldr	r3, [r4, #16]
 80044b4:	4632      	mov	r2, r6
 80044b6:	4649      	mov	r1, r9
 80044b8:	4640      	mov	r0, r8
 80044ba:	47d0      	blx	sl
 80044bc:	3001      	adds	r0, #1
 80044be:	d0ad      	beq.n	800441c <_printf_i+0x15c>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	079b      	lsls	r3, r3, #30
 80044c4:	d413      	bmi.n	80044ee <_printf_i+0x22e>
 80044c6:	68e0      	ldr	r0, [r4, #12]
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	4298      	cmp	r0, r3
 80044cc:	bfb8      	it	lt
 80044ce:	4618      	movlt	r0, r3
 80044d0:	e7a6      	b.n	8004420 <_printf_i+0x160>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4632      	mov	r2, r6
 80044d6:	4649      	mov	r1, r9
 80044d8:	4640      	mov	r0, r8
 80044da:	47d0      	blx	sl
 80044dc:	3001      	adds	r0, #1
 80044de:	d09d      	beq.n	800441c <_printf_i+0x15c>
 80044e0:	3501      	adds	r5, #1
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	9903      	ldr	r1, [sp, #12]
 80044e6:	1a5b      	subs	r3, r3, r1
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dcf2      	bgt.n	80044d2 <_printf_i+0x212>
 80044ec:	e7eb      	b.n	80044c6 <_printf_i+0x206>
 80044ee:	2500      	movs	r5, #0
 80044f0:	f104 0619 	add.w	r6, r4, #25
 80044f4:	e7f5      	b.n	80044e2 <_printf_i+0x222>
 80044f6:	bf00      	nop
 80044f8:	080047a9 	.word	0x080047a9
 80044fc:	080047ba 	.word	0x080047ba

08004500 <memmove>:
 8004500:	4288      	cmp	r0, r1
 8004502:	b510      	push	{r4, lr}
 8004504:	eb01 0402 	add.w	r4, r1, r2
 8004508:	d902      	bls.n	8004510 <memmove+0x10>
 800450a:	4284      	cmp	r4, r0
 800450c:	4623      	mov	r3, r4
 800450e:	d807      	bhi.n	8004520 <memmove+0x20>
 8004510:	1e43      	subs	r3, r0, #1
 8004512:	42a1      	cmp	r1, r4
 8004514:	d008      	beq.n	8004528 <memmove+0x28>
 8004516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800451a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800451e:	e7f8      	b.n	8004512 <memmove+0x12>
 8004520:	4402      	add	r2, r0
 8004522:	4601      	mov	r1, r0
 8004524:	428a      	cmp	r2, r1
 8004526:	d100      	bne.n	800452a <memmove+0x2a>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800452e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004532:	e7f7      	b.n	8004524 <memmove+0x24>

08004534 <_sbrk_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d06      	ldr	r5, [pc, #24]	@ (8004550 <_sbrk_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fd16 	bl	8000f70 <_sbrk>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_sbrk_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_sbrk_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	2000028c 	.word	0x2000028c

08004554 <memcpy>:
 8004554:	440a      	add	r2, r1
 8004556:	4291      	cmp	r1, r2
 8004558:	f100 33ff 	add.w	r3, r0, #4294967295
 800455c:	d100      	bne.n	8004560 <memcpy+0xc>
 800455e:	4770      	bx	lr
 8004560:	b510      	push	{r4, lr}
 8004562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456a:	4291      	cmp	r1, r2
 800456c:	d1f9      	bne.n	8004562 <memcpy+0xe>
 800456e:	bd10      	pop	{r4, pc}

08004570 <_realloc_r>:
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004574:	4680      	mov	r8, r0
 8004576:	4615      	mov	r5, r2
 8004578:	460c      	mov	r4, r1
 800457a:	b921      	cbnz	r1, 8004586 <_realloc_r+0x16>
 800457c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004580:	4611      	mov	r1, r2
 8004582:	f7ff bc4b 	b.w	8003e1c <_malloc_r>
 8004586:	b92a      	cbnz	r2, 8004594 <_realloc_r+0x24>
 8004588:	f7ff fbdc 	bl	8003d44 <_free_r>
 800458c:	2400      	movs	r4, #0
 800458e:	4620      	mov	r0, r4
 8004590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004594:	f000 f81a 	bl	80045cc <_malloc_usable_size_r>
 8004598:	4285      	cmp	r5, r0
 800459a:	4606      	mov	r6, r0
 800459c:	d802      	bhi.n	80045a4 <_realloc_r+0x34>
 800459e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045a2:	d8f4      	bhi.n	800458e <_realloc_r+0x1e>
 80045a4:	4629      	mov	r1, r5
 80045a6:	4640      	mov	r0, r8
 80045a8:	f7ff fc38 	bl	8003e1c <_malloc_r>
 80045ac:	4607      	mov	r7, r0
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d0ec      	beq.n	800458c <_realloc_r+0x1c>
 80045b2:	42b5      	cmp	r5, r6
 80045b4:	462a      	mov	r2, r5
 80045b6:	4621      	mov	r1, r4
 80045b8:	bf28      	it	cs
 80045ba:	4632      	movcs	r2, r6
 80045bc:	f7ff ffca 	bl	8004554 <memcpy>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fbbe 	bl	8003d44 <_free_r>
 80045c8:	463c      	mov	r4, r7
 80045ca:	e7e0      	b.n	800458e <_realloc_r+0x1e>

080045cc <_malloc_usable_size_r>:
 80045cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d0:	1f18      	subs	r0, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfbc      	itt	lt
 80045d6:	580b      	ldrlt	r3, [r1, r0]
 80045d8:	18c0      	addlt	r0, r0, r3
 80045da:	4770      	bx	lr

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
