
LED_Controller_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800494c  0800494c  0000594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004954  08004954  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00005954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800495c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  080049b8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080049b8  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee66  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f39  00000000  00000000  00014ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00016e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a74  00000000  00000000  00017b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224f7  00000000  00000000  000185fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9cb  00000000  00000000  0003aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3093  00000000  00000000  0004a4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  0011d594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00121358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004730 	.word	0x08004730

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004730 	.word	0x08004730

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SysTick_Handler>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SysTick_Handler (void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005f0:	f000 fe08 	bl	8001204 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005f4:	f001 fdbc 	bl	8002170 <HAL_SYSTICK_IRQHandler>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000600:	4802      	ldr	r0, [pc, #8]	@ (800060c <CAN1_TX_IRQHandler+0x10>)
 8000602:	f001 fa76 	bl	8001af2 <HAL_CAN_IRQHandler>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000bc 	.word	0x200000bc

08000610 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <CAN1_RX0_IRQHandler+0x10>)
 8000616:	f001 fa6c 	bl	8001af2 <HAL_CAN_IRQHandler>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200000bc 	.word	0x200000bc

08000624 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000628:	4802      	ldr	r0, [pc, #8]	@ (8000634 <CAN1_SCE_IRQHandler+0x10>)
 800062a:	f001 fa62 	bl	8001af2 <HAL_CAN_IRQHandler>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000bc 	.word	0x200000bc

08000638 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 800063c:	4802      	ldr	r0, [pc, #8]	@ (8000648 <TIM6_DAC_IRQHandler+0x10>)
 800063e:	f002 fe39 	bl	80032b4 <HAL_TIM_IRQHandler>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000e4 	.word	0x200000e4

0800064c <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  * Waits for button to be pressed then sends the CAN bus message
  */
void EXTI15_10_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htimer6);
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <EXTI15_10_IRQHandler+0x18>)
 8000652:	f002 fdbf 	bl	80031d4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000656:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800065a:	f001 ff5f 	bl	800251c <HAL_GPIO_EXTI_IRQHandler>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e4 	.word	0x200000e4

08000668 <main>:
uint8_t led_no = 0;
uint8_t fsm_state = 0;
CAN_RxHeaderTypeDef RxHeader;

int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  HAL_Init();
 800066c:	f000 fd78 	bl	8001160 <HAL_Init>
  SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000670:	2032      	movs	r0, #50	@ 0x32
 8000672:	f000 f82d 	bl	80006d0 <SystemClock_Config_HSE>
  GPIO_Init();
 8000676:	f000 f915 	bl	80008a4 <GPIO_Init>
  UART2_Init();
 800067a:	f000 f9a1 	bl	80009c0 <UART2_Init>
  TIMER6_Init();
 800067e:	f000 f981 	bl	8000984 <TIMER6_Init>
  CAN1_Init();
 8000682:	f000 f9c3 	bl	8000a0c <CAN1_Init>
  CAN_Filter_Config();
 8000686:	f000 f8e7 	bl	8000858 <CAN_Filter_Config>

  CAN1_Tx();
 800068a:	f000 f8bb 	bl	8000804 <CAN1_Tx>

  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 800068e:	f240 4103 	movw	r1, #1027	@ 0x403
 8000692:	480d      	ldr	r0, [pc, #52]	@ (80006c8 <main+0x60>)
 8000694:	f001 fa07 	bl	8001aa6 <HAL_CAN_ActivateNotification>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <main+0x3a>
  {
    Error_handler();
 800069e:	f000 fc13 	bl	8000ec8 <Error_handler>
  }

  if( HAL_CAN_Start(&hcan1) != HAL_OK)
 80006a2:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <main+0x60>)
 80006a4:	f000 ffce 	bl	8001644 <HAL_CAN_Start>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <main+0x4a>
  {
    Error_handler();
 80006ae:	f000 fc0b 	bl	8000ec8 <Error_handler>
  }
  // Start the TIMER interrupt
  HAL_TIM_Base_Start_IT(&htimer6);
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <main+0x64>)
 80006b4:	f002 fd8e 	bl	80031d4 <HAL_TIM_Base_Start_IT>

  HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006bc:	f000 fdc2 	bl	8001244 <HAL_Delay>
  CAN_Tx_Test_All_Speeds();
 80006c0:	f000 fba8 	bl	8000e14 <CAN_Tx_Test_All_Speeds>

  while(1);
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <main+0x5c>
 80006c8:	200000bc 	.word	0x200000bc
 80006cc:	200000e4 	.word	0x200000e4

080006d0 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	@ 0x58
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b78      	cmp	r3, #120	@ 0x78
 80006f8:	d038      	beq.n	800076c <SystemClock_Config_HSE+0x9c>
 80006fa:	2b78      	cmp	r3, #120	@ 0x78
 80006fc:	dc7c      	bgt.n	80007f8 <SystemClock_Config_HSE+0x128>
 80006fe:	2b32      	cmp	r3, #50	@ 0x32
 8000700:	d002      	beq.n	8000708 <SystemClock_Config_HSE+0x38>
 8000702:	2b54      	cmp	r3, #84	@ 0x54
 8000704:	d019      	beq.n	800073a <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 8000706:	e077      	b.n	80007f8 <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	@ 0x32
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000738:	e032      	b.n	80007a0 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 800073e:	2354      	movs	r3, #84	@ 0x54
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800076a:	e019      	b.n	80007a0 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000770:	2378      	movs	r3, #120	@ 0x78
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000780:	230f      	movs	r3, #15
 8000782:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000790:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000798:	2303      	movs	r3, #3
 800079a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 800079e:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fa27 	bl	8002bf8 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config_HSE+0xe4>
  {
    Error_handler();
 80007b0:	f000 fb8a 	bl	8000ec8 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80007b4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fed0 	bl	8002564 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config_HSE+0xfe>
  {
    Error_handler();
 80007ca:	f000 fb7d 	bl	8000ec8 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80007ce:	f001 ffaf 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 80007d2:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 80007d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <SystemClock_Config_HSE+0x130>)
 80007d8:	fba2 2303 	umull	r2, r3, r2, r3
 80007dc:	099b      	lsrs	r3, r3, #6
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 fc9d 	bl	800211e <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f001 fca7 	bl	8002138 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	f04f 30ff 	mov.w	r0, #4294967295
 80007f2:	f001 fc6a 	bl	80020ca <HAL_NVIC_SetPriority>
 80007f6:	e000      	b.n	80007fa <SystemClock_Config_HSE+0x12a>
    return ;
 80007f8:	bf00      	nop
}
 80007fa:	3758      	adds	r7, #88	@ 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	10624dd3 	.word	0x10624dd3

08000804 <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x499;
 800080e:	f240 4399 	movw	r3, #1177	@ 0x499
 8000812:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  message = fsm_state;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <CAN1_Tx+0x48>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000822:	2120      	movs	r1, #32
 8000824:	480a      	ldr	r0, [pc, #40]	@ (8000850 <CAN1_Tx+0x4c>)
 8000826:	f001 fe5e 	bl	80024e6 <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	1cfa      	adds	r2, r7, #3
 800082e:	f107 0108 	add.w	r1, r7, #8
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <CAN1_Tx+0x50>)
 8000834:	f000 ff4a 	bl	80016cc <HAL_CAN_AddTxMessage>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <CAN1_Tx+0x3e>
  {
    Error_handler();
 800083e:	f000 fb43 	bl	8000ec8 <Error_handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000012c 	.word	0x2000012c
 8000850:	40020000 	.word	0x40020000
 8000854:	200000bc 	.word	0x200000bc

08000858 <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	@ 0x28
 800085c:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  // xxx xxxx xxxx
  // 100 xxxx xxxx
  // Accept only 4XX
  // id 1000 = 0x8
  // mask 1110 = 0xE
  can1_filter_init.FilterIdHigh = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0X0000;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800087e:	2301      	movs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <CAN_Filter_Config+0x48>)
 8000888:	f000 fdfc 	bl	8001484 <HAL_CAN_ConfigFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <CAN_Filter_Config+0x3e>
  {
    Error_handler();
 8000892:	f000 fb19 	bl	8000ec8 <Error_handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000bc 	.word	0x200000bc

080008a4 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  // enabling the clocks for the GPIO ports
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a30      	ldr	r2, [pc, #192]	@ (8000974 <GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <GPIO_Init+0xd0>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a22      	ldr	r2, [pc, #136]	@ (8000974 <GPIO_Init+0xd0>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  // configure GPIOs
  GPIO_InitTypeDef ledgpio;
  ledgpio.Pin = GPIO_PIN_5;
 80008fe:	2320      	movs	r3, #32
 8000900:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&ledgpio);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4819      	ldr	r0, [pc, #100]	@ (8000978 <GPIO_Init+0xd4>)
 8000912:	f001 fc3b 	bl	800218c <HAL_GPIO_Init>

  // pin 6, 8, 9 from port C
  ledgpio.Pin = GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_6;
 8000916:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800091a:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <GPIO_Init+0xd8>)
 800092c:	f001 fc2e 	bl	800218c <HAL_GPIO_Init>

  // pin 8 from port B
  ledgpio.Pin = GPIO_PIN_8;
 8000930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000934:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB,&ledgpio);
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4619      	mov	r1, r3
 8000944:	480e      	ldr	r0, [pc, #56]	@ (8000980 <GPIO_Init+0xdc>)
 8000946:	f001 fc21 	bl	800218c <HAL_GPIO_Init>

  // pin 13 set to interrup falling edge
  // button pin > gives interrupt
  ledgpio.Pin = GPIO_PIN_13;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	60fb      	str	r3, [r7, #12]
  ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000950:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000954:	613b      	str	r3, [r7, #16]
  ledgpio.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC,&ledgpio);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <GPIO_Init+0xd8>)
 8000962:	f001 fc13 	bl	800218c <HAL_GPIO_Init>

  // enables the IRQ on pins 10-15
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000966:	2028      	movs	r0, #40	@ 0x28
 8000968:	f001 fbcb 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020400 	.word	0x40020400

08000984 <TIMER6_Init>:
  * Generates an interrupt every 1 second
  * @param None
  * @retval None
  */
void TIMER6_Init(void)
{ // APB clock1 84 MHz
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  // CNT_CLK = TIMx_CLK / (prescaler+1)
  htimer6.Instance = TIM6;
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <TIMER6_Init+0x34>)
 800098a:	4a0c      	ldr	r2, [pc, #48]	@ (80009bc <TIMER6_Init+0x38>)
 800098c:	601a      	str	r2, [r3, #0]
  //  Every one second:
  //  htimer6.Init.Prescaler = 4999;
  //  htimer6.Init.Period = 10000-1;

  // Every 5 seconds:
  htimer6.Init.CounterMode = TIM_COUNTERMODE_UP; // ← Required!
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <TIMER6_Init+0x34>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htimer6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <TIMER6_Init+0x34>)
 8000996:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800099a:	605a      	str	r2, [r3, #4]
  htimer6.Init.Period = 4999;      // 1kHz → 5s interrupt
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <TIMER6_Init+0x34>)
 800099e:	f241 3287 	movw	r2, #4999	@ 0x1387
 80009a2:	60da      	str	r2, [r3, #12]
  if( HAL_TIM_Base_Init(&htimer6) != HAL_OK )
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <TIMER6_Init+0x34>)
 80009a6:	f002 fbc5 	bl	8003134 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <TIMER6_Init+0x30>
  {
    Error_handler();
 80009b0:	f000 fa8a 	bl	8000ec8 <Error_handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000e4 	.word	0x200000e4
 80009bc:	40001000 	.word	0x40001000

080009c0 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <UART2_Init+0x44>)
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <UART2_Init+0x48>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <UART2_Init+0x44>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <UART2_Init+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <UART2_Init+0x44>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <UART2_Init+0x44>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <UART2_Init+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <UART2_Init+0x44>)
 80009ec:	220c      	movs	r2, #12
 80009ee:	615a      	str	r2, [r3, #20]
  if ( HAL_UART_Init(&huart2) != HAL_OK )
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <UART2_Init+0x44>)
 80009f2:	f002 fe43 	bl	800367c <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 80009fc:	f000 fa64 	bl	8000ec8 <Error_handler>
  }
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000078 	.word	0x20000078
 8000a08:	40004400 	.word	0x40004400

08000a0c <CAN1_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
void CAN1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  hcan1.Instance = CAN1;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <CAN1_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <CAN1_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <CAN1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hcan1.Init.AutoBusOff = ENABLE;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <CAN1_Init+0x64>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <CAN1_Init+0x64>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <CAN1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <CAN1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <CAN1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <CAN1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	775a      	strb	r2, [r3, #29]
  //  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;

  //  Settings related to CAN bit timings
  //  Setting resulting bit rate to 250k as per DALY BMS reqs
  //  The prescalar, time values were derived from http://www.bittiming.can-wiki.info/
  hcan1.Init.Prescaler = 10;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <CAN1_Init+0x64>)
 8000a42:	220a      	movs	r2, #10
 8000a44:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <CAN1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <CAN1_Init+0x64>)
 8000a4e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000a52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <CAN1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]

  if ( HAL_CAN_Init (&hcan1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <CAN1_Init+0x64>)
 8000a5c:	f000 fc16 	bl	800128c <HAL_CAN_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <CAN1_Init+0x5e>
  {
    Error_handler();
 8000a66:	f000 fa2f 	bl	8000ec8 <Error_handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000bc 	.word	0x200000bc
 8000a74:	40006400 	.word	0x40006400

08000a78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b090      	sub	sp, #64	@ 0x40
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	490a      	ldr	r1, [pc, #40]	@ (8000ab0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 f9ba 	bl	8003e00 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fbbd 	bl	8000210 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000aa4:	f002 fe37 	bl	8003716 <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3740      	adds	r7, #64	@ 0x40
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08004748 	.word	0x08004748
 8000ab4:	20000078 	.word	0x20000078

08000ab8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	@ 0x40
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	490a      	ldr	r1, [pc, #40]	@ (8000af0 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 f99a 	bl	8003e00 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fb9d 	bl	8000210 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000ae4:	f002 fe17 	bl	8003716 <HAL_UART_Transmit>
}
 8000ae8:	bf00      	nop
 8000aea:	3740      	adds	r7, #64	@ 0x40
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	08004764 	.word	0x08004764
 8000af4:	20000078 	.word	0x20000078

08000af8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	@ 0x40
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	490a      	ldr	r1, [pc, #40]	@ (8000b30 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f97a 	bl	8003e00 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb7d 	bl	8000210 <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f107 010c 	add.w	r1, r7, #12
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000b24:	f002 fdf7 	bl	8003716 <HAL_UART_Transmit>
}
 8000b28:	bf00      	nop
 8000b2a:	3740      	adds	r7, #64	@ 0x40
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	08004780 	.word	0x08004780
 8000b34:	20000078 	.word	0x20000078

08000b38 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b092      	sub	sp, #72	@ 0x48
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000b40:	2120      	movs	r1, #32
 8000b42:	4867      	ldr	r0, [pc, #412]	@ (8000ce0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000b44:	f001 fccf 	bl	80024e6 <HAL_GPIO_TogglePin>

  uint8_t rcvd_msg[8]; // 8 is max cap for std CAN

  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000b48:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b4c:	4a65      	ldr	r2, [pc, #404]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000b4e:	2100      	movs	r1, #0
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 fe96 	bl	8001882 <HAL_CAN_GetRxMessage>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
  {
    Error_handler();
 8000b5c:	f000 f9b4 	bl	8000ec8 <Error_handler>
  }

  // We can find what state the FSM is now from the msg
  if(RxHeader.StdId == 0x401 && RxHeader.RTR == 0 )
 8000b60:	4b60      	ldr	r3, [pc, #384]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f240 4201 	movw	r2, #1025	@ 0x401
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d112      	bne.n	8000b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10e      	bne.n	8000b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
  { // FAULT state

    fsm_state = 0;
 8000b74:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000b7a:	f000 f8d1 	bl	8000d20 <LED_Manage_Output>
    sprintf(msg,"0x401 FAULT SATE INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000b7e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b82:	461a      	mov	r2, r3
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4958      	ldr	r1, [pc, #352]	@ (8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 f938 	bl	8003e00 <siprintf>
 8000b90:	e094      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
  }

  else if ( RxHeader.StdId == 0x402 && RxHeader.RTR == 0)
 8000b92:	4b54      	ldr	r3, [pc, #336]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f240 4202 	movw	r2, #1026	@ 0x402
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d112      	bne.n	8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000b9e:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10e      	bne.n	8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
  { // SAFE TO APPROACH state

    fsm_state = 1;
 8000ba6:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000bac:	f000 f8b8 	bl	8000d20 <LED_Manage_Output>

    sprintf(msg,"0x402 SAFE TO APPROACH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000bb0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	494d      	ldr	r1, [pc, #308]	@ (8000cf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 f91f 	bl	8003e00 <siprintf>
 8000bc2:	e07b      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
  }

  else if ( RxHeader.StdId == 0x403 && RxHeader.RTR == 0)
 8000bc4:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f240 4203 	movw	r2, #1027	@ 0x403
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d112      	bne.n	8000bf6 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 8000bd0:	4b44      	ldr	r3, [pc, #272]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10e      	bne.n	8000bf6 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
    { // RDY TO LAUNCH state

    fsm_state = 2;
 8000bd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000bde:	f000 f89f 	bl	8000d20 <LED_Manage_Output>
    sprintf(msg,"0x403 RDY TO LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000be2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000be6:	461a      	mov	r2, r3
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4941      	ldr	r1, [pc, #260]	@ (8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 f906 	bl	8003e00 <siprintf>
 8000bf4:	e062      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }

  else if ( RxHeader.StdId == 0x404 && RxHeader.RTR == 0)
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f240 4204 	movw	r2, #1028	@ 0x404
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d112      	bne.n	8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8000c02:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10e      	bne.n	8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
    { // Launching - Omitted for KDAYS

    fsm_state = 3;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000c10:	f000 f886 	bl	8000d20 <LED_Manage_Output>

      sprintf(msg,"illegal 0x404 LAUNCH state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000c14:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c18:	461a      	mov	r2, r3
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4936      	ldr	r1, [pc, #216]	@ (8000cf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 f8ed 	bl	8003e00 <siprintf>
 8000c26:	e049      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }
  else if ( RxHeader.StdId == 0x405 && RxHeader.RTR == 0)
 8000c28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f240 4205 	movw	r2, #1029	@ 0x405
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d112      	bne.n	8000c5a <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
 8000c34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10e      	bne.n	8000c5a <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
    { // CRAWLING state

    fsm_state = 4;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000c42:	f000 f86d 	bl	8000d20 <LED_Manage_Output>
    sprintf(msg,"0x405 CRAWLING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000c46:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	492a      	ldr	r1, [pc, #168]	@ (8000cfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 f8d4 	bl	8003e00 <siprintf>
 8000c58:	e030      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }
  else if ( RxHeader.StdId == 0x406 && RxHeader.RTR == 0)
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f240 4206 	movw	r2, #1030	@ 0x406
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d112      	bne.n	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10e      	bne.n	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>
    { // BRAKING state

    fsm_state = 5;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000c70:	2205      	movs	r2, #5
 8000c72:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000c74:	f000 f854 	bl	8000d20 <LED_Manage_Output>
    sprintf(msg,"0x406 BRAKING state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000c78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	491f      	ldr	r1, [pc, #124]	@ (8000d00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 f8bb 	bl	8003e00 <siprintf>
 8000c8a:	e017      	b.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    }

  else if ( RxHeader.StdId == 0x407 && RxHeader.RTR == 0)
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f240 4207 	movw	r2, #1031	@ 0x407
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d111      	bne.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10d      	bne.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
    { // DEBUG sate

    fsm_state = 6;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	701a      	strb	r2, [r3, #0]
    LED_Manage_Output();
 8000ca6:	f000 f83b 	bl	8000d20 <LED_Manage_Output>
    sprintf(msg,"0x407 DEBUG state INITIALIZED : #%x\r\n",rcvd_msg[0]);
 8000caa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4913      	ldr	r1, [pc, #76]	@ (8000d04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f8a2 	bl	8003e00 <siprintf>
//  {
//    //its a reply ( data frame) by n2 to n1
//    sprintf(msg,"Reply Received : %#X\r\n",rcvd_msg[0] << 8 | rcvd_msg[1]);
//  }

   HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff faa5 	bl	8000210 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	f107 010c 	add.w	r1, r7, #12
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000cd4:	f002 fd1f 	bl	8003716 <HAL_UART_Transmit>
}
 8000cd8:	bf00      	nop
 8000cda:	3748      	adds	r7, #72	@ 0x48
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	20000130 	.word	0x20000130
 8000ce8:	2000012c 	.word	0x2000012c
 8000cec:	0800479c 	.word	0x0800479c
 8000cf0:	080047c4 	.word	0x080047c4
 8000cf4:	080047f8 	.word	0x080047f8
 8000cf8:	08004828 	.word	0x08004828
 8000cfc:	08004858 	.word	0x08004858
 8000d00:	08004884 	.word	0x08004884
 8000d04:	080048ac 	.word	0x080048ac
 8000d08:	20000078 	.word	0x20000078

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 8000d14:	f7ff fd76 	bl	8000804 <CAN1_Tx>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <LED_Manage_Output>:

void LED_Manage_Output()
{  // based on the global uni8_t fsm_state change the colors of the LED strip
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  switch(fsm_state) {
 8000d24:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <LED_Manage_Output+0xe8>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d86a      	bhi.n	8000e04 <LED_Manage_Output+0xe4>
 8000d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d34 <LED_Manage_Output+0x14>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d75 	.word	0x08000d75
 8000d3c:	08000da5 	.word	0x08000da5
 8000d40:	08000dd5 	.word	0x08000dd5
  case 1 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d4a:	4830      	ldr	r0, [pc, #192]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d4c:	f001 fbb2 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d56:	482d      	ldr	r0, [pc, #180]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d58:	f001 fbac 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d62:	482b      	ldr	r0, [pc, #172]	@ (8000e10 <LED_Manage_Output+0xf0>)
 8000d64:	f001 fba6 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	@ 0x40
 8000d6c:	4827      	ldr	r0, [pc, #156]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d6e:	f001 fba1 	bl	80024b4 <HAL_GPIO_WritePin>
    break;
 8000d72:	e047      	b.n	8000e04 <LED_Manage_Output+0xe4>
  case 2 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d7a:	4824      	ldr	r0, [pc, #144]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d7c:	f001 fb9a 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	4821      	ldr	r0, [pc, #132]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d88:	f001 fb94 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d92:	481f      	ldr	r0, [pc, #124]	@ (8000e10 <LED_Manage_Output+0xf0>)
 8000d94:	f001 fb8e 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2140      	movs	r1, #64	@ 0x40
 8000d9c:	481b      	ldr	r0, [pc, #108]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000d9e:	f001 fb89 	bl	80024b4 <HAL_GPIO_WritePin>
    break;
 8000da2:	e02f      	b.n	8000e04 <LED_Manage_Output+0xe4>
  case 3 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000daa:	4818      	ldr	r0, [pc, #96]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000dac:	f001 fb82 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000db6:	4815      	ldr	r0, [pc, #84]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000db8:	f001 fb7c 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	4813      	ldr	r0, [pc, #76]	@ (8000e10 <LED_Manage_Output+0xf0>)
 8000dc4:	f001 fb76 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2140      	movs	r1, #64	@ 0x40
 8000dcc:	480f      	ldr	r0, [pc, #60]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000dce:	f001 fb71 	bl	80024b4 <HAL_GPIO_WritePin>
    break;
 8000dd2:	e017      	b.n	8000e04 <LED_Manage_Output+0xe4>
  case 4 :
    HAL_GPIO_WritePin(LED1_PORT,LED1_PIN_NO,GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dda:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000ddc:	f001 fb6a 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_PORT,LED2_PIN_NO,GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000de8:	f001 fb64 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_PORT,LED3_PIN_NO,GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df2:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <LED_Manage_Output+0xf0>)
 8000df4:	f001 fb5e 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_PORT,LED4_PIN_NO,GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	@ 0x40
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <LED_Manage_Output+0xec>)
 8000dfe:	f001 fb59 	bl	80024b4 <HAL_GPIO_WritePin>
    break;
 8000e02:	bf00      	nop
  }
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000012c 	.word	0x2000012c
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020400 	.word	0x40020400

08000e14 <CAN_Tx_Test_All_Speeds>:
void CAN_Tx_Test_All_Speeds(void)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b09f      	sub	sp, #124	@ 0x7c
 8000e18:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t dummy_payload = 0xAB;
 8000e1a:	23ab      	movs	r3, #171	@ 0xab
 8000e1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    TxHeader.DLC = 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    TxHeader.IDE = CAN_ID_STD;
 8000e24:	2300      	movs	r3, #0
 8000e26:	667b      	str	r3, [r7, #100]	@ 0x64
    TxHeader.RTR = CAN_RTR_DATA;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	66bb      	str	r3, [r7, #104]	@ 0x68

    uint16_t test_ids[] = {
 8000e2c:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <CAN_Tx_Test_All_Speeds+0xa4>)
 8000e2e:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0x310  // Crawl mode
    };

    char msg[64];

    for (int i = 0; i < sizeof(test_ids)/sizeof(test_ids[0]); i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000e3c:	e033      	b.n	8000ea6 <CAN_Tx_Test_All_Speeds+0x92>
    {
        TxHeader.StdId = test_ids[i];
 8000e3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	3378      	adds	r3, #120	@ 0x78
 8000e44:	443b      	add	r3, r7
 8000e46:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000e4a:	65fb      	str	r3, [r7, #92]	@ 0x5c

        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &dummy_payload, &TxMailbox) != HAL_OK)
 8000e4c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e50:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 8000e54:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8000e58:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <CAN_Tx_Test_All_Speeds+0xa8>)
 8000e5a:	f000 fc37 	bl	80016cc <HAL_CAN_AddTxMessage>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <CAN_Tx_Test_All_Speeds+0x54>
        {
            Error_handler();
 8000e64:	f000 f830 	bl	8000ec8 <Error_handler>
        }

        sprintf(msg, "Sent test CAN ID: 0x%03X\r\n", test_ids[i]);
 8000e68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	3378      	adds	r3, #120	@ 0x78
 8000e6e:	443b      	add	r3, r7
 8000e70:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000e74:	461a      	mov	r2, r3
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4911      	ldr	r1, [pc, #68]	@ (8000ec0 <CAN_Tx_Test_All_Speeds+0xac>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 ffc0 	bl	8003e00 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff f9c4 	bl	8000210 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	1d39      	adds	r1, r7, #4
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <CAN_Tx_Test_All_Speeds+0xb0>)
 8000e94:	f002 fc3f 	bl	8003716 <HAL_UART_Transmit>

        HAL_Delay(10000); // 3-second delay between each message
 8000e98:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000e9c:	f000 f9d2 	bl	8001244 <HAL_Delay>
    for (int i = 0; i < sizeof(test_ids)/sizeof(test_ids[0]); i++)
 8000ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	d9c8      	bls.n	8000e3e <CAN_Tx_Test_All_Speeds+0x2a>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	377c      	adds	r7, #124	@ 0x7c
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	080048f0 	.word	0x080048f0
 8000ebc:	200000bc 	.word	0x200000bc
 8000ec0:	080048d4 	.word	0x080048d4
 8000ec4:	20000078 	.word	0x20000078

08000ec8 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  while(1);
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_handler+0x4>

08000ed0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  //Here will do low level processor specific inits.
  //1. Set up the priority grouping of the arm cortex mx processor
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f001 f8ed 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  //2. Enable the required system exceptions of the arm cortex mx processor
  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_MspInit+0x40>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ede:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <HAL_MspInit+0x40>)
 8000ee0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000ee4:	6253      	str	r3, [r2, #36]	@ 0x24

  //3. configure the priority for the system exceptions
  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f06f 000b 	mvn.w	r0, #11
 8000eee:	f001 f8ec 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	f06f 000a 	mvn.w	r0, #10
 8000efa:	f001 f8e6 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	f06f 0009 	mvn.w	r0, #9
 8000f06:	f001 f8e0 	bl	80020ca <HAL_NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	4a1d      	ldr	r2, [pc, #116]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	4a16      	ldr	r2, [pc, #88]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <HAL_UART_MspInit+0x88>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 8000f54:	2304      	movs	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000f64:	2307      	movs	r3, #7
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f70:	f001 f90c 	bl	800218c <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000f74:	2308      	movs	r3, #8
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f80:	f001 f904 	bl	800218c <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f84:	2026      	movs	r0, #38	@ 0x26
 8000f86:	f001 f8bc 	bl	8002102 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	2026      	movs	r0, #38	@ 0x26
 8000f90:	f001 f89b 	bl	80020ca <HAL_NVIC_SetPriority>
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_CAN1_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_CAN_MspInit+0x90>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_CAN_MspInit+0x90>)
 8000fb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_CAN_MspInit+0x90>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

  /**CAN1 GPIO Configuration
     PA11     ------> CAN1_RX
     PA12     ------> CAN1_TX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fda:	2309      	movs	r3, #9
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <HAL_CAN_MspInit+0x94>)
 8000fe6:	f001 f8d1 	bl	800218c <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	210f      	movs	r1, #15
 8000fee:	2013      	movs	r0, #19
 8000ff0:	f001 f86b 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	2014      	movs	r0, #20
 8000ffa:	f001 f866 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	210f      	movs	r1, #15
 8001002:	2015      	movs	r0, #21
 8001004:	f001 f861 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8001008:	2200      	movs	r2, #0
 800100a:	210f      	movs	r1, #15
 800100c:	2016      	movs	r0, #22
 800100e:	f001 f85c 	bl	80020ca <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001012:	2013      	movs	r0, #19
 8001014:	f001 f875 	bl	8002102 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001018:	2014      	movs	r0, #20
 800101a:	f001 f872 	bl	8002102 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800101e:	2015      	movs	r0, #21
 8001020:	f001 f86f 	bl	8002102 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001024:	2016      	movs	r0, #22
 8001026:	f001 f86c 	bl	8002102 <HAL_NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  //1. enable the clock for the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_TIM_Base_MspInit+0x3c>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_TIM_Base_MspInit+0x3c>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_TIM_Base_MspInit+0x3c>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

  //2. Enable the IRQ of TIM6
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001060:	2036      	movs	r0, #54	@ 0x36
 8001062:	f001 f84e 	bl	8002102 <HAL_NVIC_EnableIRQ>

  //3. setup the priority for TIM6_DAC_IRQn
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 8001066:	2200      	movs	r2, #0
 8001068:	210f      	movs	r1, #15
 800106a:	2036      	movs	r0, #54	@ 0x36
 800106c:	f001 f82d 	bl	80020ca <HAL_NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f002 feca 	bl	8003e44 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20020000 	.word	0x20020000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	2000014c 	.word	0x2000014c
 80010e4:	200002a0 	.word	0x200002a0

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	@ (800114c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	@ (8001154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	@ (8001158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fe89 	bl	8003e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fa93 	bl	8000668 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001150:	0800495c 	.word	0x0800495c
  ldr r2, =_sbss
 8001154:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001158:	2000029c 	.word	0x2000029c

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 ff93 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe9c 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffab 	bl	800211e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 ff73 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000150 	.word	0x20000150

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000150 	.word	0x20000150

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0ed      	b.n	800147a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe7a 	bl	8000fa4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c0:	f7ff ffb4 	bl	800122c <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012c6:	e012      	b.n	80012ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c8:	f7ff ffb0 	bl	800122c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d90b      	bls.n	80012ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0c5      	b.n	800147a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0e5      	beq.n	80012c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0202 	bic.w	r2, r2, #2
 800130a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff ff8e 	bl	800122c <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001312:	e012      	b.n	800133a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001314:	f7ff ff8a 	bl	800122c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b0a      	cmp	r3, #10
 8001320:	d90b      	bls.n	800133a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2205      	movs	r2, #5
 8001332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e09f      	b.n	800147a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e5      	bne.n	8001314 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e1b      	ldrb	r3, [r3, #24]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d108      	bne.n	8001362 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e007      	b.n	8001372 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e5b      	ldrb	r3, [r3, #25]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d108      	bne.n	800138c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e007      	b.n	800139c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800139a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7e9b      	ldrb	r3, [r3, #26]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d108      	bne.n	80013b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e007      	b.n	80013c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0220 	bic.w	r2, r2, #32
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7edb      	ldrb	r3, [r3, #27]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0210 	bic.w	r2, r2, #16
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e007      	b.n	80013f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0210 	orr.w	r2, r2, #16
 80013ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7f1b      	ldrb	r3, [r3, #28]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d108      	bne.n	800140a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e007      	b.n	800141a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0208 	bic.w	r2, r2, #8
 8001418:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7f5b      	ldrb	r3, [r3, #29]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0204 	orr.w	r2, r2, #4
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e007      	b.n	8001444 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0204 	bic.w	r2, r2, #4
 8001442:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	ea42 0103 	orr.w	r1, r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <HAL_CAN_ConfigFilter+0x26>
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	f040 80be 	bne.w	8001626 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80014aa:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <HAL_CAN_ConfigFilter+0x1bc>)
 80014ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014c4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	2201      	movs	r2, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d123      	bne.n	8001554 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800152e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3248      	adds	r2, #72	@ 0x48
 8001534:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001548:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	3348      	adds	r3, #72	@ 0x48
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d122      	bne.n	80015a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	431a      	orrs	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3248      	adds	r2, #72	@ 0x48
 8001582:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001598:	6979      	ldr	r1, [r7, #20]
 800159a:	3348      	adds	r3, #72	@ 0x48
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	401a      	ands	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015bc:	e007      	b.n	80015ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015e8:	e007      	b.n	80015fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001618:	f023 0201 	bic.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e006      	b.n	8001634 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40006400 	.word	0x40006400

08001644 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d12e      	bne.n	80016b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fddc 	bl	800122c <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff fdd8 	bl	800122c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e012      	b.n	80016c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d003      	beq.n	80016f8 <HAL_CAN_AddTxMessage+0x2c>
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	f040 80b8 	bne.w	8001868 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 80a0 	beq.w	8001858 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0e1b      	lsrs	r3, r3, #24
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d907      	bls.n	8001738 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e09e      	b.n	8001876 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001738:	2201      	movs	r2, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	409a      	lsls	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	6809      	ldr	r1, [r1, #0]
 8001758:	431a      	orrs	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3318      	adds	r3, #24
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	440b      	add	r3, r1
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e00f      	b.n	8001786 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001770:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001776:	68f9      	ldr	r1, [r7, #12]
 8001778:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800177a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3318      	adds	r3, #24
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6819      	ldr	r1, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3318      	adds	r3, #24
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	3304      	adds	r3, #4
 8001798:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	7d1b      	ldrb	r3, [r3, #20]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d111      	bne.n	80017c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3318      	adds	r3, #24
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6811      	ldr	r1, [r2, #0]
 80017b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3318      	adds	r3, #24
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	3304      	adds	r3, #4
 80017c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3307      	adds	r3, #7
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	061a      	lsls	r2, r3, #24
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3306      	adds	r3, #6
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3305      	adds	r3, #5
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	3204      	adds	r2, #4
 80017e6:	7812      	ldrb	r2, [r2, #0]
 80017e8:	4610      	mov	r0, r2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	ea43 0200 	orr.w	r2, r3, r0
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3303      	adds	r3, #3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	061a      	lsls	r2, r3, #24
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3302      	adds	r3, #2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	4313      	orrs	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	ea43 0200 	orr.w	r2, r3, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001832:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3318      	adds	r3, #24
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6811      	ldr	r1, [r2, #0]
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3318      	adds	r3, #24
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	440b      	add	r3, r1
 8001852:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	e00e      	b.n	8001876 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e006      	b.n	8001876 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001882:	b480      	push	{r7}
 8001884:	b087      	sub	sp, #28
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001896:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d003      	beq.n	80018a6 <HAL_CAN_GetRxMessage+0x24>
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	f040 80f3 	bne.w	8001a8c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10e      	bne.n	80018ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d116      	bne.n	80018e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0e7      	b.n	8001a9a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0d8      	b.n	8001a9a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	331b      	adds	r3, #27
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0204 	and.w	r2, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	331b      	adds	r3, #27
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0d5b      	lsrs	r3, r3, #21
 8001916:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00b      	b.n	8001938 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	331b      	adds	r3, #27
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	331b      	adds	r3, #27
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0202 	and.w	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	331b      	adds	r3, #27
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	331b      	adds	r3, #27
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b2da      	uxtb	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	331b      	adds	r3, #27
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0c1b      	lsrs	r3, r3, #16
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	4413      	add	r3, r2
 80019a0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0a1a      	lsrs	r2, r3, #8
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0c1a      	lsrs	r2, r3, #16
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3302      	adds	r3, #2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e1a      	lsrs	r2, r3, #24
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3303      	adds	r3, #3
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0a1a      	lsrs	r2, r3, #8
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3305      	adds	r3, #5
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0c1a      	lsrs	r2, r3, #16
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3306      	adds	r3, #6
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e1a      	lsrs	r2, r3, #24
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3307      	adds	r3, #7
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0220 	orr.w	r2, r2, #32
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e006      	b.n	8001a9a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
  }
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	371c      	adds	r7, #28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d002      	beq.n	8001ac4 <HAL_CAN_ActivateNotification+0x1e>
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d109      	bne.n	8001ad8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6959      	ldr	r1, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e006      	b.n	8001ae6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
  }
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b08a      	sub	sp, #40	@ 0x28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d07c      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d023      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7fe ff8f 	bl	8000a78 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b5a:	e016      	b.n	8001b8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6e:	e00c      	b.n	8001b8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b82:	e002      	b.n	8001b8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f96b 	bl	8001e60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d024      	beq.n	8001bde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7fe ff85 	bl	8000ab8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001bae:	e016      	b.n	8001bde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc2:	e00c      	b.n	8001bde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd6:	e002      	b.n	8001bde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f94b 	bl	8001e74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d024      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe ff7b 	bl	8000af8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c02:	e016      	b.n	8001c32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d004      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c16:	e00c      	b.n	8001c32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2a:	e002      	b.n	8001c32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f92b 	bl	8001e88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00c      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2210      	movs	r2, #16
 8001c54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f912 	bl	8001e9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7fe ff51 	bl	8000b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00c      	beq.n	8001cba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2208      	movs	r2, #8
 8001cd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8f4 	bl	8001ec4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8db 	bl	8001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2210      	movs	r2, #16
 8001d14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8de 	bl	8001ed8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2208      	movs	r2, #8
 8001d36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8d7 	bl	8001eec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d07b      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d072      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d043      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03e      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dc0:	2b60      	cmp	r3, #96	@ 0x60
 8001dc2:	d02b      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x32a>
 8001dc4:	2b60      	cmp	r3, #96	@ 0x60
 8001dc6:	d82e      	bhi.n	8001e26 <HAL_CAN_IRQHandler+0x334>
 8001dc8:	2b50      	cmp	r3, #80	@ 0x50
 8001dca:	d022      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x320>
 8001dcc:	2b50      	cmp	r3, #80	@ 0x50
 8001dce:	d82a      	bhi.n	8001e26 <HAL_CAN_IRQHandler+0x334>
 8001dd0:	2b40      	cmp	r3, #64	@ 0x40
 8001dd2:	d019      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x316>
 8001dd4:	2b40      	cmp	r3, #64	@ 0x40
 8001dd6:	d826      	bhi.n	8001e26 <HAL_CAN_IRQHandler+0x334>
 8001dd8:	2b30      	cmp	r3, #48	@ 0x30
 8001dda:	d010      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x30c>
 8001ddc:	2b30      	cmp	r3, #48	@ 0x30
 8001dde:	d822      	bhi.n	8001e26 <HAL_CAN_IRQHandler+0x334>
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d002      	beq.n	8001dea <HAL_CAN_IRQHandler+0x2f8>
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d005      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001de8:	e01d      	b.n	8001e26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001df2:	e019      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfc:	e014      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e06:	e00f      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e10:	e00a      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e1a:	e005      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e24:	e000      	b.n	8001e28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f854 	bl	8001f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	@ 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b04      	cmp	r3, #4
 8002144:	d106      	bne.n	8002154 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a08      	ldr	r2, [pc, #32]	@ (800216c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002152:	e005      	b.n	8002160 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800215a:	f023 0304 	bic.w	r3, r3, #4
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002174:	f000 f802 	bl	800217c <HAL_SYSTICK_Callback>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e165      	b.n	8002474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8154 	bne.w	800246e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80ae 	beq.w	800246e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_GPIO_Init+0x300>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a5c      	ldr	r2, [pc, #368]	@ (800248c <HAL_GPIO_Init+0x300>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_GPIO_Init+0x300>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_GPIO_Init+0x304>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x308>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x30c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_GPIO_Init+0x310>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x314>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <HAL_GPIO_Init+0x318>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x20a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x206>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <HAL_GPIO_Init+0x320>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x202>
 800238a:	2306      	movs	r3, #6
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800238e:	2307      	movs	r3, #7
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	@ (8002490 <HAL_GPIO_Init+0x304>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c6:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ea:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002414:	4a26      	ldr	r2, [pc, #152]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae96 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43d9      	mvns	r1, r3
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	400b      	ands	r3, r1
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002526:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f806 	bl	800254c <HAL_GPIO_EXTI_Callback>
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0cc      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002578:	4b68      	ldr	r3, [pc, #416]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d90c      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b65      	ldr	r3, [pc, #404]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a58      	ldr	r2, [pc, #352]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d044      	beq.n	8002684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d119      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d003      	beq.n	8002622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	2b03      	cmp	r3, #3
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002622:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d109      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e067      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002642:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4934      	ldr	r1, [pc, #208]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002654:	f7fe fdea 	bl	800122c <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	e00a      	b.n	8002672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265c:	f7fe fde6 	bl	800122c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	4b2b      	ldr	r3, [pc, #172]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 020c 	and.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d1eb      	bne.n	800265c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d20c      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b22      	ldr	r3, [pc, #136]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	@ (800271c <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d6:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f855 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd4a 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00
 8002720:	40023800 	.word	0x40023800
 8002724:	08004900 	.word	0x08004900
 8002728:	20000000 	.word	0x20000000
 800272c:	20000004 	.word	0x20000004

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08004910 	.word	0x08004910

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffdc 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0b5b      	lsrs	r3, r3, #13
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	08004910 	.word	0x08004910

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b0ae      	sub	sp, #184	@ 0xb8
 800279e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027be:	4bcb      	ldr	r3, [pc, #812]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	f200 8206 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x440>
 80027cc:	a201      	add	r2, pc, #4	@ (adr r2, 80027d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	08002809 	.word	0x08002809
 80027d8:	08002bd9 	.word	0x08002bd9
 80027dc:	08002bd9 	.word	0x08002bd9
 80027e0:	08002bd9 	.word	0x08002bd9
 80027e4:	08002811 	.word	0x08002811
 80027e8:	08002bd9 	.word	0x08002bd9
 80027ec:	08002bd9 	.word	0x08002bd9
 80027f0:	08002bd9 	.word	0x08002bd9
 80027f4:	08002819 	.word	0x08002819
 80027f8:	08002bd9 	.word	0x08002bd9
 80027fc:	08002bd9 	.word	0x08002bd9
 8002800:	08002bd9 	.word	0x08002bd9
 8002804:	08002a09 	.word	0x08002a09
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4bb9      	ldr	r3, [pc, #740]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x358>)
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800280e:	e1e7      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002810:	4bb8      	ldr	r3, [pc, #736]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002816:	e1e3      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002818:	4bb4      	ldr	r3, [pc, #720]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002824:	4bb1      	ldr	r3, [pc, #708]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d071      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4bae      	ldr	r3, [pc, #696]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800283c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	f04f 0000 	mov.w	r0, #0
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	0159      	lsls	r1, r3, #5
 8002864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002868:	0150      	lsls	r0, r2, #5
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4621      	mov	r1, r4
 8002870:	1a51      	subs	r1, r2, r1
 8002872:	6439      	str	r1, [r7, #64]	@ 0x40
 8002874:	4629      	mov	r1, r5
 8002876:	eb63 0301 	sbc.w	r3, r3, r1
 800287a:	647b      	str	r3, [r7, #68]	@ 0x44
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002888:	4649      	mov	r1, r9
 800288a:	018b      	lsls	r3, r1, #6
 800288c:	4641      	mov	r1, r8
 800288e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002892:	4641      	mov	r1, r8
 8002894:	018a      	lsls	r2, r1, #6
 8002896:	4641      	mov	r1, r8
 8002898:	1a51      	subs	r1, r2, r1
 800289a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800289c:	4649      	mov	r1, r9
 800289e:	eb63 0301 	sbc.w	r3, r3, r1
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028b0:	4649      	mov	r1, r9
 80028b2:	00cb      	lsls	r3, r1, #3
 80028b4:	4641      	mov	r1, r8
 80028b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ba:	4641      	mov	r1, r8
 80028bc:	00ca      	lsls	r2, r1, #3
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	4622      	mov	r2, r4
 80028c6:	189b      	adds	r3, r3, r2
 80028c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ca:	462b      	mov	r3, r5
 80028cc:	460a      	mov	r2, r1
 80028ce:	eb42 0303 	adc.w	r3, r2, r3
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028e0:	4629      	mov	r1, r5
 80028e2:	024b      	lsls	r3, r1, #9
 80028e4:	4621      	mov	r1, r4
 80028e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ea:	4621      	mov	r1, r4
 80028ec:	024a      	lsls	r2, r1, #9
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002900:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002904:	f7fd fcdc 	bl	80002c0 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002912:	e067      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002914:	4b75      	ldr	r3, [pc, #468]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002920:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002924:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800292e:	2300      	movs	r3, #0
 8002930:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002932:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4621      	mov	r1, r4
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002954:	4629      	mov	r1, r5
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002968:	4649      	mov	r1, r9
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4641      	mov	r1, r8
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4641      	mov	r1, r8
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4641      	mov	r1, r8
 8002978:	ebb2 0a01 	subs.w	sl, r2, r1
 800297c:	4649      	mov	r1, r9
 800297e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800298e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002996:	4692      	mov	sl, r2
 8002998:	469b      	mov	fp, r3
 800299a:	4623      	mov	r3, r4
 800299c:	eb1a 0303 	adds.w	r3, sl, r3
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	462b      	mov	r3, r5
 80029a4:	eb4b 0303 	adc.w	r3, fp, r3
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029b6:	4629      	mov	r1, r5
 80029b8:	028b      	lsls	r3, r1, #10
 80029ba:	4621      	mov	r1, r4
 80029bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c0:	4621      	mov	r1, r4
 80029c2:	028a      	lsls	r2, r1, #10
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029cc:	2200      	movs	r2, #0
 80029ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80029d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80029d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029d6:	f7fd fc73 	bl	80002c0 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4613      	mov	r3, r2
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80029f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a06:	e0eb      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4b38      	ldr	r3, [pc, #224]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a14:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d06b      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a20:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	2200      	movs	r2, #0
 8002a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a32:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a34:	2300      	movs	r3, #0
 8002a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a38:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	462b      	mov	r3, r5
 8002a40:	f04f 0000 	mov.w	r0, #0
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	0159      	lsls	r1, r3, #5
 8002a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4e:	0150      	lsls	r0, r2, #5
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4621      	mov	r1, r4
 8002a56:	1a51      	subs	r1, r2, r1
 8002a58:	61b9      	str	r1, [r7, #24]
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a6e:	4659      	mov	r1, fp
 8002a70:	018b      	lsls	r3, r1, #6
 8002a72:	4651      	mov	r1, sl
 8002a74:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a78:	4651      	mov	r1, sl
 8002a7a:	018a      	lsls	r2, r1, #6
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a82:	4659      	mov	r1, fp
 8002a84:	eb63 0901 	sbc.w	r9, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9c:	4690      	mov	r8, r2
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	eb18 0303 	adds.w	r3, r8, r3
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	eb49 0303 	adc.w	r3, r9, r3
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002abc:	4629      	mov	r1, r5
 8002abe:	024b      	lsls	r3, r1, #9
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	024a      	lsls	r2, r1, #9
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ad6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ad8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002adc:	f7fd fbf0 	bl	80002c0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aea:	e065      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x420>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	2200      	movs	r2, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	4611      	mov	r1, r2
 8002b04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b12:	4642      	mov	r2, r8
 8002b14:	464b      	mov	r3, r9
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b24:	0150      	lsls	r0, r2, #5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	1a51      	subs	r1, r2, r1
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	4649      	mov	r1, r9
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b44:	4659      	mov	r1, fp
 8002b46:	018b      	lsls	r3, r1, #6
 8002b48:	4651      	mov	r1, sl
 8002b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4e:	4651      	mov	r1, sl
 8002b50:	018a      	lsls	r2, r1, #6
 8002b52:	4651      	mov	r1, sl
 8002b54:	1a54      	subs	r4, r2, r1
 8002b56:	4659      	mov	r1, fp
 8002b58:	eb63 0501 	sbc.w	r5, r3, r1
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	00eb      	lsls	r3, r5, #3
 8002b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b6a:	00e2      	lsls	r2, r4, #3
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	461d      	mov	r5, r3
 8002b70:	4643      	mov	r3, r8
 8002b72:	18e3      	adds	r3, r4, r3
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	464b      	mov	r3, r9
 8002b78:	eb45 0303 	adc.w	r3, r5, r3
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	028b      	lsls	r3, r1, #10
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b94:	4621      	mov	r1, r4
 8002b96:	028a      	lsls	r2, r1, #10
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ba4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002ba6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002baa:	f7fd fb89 	bl	80002c0 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0f1b      	lsrs	r3, r3, #28
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	e003      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	37b8      	adds	r7, #184	@ 0xb8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	00f42400 	.word	0x00f42400

08002bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e28d      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8083 	beq.w	8002d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c18:	4b94      	ldr	r3, [pc, #592]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d019      	beq.n	8002c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c24:	4b91      	ldr	r3, [pc, #580]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c30:	4b8e      	ldr	r3, [pc, #568]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b88      	ldr	r3, [pc, #544]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b84      	ldr	r3, [pc, #528]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x124>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e25a      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x90>
 8002c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xcc>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0xb4>
 8002c92:	4b76      	ldr	r3, [pc, #472]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b73      	ldr	r3, [pc, #460]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a72      	ldr	r2, [pc, #456]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xcc>
 8002cac:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a6b      	ldr	r2, [pc, #428]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe faae 	bl	800122c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe faaa 	bl	800122c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	@ 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e21f      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b61      	ldr	r3, [pc, #388]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xdc>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fa9a 	bl	800122c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fa96 	bl	800122c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e20b      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b57      	ldr	r3, [pc, #348]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x104>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d06f      	beq.n	8002e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d2a:	4b50      	ldr	r3, [pc, #320]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d017      	beq.n	8002d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d36:	4b4d      	ldr	r3, [pc, #308]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d105      	bne.n	8002d4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d42:	4b4a      	ldr	r3, [pc, #296]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b44      	ldr	r3, [pc, #272]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x186>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1d3      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4937      	ldr	r1, [pc, #220]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b34      	ldr	r3, [pc, #208]	@ (8002e70 <HAL_RCC_OscConfig+0x278>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fa43 	bl	800122c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fa3f 	bl	800122c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1b4      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4925      	ldr	r1, [pc, #148]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <HAL_RCC_OscConfig+0x278>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fa22 	bl	800122c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fa1e 	bl	800122c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e193      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa02 	bl	800122c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f9fe 	bl	800122c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e173      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_OscConfig+0x274>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x234>
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f9eb 	bl	800122c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	e00e      	b.n	8002e78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe f9e7 	bl	800122c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d907      	bls.n	8002e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e15c      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470000 	.word	0x42470000
 8002e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b8a      	ldr	r3, [pc, #552]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ea      	bne.n	8002e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8097 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b83      	ldr	r3, [pc, #524]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b79      	ldr	r3, [pc, #484]	@ (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b76      	ldr	r3, [pc, #472]	@ (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	@ (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f9a7 	bl	800122c <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fe f9a3 	bl	800122c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e118      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80030a8 <HAL_RCC_OscConfig+0x4b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x31e>
 8002f08:	4b66      	ldr	r3, [pc, #408]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a65      	ldr	r2, [pc, #404]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x358>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x340>
 8002f1e:	4b61      	ldr	r3, [pc, #388]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f22:	4a60      	ldr	r2, [pc, #384]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2e:	4a5d      	ldr	r2, [pc, #372]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x358>
 8002f38:	4b5a      	ldr	r3, [pc, #360]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	4a59      	ldr	r2, [pc, #356]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f44:	4b57      	ldr	r3, [pc, #348]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f48:	4a56      	ldr	r2, [pc, #344]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe f968 	bl	800122c <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe f964 	bl	800122c <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0d7      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RCC_OscConfig+0x368>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe f952 	bl	800122c <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe f94e 	bl	800122c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0c1      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	4b40      	ldr	r3, [pc, #256]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ee      	bne.n	8002f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80ad 	beq.w	8003124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d145      	bne.n	800306a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_RCC_OscConfig+0x4b4>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f922 	bl	800122c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe f91e 	bl	800122c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e093      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	491b      	ldr	r1, [pc, #108]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x4b4>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe f8f3 	bl	800122c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f8ef 	bl	800122c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e064      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x452>
 8003068:	e05c      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <HAL_RCC_OscConfig+0x4b4>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f8dc 	bl	800122c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe f8d8 	bl	800122c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e04d      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x480>
 8003096:	e045      	b.n	8003124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003130 <HAL_RCC_OscConfig+0x538>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d030      	beq.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d129      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e041      	b.n	80031ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd ff6e 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 f9ce 	bl	8003514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e04e      	b.n	800328a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a23      	ldr	r2, [pc, #140]	@ (8003298 <HAL_TIM_Base_Start_IT+0xc4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d022      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d01d      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1f      	ldr	r2, [pc, #124]	@ (800329c <HAL_TIM_Base_Start_IT+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d018      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1c      	ldr	r2, [pc, #112]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a19      	ldr	r2, [pc, #100]	@ (80032ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d111      	bne.n	8003278 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d010      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	e007      	b.n	8003288 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40010400 	.word	0x40010400
 80032ac:	40014000 	.word	0x40014000
 80032b0:	40001800 	.word	0x40001800

080032b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0202 	mvn.w	r2, #2
 80032e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8ee 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8e0 	bl	80034c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8f1 	bl	80034ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b04      	cmp	r3, #4
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b04      	cmp	r3, #4
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0204 	mvn.w	r2, #4
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8c4 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f8b6 	bl	80034c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f8c7 	bl	80034ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b08      	cmp	r3, #8
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0208 	mvn.w	r2, #8
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2204      	movs	r2, #4
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f89a 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f88c 	bl	80034c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f89d 	bl	80034ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f870 	bl	80034d8 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f862 	bl	80034c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f873 	bl	80034ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10e      	bne.n	8003438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d107      	bne.n	8003438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0201 	mvn.w	r2, #1
 8003430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fc6a 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003450:	2b80      	cmp	r3, #128	@ 0x80
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f902 	bl	8003668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f838 	bl	8003500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b20      	cmp	r3, #32
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0220 	mvn.w	r2, #32
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8cc 	bl	8003654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a40      	ldr	r2, [pc, #256]	@ (8003628 <TIM_Base_SetConfig+0x114>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003532:	d00f      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3d      	ldr	r2, [pc, #244]	@ (800362c <TIM_Base_SetConfig+0x118>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3c      	ldr	r2, [pc, #240]	@ (8003630 <TIM_Base_SetConfig+0x11c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3b      	ldr	r2, [pc, #236]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2f      	ldr	r2, [pc, #188]	@ (8003628 <TIM_Base_SetConfig+0x114>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003574:	d027      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <TIM_Base_SetConfig+0x118>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d023      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <TIM_Base_SetConfig+0x11c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2a      	ldr	r2, [pc, #168]	@ (8003634 <TIM_Base_SetConfig+0x120>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a29      	ldr	r2, [pc, #164]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d017      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a28      	ldr	r2, [pc, #160]	@ (800363c <TIM_Base_SetConfig+0x128>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d013      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <TIM_Base_SetConfig+0x12c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a26      	ldr	r2, [pc, #152]	@ (8003644 <TIM_Base_SetConfig+0x130>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a25      	ldr	r2, [pc, #148]	@ (8003648 <TIM_Base_SetConfig+0x134>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a24      	ldr	r2, [pc, #144]	@ (800364c <TIM_Base_SetConfig+0x138>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <TIM_Base_SetConfig+0x13c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0xf8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0c      	ldr	r2, [pc, #48]	@ (8003638 <TIM_Base_SetConfig+0x124>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d103      	bne.n	8003614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	40001800 	.word	0x40001800
 800364c:	40001c00 	.word	0x40001c00
 8003650:	40002000 	.word	0x40002000

08003654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e03f      	b.n	800370e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fc36 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	@ 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f929 	bl	8003918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b08a      	sub	sp, #40	@ 0x28
 800371a:	af02      	add	r7, sp, #8
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b20      	cmp	r3, #32
 8003734:	d17c      	bne.n	8003830 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_UART_Transmit+0x2c>
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e075      	b.n	8003832 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_UART_Transmit+0x3e>
 8003750:	2302      	movs	r3, #2
 8003752:	e06e      	b.n	8003832 <HAL_UART_Transmit+0x11c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2221      	movs	r2, #33	@ 0x21
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd fd5f 	bl	800122c <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	88fa      	ldrh	r2, [r7, #6]
 800377a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003784:	d108      	bne.n	8003798 <HAL_UART_Transmit+0x82>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d104      	bne.n	8003798 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e003      	b.n	80037a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80037a8:	e02a      	b.n	8003800 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f840 	bl	800383a <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e036      	b.n	8003832 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3302      	adds	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	e007      	b.n	80037f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cf      	bne.n	80037aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	@ 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f810 	bl	800383a <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e006      	b.n	8003832 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b090      	sub	sp, #64	@ 0x40
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384a:	e050      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d04c      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x30>
 800385a:	f7fd fce7 	bl	800122c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003866:	429a      	cmp	r2, r3
 8003868:	d241      	bcs.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	330c      	adds	r3, #12
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800388a:	637a      	str	r2, [r7, #52]	@ 0x34
 800388c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003892:	e841 2300 	strex	r3, r2, [r1]
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e5      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	613b      	str	r3, [r7, #16]
   return(result);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038be:	623a      	str	r2, [r7, #32]
 80038c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d09f      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3740      	adds	r7, #64	@ 0x40
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0c0      	sub	sp, #256	@ 0x100
 800391e:	af00      	add	r7, sp, #0
 8003920:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	68d9      	ldr	r1, [r3, #12]
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	ea40 0301 	orr.w	r3, r0, r1
 8003940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	431a      	orrs	r2, r3
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003970:	f021 010c 	bic.w	r1, r1, #12
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800397e:	430b      	orrs	r3, r1
 8003980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003992:	6999      	ldr	r1, [r3, #24]
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	ea40 0301 	orr.w	r3, r0, r1
 800399e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b8f      	ldr	r3, [pc, #572]	@ (8003be4 <UART_SetConfig+0x2cc>)
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d005      	beq.n	80039b8 <UART_SetConfig+0xa0>
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b8d      	ldr	r3, [pc, #564]	@ (8003be8 <UART_SetConfig+0x2d0>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d104      	bne.n	80039c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe feda 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 80039bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039c0:	e003      	b.n	80039ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7fe fec1 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80039c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d4:	f040 810c 	bne.w	8003bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039ea:	4622      	mov	r2, r4
 80039ec:	462b      	mov	r3, r5
 80039ee:	1891      	adds	r1, r2, r2
 80039f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039f2:	415b      	adcs	r3, r3
 80039f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039fa:	4621      	mov	r1, r4
 80039fc:	eb12 0801 	adds.w	r8, r2, r1
 8003a00:	4629      	mov	r1, r5
 8003a02:	eb43 0901 	adc.w	r9, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb18 0303 	adds.w	r3, r8, r3
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a28:	462b      	mov	r3, r5
 8003a2a:	eb49 0303 	adc.w	r3, r9, r3
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a46:	460b      	mov	r3, r1
 8003a48:	18db      	adds	r3, r3, r3
 8003a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a5c:	f7fc fc30 	bl	80002c0 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4b61      	ldr	r3, [pc, #388]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003a66:	fba3 2302 	umull	r2, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	011c      	lsls	r4, r3, #4
 8003a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a90:	4641      	mov	r1, r8
 8003a92:	eb12 0a01 	adds.w	sl, r2, r1
 8003a96:	4649      	mov	r1, r9
 8003a98:	eb43 0b01 	adc.w	fp, r3, r1
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab0:	4692      	mov	sl, r2
 8003ab2:	469b      	mov	fp, r3
 8003ab4:	4643      	mov	r3, r8
 8003ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003abe:	464b      	mov	r3, r9
 8003ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003adc:	460b      	mov	r3, r1
 8003ade:	18db      	adds	r3, r3, r3
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003af2:	f7fc fbe5 	bl	80002c0 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003afe:	fba3 2301 	umull	r2, r3, r3, r1
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2264      	movs	r2, #100	@ 0x64
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	1acb      	subs	r3, r1, r3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b12:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003b14:	fba3 2302 	umull	r2, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b20:	441c      	add	r4, r3
 8003b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b34:	4642      	mov	r2, r8
 8003b36:	464b      	mov	r3, r9
 8003b38:	1891      	adds	r1, r2, r2
 8003b3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b3c:	415b      	adcs	r3, r3
 8003b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b44:	4641      	mov	r1, r8
 8003b46:	1851      	adds	r1, r2, r1
 8003b48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	414b      	adcs	r3, r1
 8003b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	00cb      	lsls	r3, r1, #3
 8003b60:	4651      	mov	r1, sl
 8003b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b66:	4651      	mov	r1, sl
 8003b68:	00ca      	lsls	r2, r1, #3
 8003b6a:	4610      	mov	r0, r2
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4642      	mov	r2, r8
 8003b72:	189b      	adds	r3, r3, r2
 8003b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b78:	464b      	mov	r3, r9
 8003b7a:	460a      	mov	r2, r1
 8003b7c:	eb42 0303 	adc.w	r3, r2, r3
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b98:	460b      	mov	r3, r1
 8003b9a:	18db      	adds	r3, r3, r3
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	eb42 0303 	adc.w	r3, r2, r3
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bae:	f7fc fb87 	bl	80002c0 <__aeabi_uldivmod>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	@ 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	3332      	adds	r3, #50	@ 0x32
 8003bca:	4a08      	ldr	r2, [pc, #32]	@ (8003bec <UART_SetConfig+0x2d4>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	f003 0207 	and.w	r2, r3, #7
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4422      	add	r2, r4
 8003bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be0:	e106      	b.n	8003df0 <UART_SetConfig+0x4d8>
 8003be2:	bf00      	nop
 8003be4:	40011000 	.word	0x40011000
 8003be8:	40011400 	.word	0x40011400
 8003bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c02:	4642      	mov	r2, r8
 8003c04:	464b      	mov	r3, r9
 8003c06:	1891      	adds	r1, r2, r2
 8003c08:	6239      	str	r1, [r7, #32]
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c12:	4641      	mov	r1, r8
 8003c14:	1854      	adds	r4, r2, r1
 8003c16:	4649      	mov	r1, r9
 8003c18:	eb43 0501 	adc.w	r5, r3, r1
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	00eb      	lsls	r3, r5, #3
 8003c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c2a:	00e2      	lsls	r2, r4, #3
 8003c2c:	4614      	mov	r4, r2
 8003c2e:	461d      	mov	r5, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	18e3      	adds	r3, r4, r3
 8003c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c38:	464b      	mov	r3, r9
 8003c3a:	eb45 0303 	adc.w	r3, r5, r3
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c5e:	4629      	mov	r1, r5
 8003c60:	008b      	lsls	r3, r1, #2
 8003c62:	4621      	mov	r1, r4
 8003c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c68:	4621      	mov	r1, r4
 8003c6a:	008a      	lsls	r2, r1, #2
 8003c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c70:	f7fc fb26 	bl	80002c0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4b60      	ldr	r3, [pc, #384]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	011c      	lsls	r4, r3, #4
 8003c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	1891      	adds	r1, r2, r2
 8003c9a:	61b9      	str	r1, [r7, #24]
 8003c9c:	415b      	adcs	r3, r3
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	1851      	adds	r1, r2, r1
 8003ca8:	6139      	str	r1, [r7, #16]
 8003caa:	4649      	mov	r1, r9
 8003cac:	414b      	adcs	r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	00cb      	lsls	r3, r1, #3
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	00ca      	lsls	r2, r1, #3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	189b      	adds	r3, r3, r2
 8003cd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd8:	464b      	mov	r3, r9
 8003cda:	460a      	mov	r2, r1
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	008b      	lsls	r3, r1, #2
 8003d00:	4641      	mov	r1, r8
 8003d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d06:	4641      	mov	r1, r8
 8003d08:	008a      	lsls	r2, r1, #2
 8003d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d0e:	f7fc fad7 	bl	80002c0 <__aeabi_uldivmod>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	4b38      	ldr	r3, [pc, #224]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2264      	movs	r2, #100	@ 0x64
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	1acb      	subs	r3, r1, r3
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	3332      	adds	r3, #50	@ 0x32
 8003d2c:	4a33      	ldr	r2, [pc, #204]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d38:	441c      	add	r4, r3
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d42:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d48:	4642      	mov	r2, r8
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	1891      	adds	r1, r2, r2
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	415b      	adcs	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d58:	4641      	mov	r1, r8
 8003d5a:	1851      	adds	r1, r2, r1
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	414b      	adcs	r3, r1
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d70:	4659      	mov	r1, fp
 8003d72:	00cb      	lsls	r3, r1, #3
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	00ca      	lsls	r2, r1, #3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	4642      	mov	r2, r8
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	eb42 0303 	adc.w	r3, r2, r3
 8003d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dac:	4649      	mov	r1, r9
 8003dae:	008b      	lsls	r3, r1, #2
 8003db0:	4641      	mov	r1, r8
 8003db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db6:	4641      	mov	r1, r8
 8003db8:	008a      	lsls	r2, r1, #2
 8003dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dbe:	f7fc fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	@ 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	3332      	adds	r3, #50	@ 0x32
 8003dda:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <UART_SetConfig+0x4e4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4422      	add	r2, r4
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003df6:	46bd      	mov	sp, r7
 8003df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <siprintf>:
 8003e00:	b40e      	push	{r1, r2, r3}
 8003e02:	b510      	push	{r4, lr}
 8003e04:	b09d      	sub	sp, #116	@ 0x74
 8003e06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e08:	9002      	str	r0, [sp, #8]
 8003e0a:	9006      	str	r0, [sp, #24]
 8003e0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e10:	480a      	ldr	r0, [pc, #40]	@ (8003e3c <siprintf+0x3c>)
 8003e12:	9107      	str	r1, [sp, #28]
 8003e14:	9104      	str	r1, [sp, #16]
 8003e16:	490a      	ldr	r1, [pc, #40]	@ (8003e40 <siprintf+0x40>)
 8003e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1c:	9105      	str	r1, [sp, #20]
 8003e1e:	2400      	movs	r4, #0
 8003e20:	a902      	add	r1, sp, #8
 8003e22:	6800      	ldr	r0, [r0, #0]
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e28:	f000 f98c 	bl	8004144 <_svfiprintf_r>
 8003e2c:	9b02      	ldr	r3, [sp, #8]
 8003e2e:	701c      	strb	r4, [r3, #0]
 8003e30:	b01d      	add	sp, #116	@ 0x74
 8003e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e36:	b003      	add	sp, #12
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	ffff0208 	.word	0xffff0208

08003e44 <__errno>:
 8003e44:	4b01      	ldr	r3, [pc, #4]	@ (8003e4c <__errno+0x8>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <__libc_init_array>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	4d0d      	ldr	r5, [pc, #52]	@ (8003e88 <__libc_init_array+0x38>)
 8003e54:	4c0d      	ldr	r4, [pc, #52]	@ (8003e8c <__libc_init_array+0x3c>)
 8003e56:	1b64      	subs	r4, r4, r5
 8003e58:	10a4      	asrs	r4, r4, #2
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	d109      	bne.n	8003e74 <__libc_init_array+0x24>
 8003e60:	4d0b      	ldr	r5, [pc, #44]	@ (8003e90 <__libc_init_array+0x40>)
 8003e62:	4c0c      	ldr	r4, [pc, #48]	@ (8003e94 <__libc_init_array+0x44>)
 8003e64:	f000 fc64 	bl	8004730 <_init>
 8003e68:	1b64      	subs	r4, r4, r5
 8003e6a:	10a4      	asrs	r4, r4, #2
 8003e6c:	2600      	movs	r6, #0
 8003e6e:	42a6      	cmp	r6, r4
 8003e70:	d105      	bne.n	8003e7e <__libc_init_array+0x2e>
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
 8003e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e78:	4798      	blx	r3
 8003e7a:	3601      	adds	r6, #1
 8003e7c:	e7ee      	b.n	8003e5c <__libc_init_array+0xc>
 8003e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e82:	4798      	blx	r3
 8003e84:	3601      	adds	r6, #1
 8003e86:	e7f2      	b.n	8003e6e <__libc_init_array+0x1e>
 8003e88:	08004954 	.word	0x08004954
 8003e8c:	08004954 	.word	0x08004954
 8003e90:	08004954 	.word	0x08004954
 8003e94:	08004958 	.word	0x08004958

08003e98 <__retarget_lock_acquire_recursive>:
 8003e98:	4770      	bx	lr

08003e9a <__retarget_lock_release_recursive>:
 8003e9a:	4770      	bx	lr

08003e9c <_free_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4605      	mov	r5, r0
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	d041      	beq.n	8003f28 <_free_r+0x8c>
 8003ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea8:	1f0c      	subs	r4, r1, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bfb8      	it	lt
 8003eae:	18e4      	addlt	r4, r4, r3
 8003eb0:	f000 f8e0 	bl	8004074 <__malloc_lock>
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f2c <_free_r+0x90>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	b933      	cbnz	r3, 8003ec8 <_free_r+0x2c>
 8003eba:	6063      	str	r3, [r4, #4]
 8003ebc:	6014      	str	r4, [r2, #0]
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ec4:	f000 b8dc 	b.w	8004080 <__malloc_unlock>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d908      	bls.n	8003ede <_free_r+0x42>
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	1821      	adds	r1, r4, r0
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	bf01      	itttt	eq
 8003ed4:	6819      	ldreq	r1, [r3, #0]
 8003ed6:	685b      	ldreq	r3, [r3, #4]
 8003ed8:	1809      	addeq	r1, r1, r0
 8003eda:	6021      	streq	r1, [r4, #0]
 8003edc:	e7ed      	b.n	8003eba <_free_r+0x1e>
 8003ede:	461a      	mov	r2, r3
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	b10b      	cbz	r3, 8003ee8 <_free_r+0x4c>
 8003ee4:	42a3      	cmp	r3, r4
 8003ee6:	d9fa      	bls.n	8003ede <_free_r+0x42>
 8003ee8:	6811      	ldr	r1, [r2, #0]
 8003eea:	1850      	adds	r0, r2, r1
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d10b      	bne.n	8003f08 <_free_r+0x6c>
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	4401      	add	r1, r0
 8003ef4:	1850      	adds	r0, r2, r1
 8003ef6:	4283      	cmp	r3, r0
 8003ef8:	6011      	str	r1, [r2, #0]
 8003efa:	d1e0      	bne.n	8003ebe <_free_r+0x22>
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	6053      	str	r3, [r2, #4]
 8003f02:	4408      	add	r0, r1
 8003f04:	6010      	str	r0, [r2, #0]
 8003f06:	e7da      	b.n	8003ebe <_free_r+0x22>
 8003f08:	d902      	bls.n	8003f10 <_free_r+0x74>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	e7d6      	b.n	8003ebe <_free_r+0x22>
 8003f10:	6820      	ldr	r0, [r4, #0]
 8003f12:	1821      	adds	r1, r4, r0
 8003f14:	428b      	cmp	r3, r1
 8003f16:	bf04      	itt	eq
 8003f18:	6819      	ldreq	r1, [r3, #0]
 8003f1a:	685b      	ldreq	r3, [r3, #4]
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	bf04      	itt	eq
 8003f20:	1809      	addeq	r1, r1, r0
 8003f22:	6021      	streq	r1, [r4, #0]
 8003f24:	6054      	str	r4, [r2, #4]
 8003f26:	e7ca      	b.n	8003ebe <_free_r+0x22>
 8003f28:	bd38      	pop	{r3, r4, r5, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000298 	.word	0x20000298

08003f30 <sbrk_aligned>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4e0f      	ldr	r6, [pc, #60]	@ (8003f70 <sbrk_aligned+0x40>)
 8003f34:	460c      	mov	r4, r1
 8003f36:	6831      	ldr	r1, [r6, #0]
 8003f38:	4605      	mov	r5, r0
 8003f3a:	b911      	cbnz	r1, 8003f42 <sbrk_aligned+0x12>
 8003f3c:	f000 fba4 	bl	8004688 <_sbrk_r>
 8003f40:	6030      	str	r0, [r6, #0]
 8003f42:	4621      	mov	r1, r4
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 fb9f 	bl	8004688 <_sbrk_r>
 8003f4a:	1c43      	adds	r3, r0, #1
 8003f4c:	d103      	bne.n	8003f56 <sbrk_aligned+0x26>
 8003f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8003f52:	4620      	mov	r0, r4
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	1cc4      	adds	r4, r0, #3
 8003f58:	f024 0403 	bic.w	r4, r4, #3
 8003f5c:	42a0      	cmp	r0, r4
 8003f5e:	d0f8      	beq.n	8003f52 <sbrk_aligned+0x22>
 8003f60:	1a21      	subs	r1, r4, r0
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 fb90 	bl	8004688 <_sbrk_r>
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d1f2      	bne.n	8003f52 <sbrk_aligned+0x22>
 8003f6c:	e7ef      	b.n	8003f4e <sbrk_aligned+0x1e>
 8003f6e:	bf00      	nop
 8003f70:	20000294 	.word	0x20000294

08003f74 <_malloc_r>:
 8003f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f78:	1ccd      	adds	r5, r1, #3
 8003f7a:	f025 0503 	bic.w	r5, r5, #3
 8003f7e:	3508      	adds	r5, #8
 8003f80:	2d0c      	cmp	r5, #12
 8003f82:	bf38      	it	cc
 8003f84:	250c      	movcc	r5, #12
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	4606      	mov	r6, r0
 8003f8a:	db01      	blt.n	8003f90 <_malloc_r+0x1c>
 8003f8c:	42a9      	cmp	r1, r5
 8003f8e:	d904      	bls.n	8003f9a <_malloc_r+0x26>
 8003f90:	230c      	movs	r3, #12
 8003f92:	6033      	str	r3, [r6, #0]
 8003f94:	2000      	movs	r0, #0
 8003f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004070 <_malloc_r+0xfc>
 8003f9e:	f000 f869 	bl	8004074 <__malloc_lock>
 8003fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	bb44      	cbnz	r4, 8003ffc <_malloc_r+0x88>
 8003faa:	4629      	mov	r1, r5
 8003fac:	4630      	mov	r0, r6
 8003fae:	f7ff ffbf 	bl	8003f30 <sbrk_aligned>
 8003fb2:	1c43      	adds	r3, r0, #1
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	d158      	bne.n	800406a <_malloc_r+0xf6>
 8003fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8003fbc:	4627      	mov	r7, r4
 8003fbe:	2f00      	cmp	r7, #0
 8003fc0:	d143      	bne.n	800404a <_malloc_r+0xd6>
 8003fc2:	2c00      	cmp	r4, #0
 8003fc4:	d04b      	beq.n	800405e <_malloc_r+0xea>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	4639      	mov	r1, r7
 8003fca:	4630      	mov	r0, r6
 8003fcc:	eb04 0903 	add.w	r9, r4, r3
 8003fd0:	f000 fb5a 	bl	8004688 <_sbrk_r>
 8003fd4:	4581      	cmp	r9, r0
 8003fd6:	d142      	bne.n	800405e <_malloc_r+0xea>
 8003fd8:	6821      	ldr	r1, [r4, #0]
 8003fda:	1a6d      	subs	r5, r5, r1
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff ffa6 	bl	8003f30 <sbrk_aligned>
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d03a      	beq.n	800405e <_malloc_r+0xea>
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	442b      	add	r3, r5
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	bb62      	cbnz	r2, 8004050 <_malloc_r+0xdc>
 8003ff6:	f8c8 7000 	str.w	r7, [r8]
 8003ffa:	e00f      	b.n	800401c <_malloc_r+0xa8>
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	1b52      	subs	r2, r2, r5
 8004000:	d420      	bmi.n	8004044 <_malloc_r+0xd0>
 8004002:	2a0b      	cmp	r2, #11
 8004004:	d917      	bls.n	8004036 <_malloc_r+0xc2>
 8004006:	1961      	adds	r1, r4, r5
 8004008:	42a3      	cmp	r3, r4
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	bf18      	it	ne
 800400e:	6059      	strne	r1, [r3, #4]
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	bf08      	it	eq
 8004014:	f8c8 1000 	streq.w	r1, [r8]
 8004018:	5162      	str	r2, [r4, r5]
 800401a:	604b      	str	r3, [r1, #4]
 800401c:	4630      	mov	r0, r6
 800401e:	f000 f82f 	bl	8004080 <__malloc_unlock>
 8004022:	f104 000b 	add.w	r0, r4, #11
 8004026:	1d23      	adds	r3, r4, #4
 8004028:	f020 0007 	bic.w	r0, r0, #7
 800402c:	1ac2      	subs	r2, r0, r3
 800402e:	bf1c      	itt	ne
 8004030:	1a1b      	subne	r3, r3, r0
 8004032:	50a3      	strne	r3, [r4, r2]
 8004034:	e7af      	b.n	8003f96 <_malloc_r+0x22>
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	bf0c      	ite	eq
 800403c:	f8c8 2000 	streq.w	r2, [r8]
 8004040:	605a      	strne	r2, [r3, #4]
 8004042:	e7eb      	b.n	800401c <_malloc_r+0xa8>
 8004044:	4623      	mov	r3, r4
 8004046:	6864      	ldr	r4, [r4, #4]
 8004048:	e7ae      	b.n	8003fa8 <_malloc_r+0x34>
 800404a:	463c      	mov	r4, r7
 800404c:	687f      	ldr	r7, [r7, #4]
 800404e:	e7b6      	b.n	8003fbe <_malloc_r+0x4a>
 8004050:	461a      	mov	r2, r3
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	42a3      	cmp	r3, r4
 8004056:	d1fb      	bne.n	8004050 <_malloc_r+0xdc>
 8004058:	2300      	movs	r3, #0
 800405a:	6053      	str	r3, [r2, #4]
 800405c:	e7de      	b.n	800401c <_malloc_r+0xa8>
 800405e:	230c      	movs	r3, #12
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f80c 	bl	8004080 <__malloc_unlock>
 8004068:	e794      	b.n	8003f94 <_malloc_r+0x20>
 800406a:	6005      	str	r5, [r0, #0]
 800406c:	e7d6      	b.n	800401c <_malloc_r+0xa8>
 800406e:	bf00      	nop
 8004070:	20000298 	.word	0x20000298

08004074 <__malloc_lock>:
 8004074:	4801      	ldr	r0, [pc, #4]	@ (800407c <__malloc_lock+0x8>)
 8004076:	f7ff bf0f 	b.w	8003e98 <__retarget_lock_acquire_recursive>
 800407a:	bf00      	nop
 800407c:	20000290 	.word	0x20000290

08004080 <__malloc_unlock>:
 8004080:	4801      	ldr	r0, [pc, #4]	@ (8004088 <__malloc_unlock+0x8>)
 8004082:	f7ff bf0a 	b.w	8003e9a <__retarget_lock_release_recursive>
 8004086:	bf00      	nop
 8004088:	20000290 	.word	0x20000290

0800408c <__ssputs_r>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	688e      	ldr	r6, [r1, #8]
 8004092:	461f      	mov	r7, r3
 8004094:	42be      	cmp	r6, r7
 8004096:	680b      	ldr	r3, [r1, #0]
 8004098:	4682      	mov	sl, r0
 800409a:	460c      	mov	r4, r1
 800409c:	4690      	mov	r8, r2
 800409e:	d82d      	bhi.n	80040fc <__ssputs_r+0x70>
 80040a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040a8:	d026      	beq.n	80040f8 <__ssputs_r+0x6c>
 80040aa:	6965      	ldr	r5, [r4, #20]
 80040ac:	6909      	ldr	r1, [r1, #16]
 80040ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040b2:	eba3 0901 	sub.w	r9, r3, r1
 80040b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040ba:	1c7b      	adds	r3, r7, #1
 80040bc:	444b      	add	r3, r9
 80040be:	106d      	asrs	r5, r5, #1
 80040c0:	429d      	cmp	r5, r3
 80040c2:	bf38      	it	cc
 80040c4:	461d      	movcc	r5, r3
 80040c6:	0553      	lsls	r3, r2, #21
 80040c8:	d527      	bpl.n	800411a <__ssputs_r+0x8e>
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7ff ff52 	bl	8003f74 <_malloc_r>
 80040d0:	4606      	mov	r6, r0
 80040d2:	b360      	cbz	r0, 800412e <__ssputs_r+0xa2>
 80040d4:	6921      	ldr	r1, [r4, #16]
 80040d6:	464a      	mov	r2, r9
 80040d8:	f000 fae6 	bl	80046a8 <memcpy>
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	6126      	str	r6, [r4, #16]
 80040ea:	6165      	str	r5, [r4, #20]
 80040ec:	444e      	add	r6, r9
 80040ee:	eba5 0509 	sub.w	r5, r5, r9
 80040f2:	6026      	str	r6, [r4, #0]
 80040f4:	60a5      	str	r5, [r4, #8]
 80040f6:	463e      	mov	r6, r7
 80040f8:	42be      	cmp	r6, r7
 80040fa:	d900      	bls.n	80040fe <__ssputs_r+0x72>
 80040fc:	463e      	mov	r6, r7
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	4632      	mov	r2, r6
 8004102:	4641      	mov	r1, r8
 8004104:	f000 faa6 	bl	8004654 <memmove>
 8004108:	68a3      	ldr	r3, [r4, #8]
 800410a:	1b9b      	subs	r3, r3, r6
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	4433      	add	r3, r6
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	2000      	movs	r0, #0
 8004116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411a:	462a      	mov	r2, r5
 800411c:	f000 fad2 	bl	80046c4 <_realloc_r>
 8004120:	4606      	mov	r6, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d1e0      	bne.n	80040e8 <__ssputs_r+0x5c>
 8004126:	6921      	ldr	r1, [r4, #16]
 8004128:	4650      	mov	r0, sl
 800412a:	f7ff feb7 	bl	8003e9c <_free_r>
 800412e:	230c      	movs	r3, #12
 8004130:	f8ca 3000 	str.w	r3, [sl]
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	e7e9      	b.n	8004116 <__ssputs_r+0x8a>
	...

08004144 <_svfiprintf_r>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	4698      	mov	r8, r3
 800414a:	898b      	ldrh	r3, [r1, #12]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	b09d      	sub	sp, #116	@ 0x74
 8004150:	4607      	mov	r7, r0
 8004152:	460d      	mov	r5, r1
 8004154:	4614      	mov	r4, r2
 8004156:	d510      	bpl.n	800417a <_svfiprintf_r+0x36>
 8004158:	690b      	ldr	r3, [r1, #16]
 800415a:	b973      	cbnz	r3, 800417a <_svfiprintf_r+0x36>
 800415c:	2140      	movs	r1, #64	@ 0x40
 800415e:	f7ff ff09 	bl	8003f74 <_malloc_r>
 8004162:	6028      	str	r0, [r5, #0]
 8004164:	6128      	str	r0, [r5, #16]
 8004166:	b930      	cbnz	r0, 8004176 <_svfiprintf_r+0x32>
 8004168:	230c      	movs	r3, #12
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	b01d      	add	sp, #116	@ 0x74
 8004172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004176:	2340      	movs	r3, #64	@ 0x40
 8004178:	616b      	str	r3, [r5, #20]
 800417a:	2300      	movs	r3, #0
 800417c:	9309      	str	r3, [sp, #36]	@ 0x24
 800417e:	2320      	movs	r3, #32
 8004180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004184:	f8cd 800c 	str.w	r8, [sp, #12]
 8004188:	2330      	movs	r3, #48	@ 0x30
 800418a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004328 <_svfiprintf_r+0x1e4>
 800418e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004192:	f04f 0901 	mov.w	r9, #1
 8004196:	4623      	mov	r3, r4
 8004198:	469a      	mov	sl, r3
 800419a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800419e:	b10a      	cbz	r2, 80041a4 <_svfiprintf_r+0x60>
 80041a0:	2a25      	cmp	r2, #37	@ 0x25
 80041a2:	d1f9      	bne.n	8004198 <_svfiprintf_r+0x54>
 80041a4:	ebba 0b04 	subs.w	fp, sl, r4
 80041a8:	d00b      	beq.n	80041c2 <_svfiprintf_r+0x7e>
 80041aa:	465b      	mov	r3, fp
 80041ac:	4622      	mov	r2, r4
 80041ae:	4629      	mov	r1, r5
 80041b0:	4638      	mov	r0, r7
 80041b2:	f7ff ff6b 	bl	800408c <__ssputs_r>
 80041b6:	3001      	adds	r0, #1
 80041b8:	f000 80a7 	beq.w	800430a <_svfiprintf_r+0x1c6>
 80041bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041be:	445a      	add	r2, fp
 80041c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80041c2:	f89a 3000 	ldrb.w	r3, [sl]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 809f 	beq.w	800430a <_svfiprintf_r+0x1c6>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d6:	f10a 0a01 	add.w	sl, sl, #1
 80041da:	9304      	str	r3, [sp, #16]
 80041dc:	9307      	str	r3, [sp, #28]
 80041de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80041e4:	4654      	mov	r4, sl
 80041e6:	2205      	movs	r2, #5
 80041e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ec:	484e      	ldr	r0, [pc, #312]	@ (8004328 <_svfiprintf_r+0x1e4>)
 80041ee:	f7fc f817 	bl	8000220 <memchr>
 80041f2:	9a04      	ldr	r2, [sp, #16]
 80041f4:	b9d8      	cbnz	r0, 800422e <_svfiprintf_r+0xea>
 80041f6:	06d0      	lsls	r0, r2, #27
 80041f8:	bf44      	itt	mi
 80041fa:	2320      	movmi	r3, #32
 80041fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004200:	0711      	lsls	r1, r2, #28
 8004202:	bf44      	itt	mi
 8004204:	232b      	movmi	r3, #43	@ 0x2b
 8004206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800420a:	f89a 3000 	ldrb.w	r3, [sl]
 800420e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004210:	d015      	beq.n	800423e <_svfiprintf_r+0xfa>
 8004212:	9a07      	ldr	r2, [sp, #28]
 8004214:	4654      	mov	r4, sl
 8004216:	2000      	movs	r0, #0
 8004218:	f04f 0c0a 	mov.w	ip, #10
 800421c:	4621      	mov	r1, r4
 800421e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004222:	3b30      	subs	r3, #48	@ 0x30
 8004224:	2b09      	cmp	r3, #9
 8004226:	d94b      	bls.n	80042c0 <_svfiprintf_r+0x17c>
 8004228:	b1b0      	cbz	r0, 8004258 <_svfiprintf_r+0x114>
 800422a:	9207      	str	r2, [sp, #28]
 800422c:	e014      	b.n	8004258 <_svfiprintf_r+0x114>
 800422e:	eba0 0308 	sub.w	r3, r0, r8
 8004232:	fa09 f303 	lsl.w	r3, r9, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	46a2      	mov	sl, r4
 800423c:	e7d2      	b.n	80041e4 <_svfiprintf_r+0xa0>
 800423e:	9b03      	ldr	r3, [sp, #12]
 8004240:	1d19      	adds	r1, r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	9103      	str	r1, [sp, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	bfbb      	ittet	lt
 800424a:	425b      	neglt	r3, r3
 800424c:	f042 0202 	orrlt.w	r2, r2, #2
 8004250:	9307      	strge	r3, [sp, #28]
 8004252:	9307      	strlt	r3, [sp, #28]
 8004254:	bfb8      	it	lt
 8004256:	9204      	strlt	r2, [sp, #16]
 8004258:	7823      	ldrb	r3, [r4, #0]
 800425a:	2b2e      	cmp	r3, #46	@ 0x2e
 800425c:	d10a      	bne.n	8004274 <_svfiprintf_r+0x130>
 800425e:	7863      	ldrb	r3, [r4, #1]
 8004260:	2b2a      	cmp	r3, #42	@ 0x2a
 8004262:	d132      	bne.n	80042ca <_svfiprintf_r+0x186>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	9203      	str	r2, [sp, #12]
 800426c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004270:	3402      	adds	r4, #2
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004338 <_svfiprintf_r+0x1f4>
 8004278:	7821      	ldrb	r1, [r4, #0]
 800427a:	2203      	movs	r2, #3
 800427c:	4650      	mov	r0, sl
 800427e:	f7fb ffcf 	bl	8000220 <memchr>
 8004282:	b138      	cbz	r0, 8004294 <_svfiprintf_r+0x150>
 8004284:	9b04      	ldr	r3, [sp, #16]
 8004286:	eba0 000a 	sub.w	r0, r0, sl
 800428a:	2240      	movs	r2, #64	@ 0x40
 800428c:	4082      	lsls	r2, r0
 800428e:	4313      	orrs	r3, r2
 8004290:	3401      	adds	r4, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004298:	4824      	ldr	r0, [pc, #144]	@ (800432c <_svfiprintf_r+0x1e8>)
 800429a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800429e:	2206      	movs	r2, #6
 80042a0:	f7fb ffbe 	bl	8000220 <memchr>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d036      	beq.n	8004316 <_svfiprintf_r+0x1d2>
 80042a8:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <_svfiprintf_r+0x1ec>)
 80042aa:	bb1b      	cbnz	r3, 80042f4 <_svfiprintf_r+0x1b0>
 80042ac:	9b03      	ldr	r3, [sp, #12]
 80042ae:	3307      	adds	r3, #7
 80042b0:	f023 0307 	bic.w	r3, r3, #7
 80042b4:	3308      	adds	r3, #8
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ba:	4433      	add	r3, r6
 80042bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80042be:	e76a      	b.n	8004196 <_svfiprintf_r+0x52>
 80042c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80042c4:	460c      	mov	r4, r1
 80042c6:	2001      	movs	r0, #1
 80042c8:	e7a8      	b.n	800421c <_svfiprintf_r+0xd8>
 80042ca:	2300      	movs	r3, #0
 80042cc:	3401      	adds	r4, #1
 80042ce:	9305      	str	r3, [sp, #20]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0c0a 	mov.w	ip, #10
 80042d6:	4620      	mov	r0, r4
 80042d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042dc:	3a30      	subs	r2, #48	@ 0x30
 80042de:	2a09      	cmp	r2, #9
 80042e0:	d903      	bls.n	80042ea <_svfiprintf_r+0x1a6>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0c6      	beq.n	8004274 <_svfiprintf_r+0x130>
 80042e6:	9105      	str	r1, [sp, #20]
 80042e8:	e7c4      	b.n	8004274 <_svfiprintf_r+0x130>
 80042ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ee:	4604      	mov	r4, r0
 80042f0:	2301      	movs	r3, #1
 80042f2:	e7f0      	b.n	80042d6 <_svfiprintf_r+0x192>
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	462a      	mov	r2, r5
 80042fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <_svfiprintf_r+0x1f0>)
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4638      	mov	r0, r7
 8004300:	f3af 8000 	nop.w
 8004304:	1c42      	adds	r2, r0, #1
 8004306:	4606      	mov	r6, r0
 8004308:	d1d6      	bne.n	80042b8 <_svfiprintf_r+0x174>
 800430a:	89ab      	ldrh	r3, [r5, #12]
 800430c:	065b      	lsls	r3, r3, #25
 800430e:	f53f af2d 	bmi.w	800416c <_svfiprintf_r+0x28>
 8004312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004314:	e72c      	b.n	8004170 <_svfiprintf_r+0x2c>
 8004316:	ab03      	add	r3, sp, #12
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	462a      	mov	r2, r5
 800431c:	4b05      	ldr	r3, [pc, #20]	@ (8004334 <_svfiprintf_r+0x1f0>)
 800431e:	a904      	add	r1, sp, #16
 8004320:	4638      	mov	r0, r7
 8004322:	f000 f879 	bl	8004418 <_printf_i>
 8004326:	e7ed      	b.n	8004304 <_svfiprintf_r+0x1c0>
 8004328:	08004918 	.word	0x08004918
 800432c:	08004922 	.word	0x08004922
 8004330:	00000000 	.word	0x00000000
 8004334:	0800408d 	.word	0x0800408d
 8004338:	0800491e 	.word	0x0800491e

0800433c <_printf_common>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	4616      	mov	r6, r2
 8004342:	4698      	mov	r8, r3
 8004344:	688a      	ldr	r2, [r1, #8]
 8004346:	690b      	ldr	r3, [r1, #16]
 8004348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800434c:	4293      	cmp	r3, r2
 800434e:	bfb8      	it	lt
 8004350:	4613      	movlt	r3, r2
 8004352:	6033      	str	r3, [r6, #0]
 8004354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004358:	4607      	mov	r7, r0
 800435a:	460c      	mov	r4, r1
 800435c:	b10a      	cbz	r2, 8004362 <_printf_common+0x26>
 800435e:	3301      	adds	r3, #1
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	0699      	lsls	r1, r3, #26
 8004366:	bf42      	ittt	mi
 8004368:	6833      	ldrmi	r3, [r6, #0]
 800436a:	3302      	addmi	r3, #2
 800436c:	6033      	strmi	r3, [r6, #0]
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	f015 0506 	ands.w	r5, r5, #6
 8004374:	d106      	bne.n	8004384 <_printf_common+0x48>
 8004376:	f104 0a19 	add.w	sl, r4, #25
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	6832      	ldr	r2, [r6, #0]
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	42ab      	cmp	r3, r5
 8004382:	dc26      	bgt.n	80043d2 <_printf_common+0x96>
 8004384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	3b00      	subs	r3, #0
 800438c:	bf18      	it	ne
 800438e:	2301      	movne	r3, #1
 8004390:	0692      	lsls	r2, r2, #26
 8004392:	d42b      	bmi.n	80043ec <_printf_common+0xb0>
 8004394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004398:	4641      	mov	r1, r8
 800439a:	4638      	mov	r0, r7
 800439c:	47c8      	blx	r9
 800439e:	3001      	adds	r0, #1
 80043a0:	d01e      	beq.n	80043e0 <_printf_common+0xa4>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	6922      	ldr	r2, [r4, #16]
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	bf02      	ittt	eq
 80043ae:	68e5      	ldreq	r5, [r4, #12]
 80043b0:	6833      	ldreq	r3, [r6, #0]
 80043b2:	1aed      	subeq	r5, r5, r3
 80043b4:	68a3      	ldr	r3, [r4, #8]
 80043b6:	bf0c      	ite	eq
 80043b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043bc:	2500      	movne	r5, #0
 80043be:	4293      	cmp	r3, r2
 80043c0:	bfc4      	itt	gt
 80043c2:	1a9b      	subgt	r3, r3, r2
 80043c4:	18ed      	addgt	r5, r5, r3
 80043c6:	2600      	movs	r6, #0
 80043c8:	341a      	adds	r4, #26
 80043ca:	42b5      	cmp	r5, r6
 80043cc:	d11a      	bne.n	8004404 <_printf_common+0xc8>
 80043ce:	2000      	movs	r0, #0
 80043d0:	e008      	b.n	80043e4 <_printf_common+0xa8>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4652      	mov	r2, sl
 80043d6:	4641      	mov	r1, r8
 80043d8:	4638      	mov	r0, r7
 80043da:	47c8      	blx	r9
 80043dc:	3001      	adds	r0, #1
 80043de:	d103      	bne.n	80043e8 <_printf_common+0xac>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	3501      	adds	r5, #1
 80043ea:	e7c6      	b.n	800437a <_printf_common+0x3e>
 80043ec:	18e1      	adds	r1, r4, r3
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	2030      	movs	r0, #48	@ 0x30
 80043f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043f6:	4422      	add	r2, r4
 80043f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004400:	3302      	adds	r3, #2
 8004402:	e7c7      	b.n	8004394 <_printf_common+0x58>
 8004404:	2301      	movs	r3, #1
 8004406:	4622      	mov	r2, r4
 8004408:	4641      	mov	r1, r8
 800440a:	4638      	mov	r0, r7
 800440c:	47c8      	blx	r9
 800440e:	3001      	adds	r0, #1
 8004410:	d0e6      	beq.n	80043e0 <_printf_common+0xa4>
 8004412:	3601      	adds	r6, #1
 8004414:	e7d9      	b.n	80043ca <_printf_common+0x8e>
	...

08004418 <_printf_i>:
 8004418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	7e0f      	ldrb	r7, [r1, #24]
 800441e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004420:	2f78      	cmp	r7, #120	@ 0x78
 8004422:	4691      	mov	r9, r2
 8004424:	4680      	mov	r8, r0
 8004426:	460c      	mov	r4, r1
 8004428:	469a      	mov	sl, r3
 800442a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800442e:	d807      	bhi.n	8004440 <_printf_i+0x28>
 8004430:	2f62      	cmp	r7, #98	@ 0x62
 8004432:	d80a      	bhi.n	800444a <_printf_i+0x32>
 8004434:	2f00      	cmp	r7, #0
 8004436:	f000 80d1 	beq.w	80045dc <_printf_i+0x1c4>
 800443a:	2f58      	cmp	r7, #88	@ 0x58
 800443c:	f000 80b8 	beq.w	80045b0 <_printf_i+0x198>
 8004440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004448:	e03a      	b.n	80044c0 <_printf_i+0xa8>
 800444a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800444e:	2b15      	cmp	r3, #21
 8004450:	d8f6      	bhi.n	8004440 <_printf_i+0x28>
 8004452:	a101      	add	r1, pc, #4	@ (adr r1, 8004458 <_printf_i+0x40>)
 8004454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004458:	080044b1 	.word	0x080044b1
 800445c:	080044c5 	.word	0x080044c5
 8004460:	08004441 	.word	0x08004441
 8004464:	08004441 	.word	0x08004441
 8004468:	08004441 	.word	0x08004441
 800446c:	08004441 	.word	0x08004441
 8004470:	080044c5 	.word	0x080044c5
 8004474:	08004441 	.word	0x08004441
 8004478:	08004441 	.word	0x08004441
 800447c:	08004441 	.word	0x08004441
 8004480:	08004441 	.word	0x08004441
 8004484:	080045c3 	.word	0x080045c3
 8004488:	080044ef 	.word	0x080044ef
 800448c:	0800457d 	.word	0x0800457d
 8004490:	08004441 	.word	0x08004441
 8004494:	08004441 	.word	0x08004441
 8004498:	080045e5 	.word	0x080045e5
 800449c:	08004441 	.word	0x08004441
 80044a0:	080044ef 	.word	0x080044ef
 80044a4:	08004441 	.word	0x08004441
 80044a8:	08004441 	.word	0x08004441
 80044ac:	08004585 	.word	0x08004585
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6032      	str	r2, [r6, #0]
 80044b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044c0:	2301      	movs	r3, #1
 80044c2:	e09c      	b.n	80045fe <_printf_i+0x1e6>
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	1d19      	adds	r1, r3, #4
 80044ca:	6031      	str	r1, [r6, #0]
 80044cc:	0606      	lsls	r6, r0, #24
 80044ce:	d501      	bpl.n	80044d4 <_printf_i+0xbc>
 80044d0:	681d      	ldr	r5, [r3, #0]
 80044d2:	e003      	b.n	80044dc <_printf_i+0xc4>
 80044d4:	0645      	lsls	r5, r0, #25
 80044d6:	d5fb      	bpl.n	80044d0 <_printf_i+0xb8>
 80044d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044dc:	2d00      	cmp	r5, #0
 80044de:	da03      	bge.n	80044e8 <_printf_i+0xd0>
 80044e0:	232d      	movs	r3, #45	@ 0x2d
 80044e2:	426d      	negs	r5, r5
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e8:	4858      	ldr	r0, [pc, #352]	@ (800464c <_printf_i+0x234>)
 80044ea:	230a      	movs	r3, #10
 80044ec:	e011      	b.n	8004512 <_printf_i+0xfa>
 80044ee:	6821      	ldr	r1, [r4, #0]
 80044f0:	6833      	ldr	r3, [r6, #0]
 80044f2:	0608      	lsls	r0, r1, #24
 80044f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80044f8:	d402      	bmi.n	8004500 <_printf_i+0xe8>
 80044fa:	0649      	lsls	r1, r1, #25
 80044fc:	bf48      	it	mi
 80044fe:	b2ad      	uxthmi	r5, r5
 8004500:	2f6f      	cmp	r7, #111	@ 0x6f
 8004502:	4852      	ldr	r0, [pc, #328]	@ (800464c <_printf_i+0x234>)
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	bf14      	ite	ne
 8004508:	230a      	movne	r3, #10
 800450a:	2308      	moveq	r3, #8
 800450c:	2100      	movs	r1, #0
 800450e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004512:	6866      	ldr	r6, [r4, #4]
 8004514:	60a6      	str	r6, [r4, #8]
 8004516:	2e00      	cmp	r6, #0
 8004518:	db05      	blt.n	8004526 <_printf_i+0x10e>
 800451a:	6821      	ldr	r1, [r4, #0]
 800451c:	432e      	orrs	r6, r5
 800451e:	f021 0104 	bic.w	r1, r1, #4
 8004522:	6021      	str	r1, [r4, #0]
 8004524:	d04b      	beq.n	80045be <_printf_i+0x1a6>
 8004526:	4616      	mov	r6, r2
 8004528:	fbb5 f1f3 	udiv	r1, r5, r3
 800452c:	fb03 5711 	mls	r7, r3, r1, r5
 8004530:	5dc7      	ldrb	r7, [r0, r7]
 8004532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004536:	462f      	mov	r7, r5
 8004538:	42bb      	cmp	r3, r7
 800453a:	460d      	mov	r5, r1
 800453c:	d9f4      	bls.n	8004528 <_printf_i+0x110>
 800453e:	2b08      	cmp	r3, #8
 8004540:	d10b      	bne.n	800455a <_printf_i+0x142>
 8004542:	6823      	ldr	r3, [r4, #0]
 8004544:	07df      	lsls	r7, r3, #31
 8004546:	d508      	bpl.n	800455a <_printf_i+0x142>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	6861      	ldr	r1, [r4, #4]
 800454c:	4299      	cmp	r1, r3
 800454e:	bfde      	ittt	le
 8004550:	2330      	movle	r3, #48	@ 0x30
 8004552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800455a:	1b92      	subs	r2, r2, r6
 800455c:	6122      	str	r2, [r4, #16]
 800455e:	f8cd a000 	str.w	sl, [sp]
 8004562:	464b      	mov	r3, r9
 8004564:	aa03      	add	r2, sp, #12
 8004566:	4621      	mov	r1, r4
 8004568:	4640      	mov	r0, r8
 800456a:	f7ff fee7 	bl	800433c <_printf_common>
 800456e:	3001      	adds	r0, #1
 8004570:	d14a      	bne.n	8004608 <_printf_i+0x1f0>
 8004572:	f04f 30ff 	mov.w	r0, #4294967295
 8004576:	b004      	add	sp, #16
 8004578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	f043 0320 	orr.w	r3, r3, #32
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	4832      	ldr	r0, [pc, #200]	@ (8004650 <_printf_i+0x238>)
 8004586:	2778      	movs	r7, #120	@ 0x78
 8004588:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	6831      	ldr	r1, [r6, #0]
 8004590:	061f      	lsls	r7, r3, #24
 8004592:	f851 5b04 	ldr.w	r5, [r1], #4
 8004596:	d402      	bmi.n	800459e <_printf_i+0x186>
 8004598:	065f      	lsls	r7, r3, #25
 800459a:	bf48      	it	mi
 800459c:	b2ad      	uxthmi	r5, r5
 800459e:	6031      	str	r1, [r6, #0]
 80045a0:	07d9      	lsls	r1, r3, #31
 80045a2:	bf44      	itt	mi
 80045a4:	f043 0320 	orrmi.w	r3, r3, #32
 80045a8:	6023      	strmi	r3, [r4, #0]
 80045aa:	b11d      	cbz	r5, 80045b4 <_printf_i+0x19c>
 80045ac:	2310      	movs	r3, #16
 80045ae:	e7ad      	b.n	800450c <_printf_i+0xf4>
 80045b0:	4826      	ldr	r0, [pc, #152]	@ (800464c <_printf_i+0x234>)
 80045b2:	e7e9      	b.n	8004588 <_printf_i+0x170>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f023 0320 	bic.w	r3, r3, #32
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	e7f6      	b.n	80045ac <_printf_i+0x194>
 80045be:	4616      	mov	r6, r2
 80045c0:	e7bd      	b.n	800453e <_printf_i+0x126>
 80045c2:	6833      	ldr	r3, [r6, #0]
 80045c4:	6825      	ldr	r5, [r4, #0]
 80045c6:	6961      	ldr	r1, [r4, #20]
 80045c8:	1d18      	adds	r0, r3, #4
 80045ca:	6030      	str	r0, [r6, #0]
 80045cc:	062e      	lsls	r6, r5, #24
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	d501      	bpl.n	80045d6 <_printf_i+0x1be>
 80045d2:	6019      	str	r1, [r3, #0]
 80045d4:	e002      	b.n	80045dc <_printf_i+0x1c4>
 80045d6:	0668      	lsls	r0, r5, #25
 80045d8:	d5fb      	bpl.n	80045d2 <_printf_i+0x1ba>
 80045da:	8019      	strh	r1, [r3, #0]
 80045dc:	2300      	movs	r3, #0
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	4616      	mov	r6, r2
 80045e2:	e7bc      	b.n	800455e <_printf_i+0x146>
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	1d1a      	adds	r2, r3, #4
 80045e8:	6032      	str	r2, [r6, #0]
 80045ea:	681e      	ldr	r6, [r3, #0]
 80045ec:	6862      	ldr	r2, [r4, #4]
 80045ee:	2100      	movs	r1, #0
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7fb fe15 	bl	8000220 <memchr>
 80045f6:	b108      	cbz	r0, 80045fc <_printf_i+0x1e4>
 80045f8:	1b80      	subs	r0, r0, r6
 80045fa:	6060      	str	r0, [r4, #4]
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	6123      	str	r3, [r4, #16]
 8004600:	2300      	movs	r3, #0
 8004602:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004606:	e7aa      	b.n	800455e <_printf_i+0x146>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	4632      	mov	r2, r6
 800460c:	4649      	mov	r1, r9
 800460e:	4640      	mov	r0, r8
 8004610:	47d0      	blx	sl
 8004612:	3001      	adds	r0, #1
 8004614:	d0ad      	beq.n	8004572 <_printf_i+0x15a>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	079b      	lsls	r3, r3, #30
 800461a:	d413      	bmi.n	8004644 <_printf_i+0x22c>
 800461c:	68e0      	ldr	r0, [r4, #12]
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	4298      	cmp	r0, r3
 8004622:	bfb8      	it	lt
 8004624:	4618      	movlt	r0, r3
 8004626:	e7a6      	b.n	8004576 <_printf_i+0x15e>
 8004628:	2301      	movs	r3, #1
 800462a:	4632      	mov	r2, r6
 800462c:	4649      	mov	r1, r9
 800462e:	4640      	mov	r0, r8
 8004630:	47d0      	blx	sl
 8004632:	3001      	adds	r0, #1
 8004634:	d09d      	beq.n	8004572 <_printf_i+0x15a>
 8004636:	3501      	adds	r5, #1
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	9903      	ldr	r1, [sp, #12]
 800463c:	1a5b      	subs	r3, r3, r1
 800463e:	42ab      	cmp	r3, r5
 8004640:	dcf2      	bgt.n	8004628 <_printf_i+0x210>
 8004642:	e7eb      	b.n	800461c <_printf_i+0x204>
 8004644:	2500      	movs	r5, #0
 8004646:	f104 0619 	add.w	r6, r4, #25
 800464a:	e7f5      	b.n	8004638 <_printf_i+0x220>
 800464c:	08004929 	.word	0x08004929
 8004650:	0800493a 	.word	0x0800493a

08004654 <memmove>:
 8004654:	4288      	cmp	r0, r1
 8004656:	b510      	push	{r4, lr}
 8004658:	eb01 0402 	add.w	r4, r1, r2
 800465c:	d902      	bls.n	8004664 <memmove+0x10>
 800465e:	4284      	cmp	r4, r0
 8004660:	4623      	mov	r3, r4
 8004662:	d807      	bhi.n	8004674 <memmove+0x20>
 8004664:	1e43      	subs	r3, r0, #1
 8004666:	42a1      	cmp	r1, r4
 8004668:	d008      	beq.n	800467c <memmove+0x28>
 800466a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800466e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004672:	e7f8      	b.n	8004666 <memmove+0x12>
 8004674:	4402      	add	r2, r0
 8004676:	4601      	mov	r1, r0
 8004678:	428a      	cmp	r2, r1
 800467a:	d100      	bne.n	800467e <memmove+0x2a>
 800467c:	bd10      	pop	{r4, pc}
 800467e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004686:	e7f7      	b.n	8004678 <memmove+0x24>

08004688 <_sbrk_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4d06      	ldr	r5, [pc, #24]	@ (80046a4 <_sbrk_r+0x1c>)
 800468c:	2300      	movs	r3, #0
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	602b      	str	r3, [r5, #0]
 8004694:	f7fc fcf2 	bl	800107c <_sbrk>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_sbrk_r+0x1a>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_sbrk_r+0x1a>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	2000028c 	.word	0x2000028c

080046a8 <memcpy>:
 80046a8:	440a      	add	r2, r1
 80046aa:	4291      	cmp	r1, r2
 80046ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b0:	d100      	bne.n	80046b4 <memcpy+0xc>
 80046b2:	4770      	bx	lr
 80046b4:	b510      	push	{r4, lr}
 80046b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046be:	4291      	cmp	r1, r2
 80046c0:	d1f9      	bne.n	80046b6 <memcpy+0xe>
 80046c2:	bd10      	pop	{r4, pc}

080046c4 <_realloc_r>:
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	4607      	mov	r7, r0
 80046ca:	4614      	mov	r4, r2
 80046cc:	460d      	mov	r5, r1
 80046ce:	b921      	cbnz	r1, 80046da <_realloc_r+0x16>
 80046d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d4:	4611      	mov	r1, r2
 80046d6:	f7ff bc4d 	b.w	8003f74 <_malloc_r>
 80046da:	b92a      	cbnz	r2, 80046e8 <_realloc_r+0x24>
 80046dc:	f7ff fbde 	bl	8003e9c <_free_r>
 80046e0:	4625      	mov	r5, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e8:	f000 f81a 	bl	8004720 <_malloc_usable_size_r>
 80046ec:	4284      	cmp	r4, r0
 80046ee:	4606      	mov	r6, r0
 80046f0:	d802      	bhi.n	80046f8 <_realloc_r+0x34>
 80046f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046f6:	d8f4      	bhi.n	80046e2 <_realloc_r+0x1e>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4638      	mov	r0, r7
 80046fc:	f7ff fc3a 	bl	8003f74 <_malloc_r>
 8004700:	4680      	mov	r8, r0
 8004702:	b908      	cbnz	r0, 8004708 <_realloc_r+0x44>
 8004704:	4645      	mov	r5, r8
 8004706:	e7ec      	b.n	80046e2 <_realloc_r+0x1e>
 8004708:	42b4      	cmp	r4, r6
 800470a:	4622      	mov	r2, r4
 800470c:	4629      	mov	r1, r5
 800470e:	bf28      	it	cs
 8004710:	4632      	movcs	r2, r6
 8004712:	f7ff ffc9 	bl	80046a8 <memcpy>
 8004716:	4629      	mov	r1, r5
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff fbbf 	bl	8003e9c <_free_r>
 800471e:	e7f1      	b.n	8004704 <_realloc_r+0x40>

08004720 <_malloc_usable_size_r>:
 8004720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004724:	1f18      	subs	r0, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bfbc      	itt	lt
 800472a:	580b      	ldrlt	r3, [r1, r0]
 800472c:	18c0      	addlt	r0, r0, r3
 800472e:	4770      	bx	lr

08004730 <_init>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	bf00      	nop
 8004734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004736:	bc08      	pop	{r3}
 8004738:	469e      	mov	lr, r3
 800473a:	4770      	bx	lr

0800473c <_fini>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr
