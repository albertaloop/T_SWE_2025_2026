
LED_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00006e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e30  08005e30  00006e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  20000060  08005e94  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011d8  08005e94  000071d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b4  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  00013a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000159e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b7  00000000  00000000  00016680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022263  00000000  00000000  00017037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e808  00000000  00000000  0003929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e5e  00000000  00000000  00047aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119900  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  00119944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0011d334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d4c 	.word	0x08005d4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005d4c 	.word	0x08005d4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <HAL_TIM_PWM_PulseFinishedCallback>:

volatile uint8_t datasentflag   = 1;
volatile uint8_t state_changed = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d106      	bne.n	80005fc <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	    {
	        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80005ee:	2100      	movs	r1, #0
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80005f2:	f003 fec5 	bl	8004380 <HAL_TIM_PWM_Stop_DMA>
	        datasentflag = 1;              // allow next frame
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
	    }
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010000 	.word	0x40010000
 8000608:	200000a4 	.word	0x200000a4
 800060c:	20000000 	.word	0x20000000

08000610 <Set_LED>:

void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	@ 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	6178      	str	r0, [r7, #20]
 8000618:	6139      	str	r1, [r7, #16]
 800061a:	60fa      	str	r2, [r7, #12]
 800061c:	60bb      	str	r3, [r7, #8]
    float brightness_scale = 0.4f;  // 40% brightness
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <Set_LED+0xa4>)
 8000620:	61fb      	str	r3, [r7, #28]

    LED_Data[LEDnum][0] = LEDnum;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	b2d9      	uxtb	r1, r3
 8000626:	4a24      	ldr	r2, [pc, #144]	@ (80006b8 <Set_LED+0xa8>)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = (int)(Green * brightness_scale);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000638:	edd7 7a07 	vldr	s15, [r7, #28]
 800063c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000644:	edc7 7a01 	vstr	s15, [r7, #4]
 8000648:	7939      	ldrb	r1, [r7, #4]
 800064a:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <Set_LED+0xa8>)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	460a      	mov	r2, r1
 8000654:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = (int)(Red * brightness_scale);
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000660:	edd7 7a07 	vldr	s15, [r7, #28]
 8000664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800066c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000670:	7939      	ldrb	r1, [r7, #4]
 8000672:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <Set_LED+0xa8>)
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	460a      	mov	r2, r1
 800067c:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = (int)(Blue * brightness_scale);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000688:	edd7 7a07 	vldr	s15, [r7, #28]
 800068c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000694:	edc7 7a01 	vstr	s15, [r7, #4]
 8000698:	7939      	ldrb	r1, [r7, #4]
 800069a:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <Set_LED+0xa8>)
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	460a      	mov	r2, r1
 80006a4:	70da      	strb	r2, [r3, #3]
}
 80006a6:	bf00      	nop
 80006a8:	3724      	adds	r7, #36	@ 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	3ecccccd 	.word	0x3ecccccd
 80006b8:	2000031c 	.word	0x2000031c

080006bc <WS2812_Send>:
}

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
	if (!datasentflag) return;
 80006c2:	4b32      	ldr	r3, [pc, #200]	@ (800078c <WS2812_Send+0xd0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d05a      	beq.n	8000782 <WS2812_Send+0xc6>
	    datasentflag = 0;
 80006cc:	4b2f      	ldr	r3, [pc, #188]	@ (800078c <WS2812_Send+0xd0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	uint32_t indx=0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	e036      	b.n	800074a <WS2812_Send+0x8e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80006dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000790 <WS2812_Send+0xd4>)
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	041a      	lsls	r2, r3, #16
 80006e8:	4929      	ldr	r1, [pc, #164]	@ (8000790 <WS2812_Send+0xd4>)
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	440b      	add	r3, r1
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	431a      	orrs	r2, r3
 80006f6:	4926      	ldr	r1, [pc, #152]	@ (8000790 <WS2812_Send+0xd4>)
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	4313      	orrs	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8000704:	2317      	movs	r3, #23
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e019      	b.n	800073e <WS2812_Send+0x82>
//				pwmData[indx] = 60;  // 2/3 of 90
//			}
//
//			else pwmData[indx] = 30;  // 1/3 of 90

			if (color & (1 << i))
 800070a:	2201      	movs	r2, #1
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4013      	ands	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <WS2812_Send+0x6c>
			    pwmData[indx] = 42;  // 2/3 of 63
 800071c:	4a1d      	ldr	r2, [pc, #116]	@ (8000794 <WS2812_Send+0xd8>)
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	212a      	movs	r1, #42	@ 0x2a
 8000722:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000726:	e004      	b.n	8000732 <WS2812_Send+0x76>
			else
			    pwmData[indx] = 21;  // 1/3 of 63
 8000728:	4a1a      	ldr	r2, [pc, #104]	@ (8000794 <WS2812_Send+0xd8>)
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2115      	movs	r1, #21
 800072e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


			indx++;
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3b01      	subs	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	dae2      	bge.n	800070a <WS2812_Send+0x4e>
	for (int i= 0; i<MAX_LED; i++)
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	3301      	adds	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b3f      	cmp	r3, #63	@ 0x3f
 800074e:	ddc5      	ble.n	80006dc <WS2812_Send+0x20>
		}

	}

	for (int i=0; i<50; i++)
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	e00a      	b.n	800076c <WS2812_Send+0xb0>
	{
		pwmData[indx] = 0;
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <WS2812_Send+0xd8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	2100      	movs	r1, #0
 800075c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3301      	adds	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3301      	adds	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b31      	cmp	r3, #49	@ 0x31
 8000770:	ddf1      	ble.n	8000756 <WS2812_Send+0x9a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	b29b      	uxth	r3, r3
 8000776:	4a07      	ldr	r2, [pc, #28]	@ (8000794 <WS2812_Send+0xd8>)
 8000778:	2100      	movs	r1, #0
 800077a:	4807      	ldr	r0, [pc, #28]	@ (8000798 <WS2812_Send+0xdc>)
 800077c:	f003 fc38 	bl	8003ff0 <HAL_TIM_PWM_Start_DMA>
 8000780:	e000      	b.n	8000784 <WS2812_Send+0xc8>
	if (!datasentflag) return;
 8000782:	bf00      	nop
//	while (!datasentflag){};
//	datasentflag = 0;
}
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000
 8000790:	2000031c 	.word	0x2000031c
 8000794:	20000420 	.word	0x20000420
 8000798:	200000a4 	.word	0x200000a4

0800079c <Reset_LED>:

void Reset_LED (void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e01a      	b.n	80007de <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	b2d9      	uxtb	r1, r3
 80007ac:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <Reset_LED+0x58>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 80007b4:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <Reset_LED+0x58>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 80007c0:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <Reset_LED+0x58>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <Reset_LED+0x58>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	2200      	movs	r2, #0
 80007d6:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80007e2:	dde1      	ble.n	80007a8 <Reset_LED+0xc>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	2000031c 	.word	0x2000031c

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 ffd2 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config_HSE(50);
 8000800:	2032      	movs	r0, #50	@ 0x32
 8000802:	f000 f841 	bl	8000888 <SystemClock_Config_HSE>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 fab7 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 800080a:	f000 fa6f 	bl	8000cec <MX_DMA_Init>
  MX_TIM1_Init();
 800080e:	f000 f90b 	bl	8000a28 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000812:	f000 f8d3 	bl	80009bc <MX_CAN1_Init>
  MX_TIM6_Init();
 8000816:	f000 fa33 	bl	8000c80 <MX_TIM6_Init>
  MX_TIM2_Init();
 800081a:	f000 f9b1 	bl	8000b80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Config();
 800081e:	f000 fbf7 	bl	8001010 <CAN_Filter_Config>
  CAN1_Tx();
 8000822:	f000 fbcb 	bl	8000fbc <CAN1_Tx>

	if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY|CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_BUSOFF)!= HAL_OK)
 8000826:	f240 4103 	movw	r1, #1027	@ 0x403
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <main+0x84>)
 800082c:	f001 fc60 	bl	80020f0 <HAL_CAN_ActivateNotification>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <main+0x42>
	{
	  Error_Handler();
 8000836:	f000 fca7 	bl	8001188 <Error_Handler>
	}

	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 800083a:	4810      	ldr	r0, [pc, #64]	@ (800087c <main+0x84>)
 800083c:	f001 fa22 	bl	8001c84 <HAL_CAN_Start>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <main+0x52>
	{
	  Error_Handler();
 8000846:	f000 fc9f 	bl	8001188 <Error_Handler>
	}
	// Start the TIMER interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <main+0x88>)
 800084c:	f003 fb06 	bl	8003e5c <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000854:	f001 f818 	bl	8001888 <HAL_Delay>

	Reset_LED();          // give LED_Data something valid
 8000858:	f7ff ffa0 	bl	800079c <Reset_LED>
	Set_LEDs_ByState();   // first frame (state 0, red comet)
 800085c:	f000 fac0 	bl	8000de0 <Set_LEDs_ByState>
	  //	            last_change_time = HAL_GetTick();
	  //	        }

//	  HAL_Delay(30);

	  effStep++;                               // animation cursor
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <main+0x8c>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	b29a      	uxth	r2, r3
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <main+0x8c>)
 800086a:	801a      	strh	r2, [r3, #0]
//	     if (state_changed)                       // repaint only when needed
//	     {
//	         state_changed = 0;
//	                          // builds colour table + WS2812_Send()
//	     }
	     Set_LEDs_ByState();
 800086c:	f000 fab8 	bl	8000de0 <Set_LEDs_ByState>

	     HAL_Delay(30);
 8000870:	201e      	movs	r0, #30
 8000872:	f001 f809 	bl	8001888 <HAL_Delay>
	  effStep++;                               // animation cursor
 8000876:	bf00      	nop
 8000878:	e7f2      	b.n	8000860 <main+0x68>
 800087a:	bf00      	nop
 800087c:	2000007c 	.word	0x2000007c
 8000880:	20000134 	.word	0x20000134
 8000884:	20001084 	.word	0x20001084

08000888 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b096      	sub	sp, #88	@ 0x58
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
  uint8_t flash_latency=0;
 8000892:	2300      	movs	r3, #0
 8000894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
  Osc_Init.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	623b      	str	r3, [r7, #32]
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	637b      	str	r3, [r7, #52]	@ 0x34
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  switch(clock_freq) {
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b78      	cmp	r3, #120	@ 0x78
 80008b0:	d038      	beq.n	8000924 <SystemClock_Config_HSE+0x9c>
 80008b2:	2b78      	cmp	r3, #120	@ 0x78
 80008b4:	dc7c      	bgt.n	80009b0 <SystemClock_Config_HSE+0x128>
 80008b6:	2b32      	cmp	r3, #50	@ 0x32
 80008b8:	d002      	beq.n	80008c0 <SystemClock_Config_HSE+0x38>
 80008ba:	2b54      	cmp	r3, #84	@ 0x54
 80008bc:	d019      	beq.n	80008f2 <SystemClock_Config_HSE+0x6a>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 80008be:	e077      	b.n	80009b0 <SystemClock_Config_HSE+0x128>
    Osc_Init.PLL.PLLM = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 50;
 80008c4:	2332      	movs	r3, #50	@ 0x32
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80008d4:	230f      	movs	r3, #15
 80008d6:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e4:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
    flash_latency = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80008f0:	e032      	b.n	8000958 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 84;
 80008f6:	2354      	movs	r3, #84	@ 0x54
 80008f8:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000906:	230f      	movs	r3, #15
 8000908:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2302      	movs	r3, #2
 800090c:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000916:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
    flash_latency = 2;
 800091c:	2302      	movs	r3, #2
 800091e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000922:	e019      	b.n	8000958 <SystemClock_Config_HSE+0xd0>
    Osc_Init.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Osc_Init.PLL.PLLN = 120;
 8000928:	2378      	movs	r3, #120	@ 0x78
 800092a:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLQ = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8000938:	230f      	movs	r3, #15
 800093a:	60bb      	str	r3, [r7, #8]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000948:	617b      	str	r3, [r7, #20]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094e:	61bb      	str	r3, [r7, #24]
    flash_latency = 3;
 8000950:	2303      	movs	r3, #3
 8000952:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000956:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4618      	mov	r0, r3
 800095e:	f002 ff8f 	bl	8003880 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config_HSE+0xe4>
  {
    Error_Handler();
 8000968:	f000 fc0e 	bl	8001188 <Error_Handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 800096c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fc60 	bl	800323c <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config_HSE+0xfe>
  {
    Error_Handler();
 8000982:	f000 fc01 	bl	8001188 <Error_Handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000986:	f002 fd3f 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 800098a:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 800098c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SystemClock_Config_HSE+0x130>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	099b      	lsrs	r3, r3, #6
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fee7 	bl	800276a <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800099c:	2004      	movs	r0, #4
 800099e:	f001 fef1 	bl	8002784 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	f04f 30ff 	mov.w	r0, #4294967295
 80009aa:	f001 feb4 	bl	8002716 <HAL_NVIC_SetPriority>
 80009ae:	e000      	b.n	80009b2 <SystemClock_Config_HSE+0x12a>
    return ;
 80009b0:	bf00      	nop
}
 80009b2:	3758      	adds	r7, #88	@ 0x58
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	10624dd3 	.word	0x10624dd3

080009bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009c2:	4a18      	ldr	r2, [pc, #96]	@ (8000a24 <MX_CAN1_Init+0x68>)
 80009c4:	601a      	str	r2, [r3, #0]
//  hcan1.Init.Prescaler = 16;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
//  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
//  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
//  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;

  hcan1.Init.Prescaler = 10;
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009ce:	220a      	movs	r2, #10
 80009d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009da:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80009de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]

  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_CAN1_Init+0x64>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_CAN1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_CAN1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_CAN1_Init+0x64>)
 8000a0c:	f000 ff60 	bl	80018d0 <HAL_CAN_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a16:	f000 fbb7 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000007c 	.word	0x2000007c
 8000a24:	40006400 	.word	0x40006400

08000a28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b096      	sub	sp, #88	@ 0x58
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fcf5 	bl	8005450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a66:	4b44      	ldr	r3, [pc, #272]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a68:	4a44      	ldr	r2, [pc, #272]	@ (8000b7c <MX_TIM1_Init+0x154>)
 8000a6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6c:	4b42      	ldr	r3, [pc, #264]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b41      	ldr	r3, [pc, #260]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000a78:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a7a:	2259      	movs	r2, #89	@ 0x59
 8000a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a84:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a90:	4839      	ldr	r0, [pc, #228]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000a92:	f003 f993 	bl	8003dbc <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a9c:	f000 fb74 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4832      	ldr	r0, [pc, #200]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000aae:	f003 feeb 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ab8:	f000 fb66 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000abc:	482e      	ldr	r0, [pc, #184]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000abe:	f003 fa3d 	bl	8003f3c <HAL_TIM_PWM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ac8:	f000 fb5e 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4827      	ldr	r0, [pc, #156]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000adc:	f004 fbb4 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ae6:	f000 fb4f 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aea:	2360      	movs	r3, #96	@ 0x60
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000b10:	f003 fdf8 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b1a:	f000 fb35 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000b28:	f003 fdec 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b32:	f000 fb29 	bl	8001188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000b5a:	f004 fbf1 	bl	8005340 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b64:	f000 fb10 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM1_Init+0x150>)
 8000b6a:	f000 fccb 	bl	8001504 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3758      	adds	r7, #88	@ 0x58
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000a4 	.word	0x200000a4
 8000b7c:	40010000 	.word	0x40010000

08000b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	@ 0x38
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	f107 0320 	add.w	r3, r7, #32
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b32      	ldr	r3, [pc, #200]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb8:	4b30      	ldr	r3, [pc, #192]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd8:	4828      	ldr	r0, [pc, #160]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bda:	f003 f8ef 	bl	8003dbc <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000be4:	f000 fad0 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4821      	ldr	r0, [pc, #132]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000bf6:	f003 fe47 	bl	8004888 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c00:	f000 fac2 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c04:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000c06:	f003 f999 	bl	8003f3c <HAL_TIM_PWM_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c10:	f000 faba 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1c:	f107 0320 	add.w	r3, r7, #32
 8000c20:	4619      	mov	r1, r3
 8000c22:	4816      	ldr	r0, [pc, #88]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000c24:	f004 fb10 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c2e:	f000 faab 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c32:	2360      	movs	r3, #96	@ 0x60
 8000c34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000c4a:	f003 fd5b 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c54:	f000 fa98 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000c60:	f003 fd50 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c6a:	f000 fa8d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM2_Init+0xfc>)
 8000c70:	f000 fc48 	bl	8001504 <HAL_TIM_MspPostInit>

}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	@ 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000ec 	.word	0x200000ec

08000c80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <MX_TIM6_Init+0x68>)
 8000c92:	601a      	str	r2, [r3, #0]
//  htim6.Init.Prescaler = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
//  htim6.Init.Period = 65535;
  htim6.Init.Prescaler = 49999;  // Divides 50MHz to 1kHz
 8000c9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000c9c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim6.Init.Period = 4999;      // 1kHz → 5s interrupt
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000ca4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ca8:	60da      	str	r2, [r3, #12]

  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000cb2:	f003 f883 	bl	8003dbc <HAL_TIM_Base_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000cbc:	f000 fa64 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_TIM6_Init+0x64>)
 8000cce:	f004 fabb 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cd8:	f000 fa56 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000134 	.word	0x20000134
 8000ce8:	40001000 	.word	0x40001000

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a17      	ldr	r2, [pc, #92]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_DMA_Init+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f001 fcf1 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d34:	2010      	movs	r0, #16
 8000d36:	f001 fd0a 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2011      	movs	r0, #17
 8000d40:	f001 fce9 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d44:	2011      	movs	r0, #17
 8000d46:	f001 fd02 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2039      	movs	r0, #57	@ 0x39
 8000d50:	f001 fce1 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d54:	2039      	movs	r0, #57	@ 0x39
 8000d56:	f001 fcfa 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	203a      	movs	r0, #58	@ 0x3a
 8000d60:	f001 fcd9 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d64:	203a      	movs	r0, #58	@ 0x3a
 8000d66:	f001 fcf2 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_GPIO_Init+0x60>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // configure GPIOs
    GPIO_InitTypeDef ledgpio;
    ledgpio.Pin = GPIO_PIN_5;
 8000db6:	2320      	movs	r3, #32
 8000db8:	60fb      	str	r3, [r7, #12]
    ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
    ledgpio.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA,&ledgpio);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_GPIO_Init+0x64>)
 8000dca:	f002 f889 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <Set_LEDs_ByState>:

/* USER CODE BEGIN 4 */
/* === LED pattern generator  (internal WS2812_Send() removed) ============ */
void Set_LEDs_ByState(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
    uint8_t  trail_len = MAX_LED / 2;
 8000de6:	2320      	movs	r3, #32
 8000de8:	737b      	strb	r3, [r7, #13]
    uint16_t head      = effStep % MAX_LED;
 8000dea:	4b71      	ldr	r3, [pc, #452]	@ (8000fb0 <Set_LEDs_ByState+0x1d0>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000df2:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < MAX_LED; ++i) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	e0d0      	b.n	8000f9c <Set_LEDs_ByState+0x1bc>
        uint16_t distance = (i + MAX_LED - head) % MAX_LED;
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000e00:	897b      	ldrh	r3, [r7, #10]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	425a      	negs	r2, r3
 8000e06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e0a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e0e:	bf58      	it	pl
 8000e10:	4253      	negpl	r3, r2
 8000e12:	813b      	strh	r3, [r7, #8]

        switch (fsm_state) {
 8000e14:	4b67      	ldr	r3, [pc, #412]	@ (8000fb4 <Set_LEDs_ByState+0x1d4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b06      	cmp	r3, #6
 8000e1a:	f200 80bc 	bhi.w	8000f96 <Set_LEDs_ByState+0x1b6>
 8000e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <Set_LEDs_ByState+0x44>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e41 	.word	0x08000e41
 8000e28:	08000e5d 	.word	0x08000e5d
 8000e2c:	08000e79 	.word	0x08000e79
 8000e30:	08000e95 	.word	0x08000e95
 8000e34:	08000ea3 	.word	0x08000ea3
 8000e38:	08000ef3 	.word	0x08000ef3
 8000e3c:	08000f5b 	.word	0x08000f5b
        case 0:  Set_LED(i, distance < trail_len ? 255 : 0, 0, 0);                break;
 8000e40:	89f8      	ldrh	r0, [r7, #14]
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	893a      	ldrh	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d201      	bcs.n	8000e50 <Set_LEDs_ByState+0x70>
 8000e4c:	21ff      	movs	r1, #255	@ 0xff
 8000e4e:	e000      	b.n	8000e52 <Set_LEDs_ByState+0x72>
 8000e50:	2100      	movs	r1, #0
 8000e52:	2300      	movs	r3, #0
 8000e54:	2200      	movs	r2, #0
 8000e56:	f7ff fbdb 	bl	8000610 <Set_LED>
 8000e5a:	e09c      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>
        case 1:  Set_LED(i, 0, distance < trail_len ? 255 : 0, 0);                break;
 8000e5c:	89f8      	ldrh	r0, [r7, #14]
 8000e5e:	7b7b      	ldrb	r3, [r7, #13]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	893a      	ldrh	r2, [r7, #8]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d201      	bcs.n	8000e6c <Set_LEDs_ByState+0x8c>
 8000e68:	22ff      	movs	r2, #255	@ 0xff
 8000e6a:	e000      	b.n	8000e6e <Set_LEDs_ByState+0x8e>
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	f7ff fbcd 	bl	8000610 <Set_LED>
 8000e76:	e08e      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>
        case 2:  Set_LED(i, 0, 0, distance < trail_len ? 255 : 0);                break;
 8000e78:	89f8      	ldrh	r0, [r7, #14]
 8000e7a:	7b7b      	ldrb	r3, [r7, #13]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	893a      	ldrh	r2, [r7, #8]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d201      	bcs.n	8000e88 <Set_LEDs_ByState+0xa8>
 8000e84:	23ff      	movs	r3, #255	@ 0xff
 8000e86:	e000      	b.n	8000e8a <Set_LEDs_ByState+0xaa>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f7ff fbbf 	bl	8000610 <Set_LED>
 8000e92:	e080      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>
        case 3:  Set_LED(i, 0, 0, 0);                                             break;
 8000e94:	89f8      	ldrh	r0, [r7, #14]
 8000e96:	2300      	movs	r3, #0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f7ff fbb8 	bl	8000610 <Set_LED>
 8000ea0:	e079      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>

        case 4: {                              /* moving split blue / yellow   */
            uint16_t half  = MAX_LED / 2;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	80fb      	strh	r3, [r7, #6]
            uint16_t start = effStep % MAX_LED;
 8000ea6:	4b42      	ldr	r3, [pc, #264]	@ (8000fb0 <Set_LEDs_ByState+0x1d0>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000eae:	80bb      	strh	r3, [r7, #4]
            uint16_t blue  = (start            + i) % MAX_LED;
 8000eb0:	88ba      	ldrh	r2, [r7, #4]
 8000eb2:	89fb      	ldrh	r3, [r7, #14]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ebc:	807b      	strh	r3, [r7, #2]
            uint16_t yel   = (start + half     + i) % MAX_LED;
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	441a      	add	r2, r3
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	425a      	negs	r2, r3
 8000eca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ece:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ed2:	bf58      	it	pl
 8000ed4:	4253      	negpl	r3, r2
 8000ed6:	803b      	strh	r3, [r7, #0]
            Set_LED(blue, 0, 0, 255);
 8000ed8:	8878      	ldrh	r0, [r7, #2]
 8000eda:	23ff      	movs	r3, #255	@ 0xff
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f7ff fb96 	bl	8000610 <Set_LED>
            Set_LED(yel , 255, 255, 0);
 8000ee4:	8838      	ldrh	r0, [r7, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	22ff      	movs	r2, #255	@ 0xff
 8000eea:	21ff      	movs	r1, #255	@ 0xff
 8000eec:	f7ff fb90 	bl	8000610 <Set_LED>
        } break;
 8000ef0:	e051      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>

        case 5:                                /* blinking blue / yellow comet */
            if ((effStep / 20) & 1) { Set_LED(i,0,0,0); break; }
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <Set_LEDs_ByState+0x1d0>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	4a30      	ldr	r2, [pc, #192]	@ (8000fb8 <Set_LEDs_ByState+0x1d8>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <Set_LEDs_ByState+0x136>
 8000f08:	89f8      	ldrh	r0, [r7, #14]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f7ff fb7e 	bl	8000610 <Set_LED>
 8000f14:	e03f      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>
            if (distance < trail_len)
 8000f16:	7b7b      	ldrb	r3, [r7, #13]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	893a      	ldrh	r2, [r7, #8]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d215      	bcs.n	8000f4c <Set_LEDs_ByState+0x16c>
                Set_LED(i, (i < MAX_LED/2) ? 0 : 255,
 8000f20:	89f8      	ldrh	r0, [r7, #14]
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	2b1f      	cmp	r3, #31
 8000f26:	d801      	bhi.n	8000f2c <Set_LEDs_ByState+0x14c>
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e000      	b.n	8000f2e <Set_LEDs_ByState+0x14e>
 8000f2c:	21ff      	movs	r1, #255	@ 0xff
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	2b1f      	cmp	r3, #31
 8000f32:	d801      	bhi.n	8000f38 <Set_LEDs_ByState+0x158>
 8000f34:	2200      	movs	r2, #0
 8000f36:	e000      	b.n	8000f3a <Set_LEDs_ByState+0x15a>
 8000f38:	22ff      	movs	r2, #255	@ 0xff
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	d801      	bhi.n	8000f44 <Set_LEDs_ByState+0x164>
 8000f40:	23ff      	movs	r3, #255	@ 0xff
 8000f42:	e000      	b.n	8000f46 <Set_LEDs_ByState+0x166>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f7ff fb63 	bl	8000610 <Set_LED>
                           (i < MAX_LED/2) ? 0 : 255,
                           (i < MAX_LED/2) ? 255 : 0);
            else Set_LED(i,0,0,0);
            break;
 8000f4a:	e024      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>
            else Set_LED(i,0,0,0);
 8000f4c:	89f8      	ldrh	r0, [r7, #14]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	f7ff fb5c 	bl	8000610 <Set_LED>
            break;
 8000f58:	e01d      	b.n	8000f96 <Set_LEDs_ByState+0x1b6>

        case 6:                                /* blinking yellow comet        */
            if ((effStep / 20) & 1 || distance >= trail_len)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <Set_LEDs_ByState+0x1d0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <Set_LEDs_ByState+0x1d8>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d104      	bne.n	8000f7a <Set_LEDs_ByState+0x19a>
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	893a      	ldrh	r2, [r7, #8]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d306      	bcc.n	8000f88 <Set_LEDs_ByState+0x1a8>
                Set_LED(i,0,0,0);
 8000f7a:	89f8      	ldrh	r0, [r7, #14]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	f7ff fb45 	bl	8000610 <Set_LED>
            else
                Set_LED(i,255,255,0);
            break;
 8000f86:	e005      	b.n	8000f94 <Set_LEDs_ByState+0x1b4>
                Set_LED(i,255,255,0);
 8000f88:	89f8      	ldrh	r0, [r7, #14]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	22ff      	movs	r2, #255	@ 0xff
 8000f8e:	21ff      	movs	r1, #255	@ 0xff
 8000f90:	f7ff fb3e 	bl	8000610 <Set_LED>
            break;
 8000f94:	bf00      	nop
    for (uint16_t i = 0; i < MAX_LED; ++i) {
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	81fb      	strh	r3, [r7, #14]
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fa0:	f67f af2b 	bls.w	8000dfa <Set_LEDs_ByState+0x1a>
        }
    }
    WS2812_Send();      /* single call for all states */
 8000fa4:	f7ff fb8a 	bl	80006bc <WS2812_Send>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20001084 	.word	0x20001084
 8000fb4:	200002fc 	.word	0x200002fc
 8000fb8:	cccccccd 	.word	0xcccccccd

08000fbc <CAN1_Tx>:
/**
  * @brief  Transmit a message via CAN1.
  * @retval None
  */
void CAN1_Tx()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
  CAN_TxHeaderTypeDef TxHeader;
  uint32_t TxMailbox;
  uint8_t message;

  TxHeader.DLC = 1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x499;
 8000fc6:	f240 4399 	movw	r3, #1177	@ 0x499
 8000fca:	60bb      	str	r3, [r7, #8]
  TxHeader.IDE   = CAN_ID_STD;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]

  TxHeader.RTR = CAN_RTR_DATA;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  message = fsm_state;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <CAN1_Tx+0x48>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	70fb      	strb	r3, [r7, #3]

  // board led blinks on tx
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000fda:	2120      	movs	r1, #32
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <CAN1_Tx+0x4c>)
 8000fde:	f002 f913 	bl	8003208 <HAL_GPIO_TogglePin>
  // send the message

  if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,&message,&TxMailbox) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	1cfa      	adds	r2, r7, #3
 8000fe6:	f107 0108 	add.w	r1, r7, #8
 8000fea:	4808      	ldr	r0, [pc, #32]	@ (800100c <CAN1_Tx+0x50>)
 8000fec:	f000 fe8e 	bl	8001d0c <HAL_CAN_AddTxMessage>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <CAN1_Tx+0x3e>
  {
    Error_Handler();
 8000ff6:	f000 f8c7 	bl	8001188 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002fc 	.word	0x200002fc
 8001008:	40020000 	.word	0x40020000
 800100c:	2000007c 	.word	0x2000007c

08001010 <CAN_Filter_Config>:
/**
  * @brief  Configures the CAN filter.
  * @retval None
  */
void CAN_Filter_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef can1_filter_init;

  can1_filter_init.FilterActivation = ENABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
  can1_filter_init.FilterBank  = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  can1_filter_init.FilterIdHigh = 0x0000;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  can1_filter_init.FilterIdLow = 0x0000;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  can1_filter_init.FilterMaskIdHigh = 0X0000;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  can1_filter_init.FilterMaskIdLow = 0x0000;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8001036:	2301      	movs	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]

  if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <CAN_Filter_Config+0x48>)
 8001040:	f000 fd42 	bl	8001ac8 <HAL_CAN_ConfigFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <CAN_Filter_Config+0x3e>
  {
    Error_Handler();
 800104a:	f000 f89d 	bl	8001188 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000007c 	.word	0x2000007c

0800105c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b090      	sub	sp, #64	@ 0x40
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M0\r\n");
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4903      	ldr	r1, [pc, #12]	@ (8001078 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f9ce 	bl	800540c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 8001070:	bf00      	nop
 8001072:	3740      	adds	r7, #64	@ 0x40
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	08005d64 	.word	0x08005d64

0800107c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b090      	sub	sp, #64	@ 0x40
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M1\r\n");
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4903      	ldr	r1, [pc, #12]	@ (8001098 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f004 f9be 	bl	800540c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 8001090:	bf00      	nop
 8001092:	3740      	adds	r7, #64	@ 0x40
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08005d80 	.word	0x08005d80

0800109c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	@ 0x40
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  char msg[50];
  sprintf(msg,"Message Transmitted:M2\r\n");
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4903      	ldr	r1, [pc, #12]	@ (80010b8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f9ae 	bl	800540c <siprintf>
//  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
}
 80010b0:	bf00      	nop
 80010b2:	3740      	adds	r7, #64	@ 0x40
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08005d9c 	.word	0x08005d9c

080010bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0a2      	sub	sp, #136	@ 0x88
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  	uint8_t rcvd_msg[8];
	char dbg_rx[64];
	sprintf(dbg_rx, "Rx: ID=0x%03lX, Data[0]=%d\r\n", RxHeader.StdId, rcvd_msg[0]);
 80010c4:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80010cc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80010d0:	4925      	ldr	r1, [pc, #148]	@ (8001168 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80010d2:	f004 f99b 	bl	800540c <siprintf>
//	HAL_UART_Transmit(&huart2, (uint8_t*)dbg_rx, strlen(dbg_rx), HAL_MAX_DELAY);


  char msg[50];

  if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 80010d6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010da:	4a22      	ldr	r2, [pc, #136]	@ (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80010dc:	2100      	movs	r1, #0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fee4 	bl	8001eac <HAL_CAN_GetRxMessage>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
    Error_Handler();
 80010ea:	f000 f84d 	bl	8001188 <Error_Handler>
  }

  switch (RxHeader.StdId)
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d830      	bhi.n	800115c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 80010fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	0800111d 	.word	0x0800111d
 8001104:	08001125 	.word	0x08001125
 8001108:	0800112d 	.word	0x0800112d
 800110c:	08001135 	.word	0x08001135
 8001110:	0800113d 	.word	0x0800113d
 8001114:	08001145 	.word	0x08001145
 8001118:	0800114d 	.word	0x0800114d
      {
          case 0x401:  fsm_state = 0; break;   // FAULT
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e017      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x402:  fsm_state = 1; break;   // SAFE‑TO‑APPROACH
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e013      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x403:  fsm_state = 2; break;   // READY‑TO‑LAUNCH
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e00f      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x404:  fsm_state = 3; break;   // LAUNCH (unused)
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001136:	2203      	movs	r2, #3
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e00b      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x405:  fsm_state = 4; break;   // CRAWLING
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800113e:	2204      	movs	r2, #4
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e007      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x406:  fsm_state = 5; break;   // BRAKING
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001146:	2205      	movs	r2, #5
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e003      	b.n	8001154 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
          case 0x407:  fsm_state = 6; break;   // DEBUG
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800114e:	2206      	movs	r2, #6
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	bf00      	nop
          default: return;                     // ignore everything else
      }
      state_changed = 1;                       // tell main loop to repaint
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e000      	b.n	800115e <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
          default: return;                     // ignore everything else
 800115c:	bf00      	nop
}
 800115e:	3788      	adds	r7, #136	@ 0x88
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000300 	.word	0x20000300
 8001168:	08005db8 	.word	0x08005db8
 800116c:	200002fc 	.word	0x200002fc
 8001170:	2000041c 	.word	0x2000041c

08001174 <HAL_TIM_PeriodElapsedCallback>:
  * We will send the heartbeat signal from this function
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{ // broadcasts heartbeat signal
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  CAN1_Tx();
 800117c:	f7ff ff1e 	bl	8000fbc <CAN1_Tx>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011d2:	2007      	movs	r0, #7
 80011d4:	f001 fa94 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800

080011e4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a29      	ldr	r2, [pc, #164]	@ (80012a8 <HAL_CAN_MspInit+0xc4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d14c      	bne.n	80012a0 <HAL_CAN_MspInit+0xbc>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_CAN_MspInit+0xc8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800123e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001250:	2309      	movs	r3, #9
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4815      	ldr	r0, [pc, #84]	@ (80012b0 <HAL_CAN_MspInit+0xcc>)
 800125c:	f001 fe40 	bl	8002ee0 <HAL_GPIO_Init>

    /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8001260:	2200      	movs	r2, #0
 8001262:	210f      	movs	r1, #15
 8001264:	2013      	movs	r0, #19
 8001266:	f001 fa56 	bl	8002716 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 800126a:	2200      	movs	r2, #0
 800126c:	210f      	movs	r1, #15
 800126e:	2014      	movs	r0, #20
 8001270:	f001 fa51 	bl	8002716 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8001274:	2200      	movs	r2, #0
 8001276:	210f      	movs	r1, #15
 8001278:	2015      	movs	r0, #21
 800127a:	f001 fa4c 	bl	8002716 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 800127e:	2200      	movs	r2, #0
 8001280:	210f      	movs	r1, #15
 8001282:	2016      	movs	r0, #22
 8001284:	f001 fa47 	bl	8002716 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001288:	2013      	movs	r0, #19
 800128a:	f001 fa60 	bl	800274e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800128e:	2014      	movs	r0, #20
 8001290:	f001 fa5d 	bl	800274e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001294:	2015      	movs	r0, #21
 8001296:	f001 fa5a 	bl	800274e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800129a:	2016      	movs	r0, #22
 800129c:	f001 fa57 	bl	800274e <HAL_NVIC_EnableIRQ>
    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40006400 	.word	0x40006400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a85      	ldr	r2, [pc, #532]	@ (80014d8 <HAL_TIM_Base_MspInit+0x224>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d16e      	bne.n	80013a4 <HAL_TIM_Base_MspInit+0xf0>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b84      	ldr	r3, [pc, #528]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a83      	ldr	r2, [pc, #524]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b81      	ldr	r3, [pc, #516]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80012e2:	4b7f      	ldr	r3, [pc, #508]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 80012e4:	4a7f      	ldr	r2, [pc, #508]	@ (80014e4 <HAL_TIM_Base_MspInit+0x230>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80012e8:	4b7d      	ldr	r3, [pc, #500]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 80012ea:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f0:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 80012f2:	2240      	movs	r2, #64	@ 0x40
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b7a      	ldr	r3, [pc, #488]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b78      	ldr	r3, [pc, #480]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 80012fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001302:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001304:	4b76      	ldr	r3, [pc, #472]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 8001306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800130a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800130c:	4b74      	ldr	r3, [pc, #464]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 800130e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001312:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001314:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800131a:	4b71      	ldr	r3, [pc, #452]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001320:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001326:	486e      	ldr	r0, [pc, #440]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 8001328:	f001 fa48 	bl	80027bc <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001332:	f7ff ff29 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a69      	ldr	r2, [pc, #420]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
 800133c:	4a68      	ldr	r2, [pc, #416]	@ (80014e0 <HAL_TIM_Base_MspInit+0x22c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001342:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001344:	4a69      	ldr	r2, [pc, #420]	@ (80014ec <HAL_TIM_Base_MspInit+0x238>)
 8001346:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001348:	4b67      	ldr	r3, [pc, #412]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800134a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800134e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001350:	4b65      	ldr	r3, [pc, #404]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001352:	2240      	movs	r2, #64	@ 0x40
 8001354:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001356:	4b64      	ldr	r3, [pc, #400]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800135c:	4b62      	ldr	r3, [pc, #392]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800135e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001362:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001364:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800136a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136c:	4b5e      	ldr	r3, [pc, #376]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800136e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001372:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001374:	4b5c      	ldr	r3, [pc, #368]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b5b      	ldr	r3, [pc, #364]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001380:	4b59      	ldr	r3, [pc, #356]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001386:	4858      	ldr	r0, [pc, #352]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 8001388:	f001 fa18 	bl	80027bc <HAL_DMA_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_TIM_Base_MspInit+0xe2>
    {
      Error_Handler();
 8001392:	f7ff fef9 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a53      	ldr	r2, [pc, #332]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
 800139c:	4a52      	ldr	r2, [pc, #328]	@ (80014e8 <HAL_TIM_Base_MspInit+0x234>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6393      	str	r3, [r2, #56]	@ 0x38
    //3. setup the priority for TIM6_DAC_IRQn
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013a2:	e094      	b.n	80014ce <HAL_TIM_Base_MspInit+0x21a>
  else if(htim_base->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013ac:	d174      	bne.n	8001498 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a49      	ldr	r2, [pc, #292]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80013ca:	4b49      	ldr	r3, [pc, #292]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013cc:	4a49      	ldr	r2, [pc, #292]	@ (80014f4 <HAL_TIM_Base_MspInit+0x240>)
 80013ce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80013d0:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013d2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d8:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013da:	2240      	movs	r2, #64	@ 0x40
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ec:	4b40      	ldr	r3, [pc, #256]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f4:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80013fc:	4b3c      	ldr	r3, [pc, #240]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001402:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001408:	4b39      	ldr	r3, [pc, #228]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800140e:	4838      	ldr	r0, [pc, #224]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 8001410:	f001 f9d4 	bl	80027bc <HAL_DMA_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_TIM_Base_MspInit+0x16a>
      Error_Handler();
 800141a:	f7ff feb5 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a33      	ldr	r2, [pc, #204]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
 8001424:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <HAL_TIM_Base_MspInit+0x23c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800142c:	4a33      	ldr	r2, [pc, #204]	@ (80014fc <HAL_TIM_Base_MspInit+0x248>)
 800142e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001430:	4b31      	ldr	r3, [pc, #196]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001432:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001436:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800143a:	2240      	movs	r2, #64	@ 0x40
 800143c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800144a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800144e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001452:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001456:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800146e:	4822      	ldr	r0, [pc, #136]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001470:	f001 f9a4 	bl	80027bc <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_TIM_Base_MspInit+0x1ca>
      Error_Handler();
 800147a:	f7ff fe85 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a1d      	ldr	r2, [pc, #116]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
 8001484:	4a1c      	ldr	r2, [pc, #112]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1a      	ldr	r2, [pc, #104]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 800148e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001490:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <HAL_TIM_Base_MspInit+0x244>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001496:	e01a      	b.n	80014ce <HAL_TIM_Base_MspInit+0x21a>
  else if(htim_base->Instance==TIM6)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <HAL_TIM_Base_MspInit+0x24c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d115      	bne.n	80014ce <HAL_TIM_Base_MspInit+0x21a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_TIM_Base_MspInit+0x228>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014be:	2036      	movs	r0, #54	@ 0x36
 80014c0:	f001 f945 	bl	800274e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn,15,0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	210f      	movs	r1, #15
 80014c8:	2036      	movs	r0, #54	@ 0x36
 80014ca:	f001 f924 	bl	8002716 <HAL_NVIC_SetPriority>
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	2000017c 	.word	0x2000017c
 80014e4:	40026428 	.word	0x40026428
 80014e8:	200001dc 	.word	0x200001dc
 80014ec:	40026440 	.word	0x40026440
 80014f0:	2000023c 	.word	0x2000023c
 80014f4:	40026088 	.word	0x40026088
 80014f8:	2000029c 	.word	0x2000029c
 80014fc:	400260a0 	.word	0x400260a0
 8001500:	40001000 	.word	0x40001000

08001504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a24      	ldr	r2, [pc, #144]	@ (80015b4 <HAL_TIM_MspPostInit+0xb0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d11f      	bne.n	8001566 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4817      	ldr	r0, [pc, #92]	@ (80015bc <HAL_TIM_MspPostInit+0xb8>)
 8001560:	f001 fcbe 	bl	8002ee0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001564:	e022      	b.n	80015ac <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800156e:	d11d      	bne.n	80015ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_TIM_MspPostInit+0xb4>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800158c:	2303      	movs	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_TIM_MspPostInit+0xb8>)
 80015a8:	f001 fc9a 	bl	8002ee0 <HAL_GPIO_Init>
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	@ 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f917 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <DMA1_Stream5_IRQHandler+0x10>)
 8001626:	f001 f9f1 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000023c 	.word	0x2000023c

08001634 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Stream6_IRQHandler+0x10>)
 800163a:	f001 f9e7 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000029c 	.word	0x2000029c

08001648 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <DMA2_Stream1_IRQHandler+0x10>)
 800164e:	f001 f9dd 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000017c 	.word	0x2000017c

0800165c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <DMA2_Stream2_IRQHandler+0x10>)
 8001662:	f001 f9d3 	bl	8002a0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001dc 	.word	0x200001dc

08001670 <CAN1_TX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles CAN_TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <CAN1_TX_IRQHandler+0x10>)
 8001676:	f000 fd61 	bl	800213c <HAL_CAN_IRQHandler>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000007c 	.word	0x2000007c

08001684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN_RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <CAN1_RX0_IRQHandler+0x10>)
 800168a:	f000 fd57 	bl	800213c <HAL_CAN_IRQHandler>
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000007c 	.word	0x2000007c

08001698 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <CAN1_SCE_IRQHandler+0x10>)
 800169e:	f000 fd4d 	bl	800213c <HAL_CAN_IRQHandler>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000007c 	.word	0x2000007c

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f002 ff37 	bl	8004524 <HAL_TIM_IRQHandler>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000134 	.word	0x20000134

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f003 feb6 	bl	8005460 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20020000 	.word	0x20020000
 8001720:	00000400 	.word	0x00000400
 8001724:	20001088 	.word	0x20001088
 8001728:	200011d8 	.word	0x200011d8

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001756:	490e      	ldr	r1, [pc, #56]	@ (8001790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001758:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800176c:	4c0b      	ldr	r4, [pc, #44]	@ (800179c <LoopFillZerobss+0x26>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800177a:	f7ff ffd7 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f003 fe75 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7ff f839 	bl	80007f8 <main>
  bx  lr    
 8001786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001794:	08005e34 	.word	0x08005e34
  ldr r2, =_sbss
 8001798:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800179c:	200011d8 	.word	0x200011d8

080017a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC_IRQHandler>
	...

080017a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <HAL_Init+0x40>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_Init+0x40>)
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	@ (80017e4 <HAL_Init+0x40>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 ff97 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f808 	bl	80017e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fcdc 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023c00 	.word	0x40023c00

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <HAL_InitTick+0x54>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x58>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 ffaf 	bl	800276a <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 ff77 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	@ (8001844 <HAL_InitTick+0x5c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000004 	.word	0x20000004
 8001840:	2000000c 	.word	0x2000000c
 8001844:	20000008 	.word	0x20000008

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	2000000c 	.word	0x2000000c
 800186c:	2000108c 	.word	0x2000108c

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	2000108c 	.word	0x2000108c

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000000c 	.word	0x2000000c

080018d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0ed      	b.n	8001abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fc78 	bl	80011e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff ffb4 	bl	8001870 <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190a:	e012      	b.n	8001932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190c:	f7ff ffb0 	bl	8001870 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d90b      	bls.n	8001932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0c5      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0e5      	beq.n	800190c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0202 	bic.w	r2, r2, #2
 800194e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff ff8e 	bl	8001870 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001956:	e012      	b.n	800197e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001958:	f7ff ff8a 	bl	8001870 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d90b      	bls.n	800197e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2205      	movs	r2, #5
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09f      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e5      	bne.n	8001958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e9b      	ldrb	r3, [r3, #26]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0220 	bic.w	r2, r2, #32
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7edb      	ldrb	r3, [r3, #27]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f1b      	ldrb	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7f5b      	ldrb	r3, [r3, #29]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	ea42 0103 	orr.w	r1, r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d003      	beq.n	8001ae8 <HAL_CAN_ConfigFilter+0x20>
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	f040 80be 	bne.w	8001c64 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ae8:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_CAN_ConfigFilter+0x1b8>)
 8001aea:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b02:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d123      	bne.n	8001b92 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	3248      	adds	r2, #72	@ 0x48
 8001b72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	3348      	adds	r3, #72	@ 0x48
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d122      	bne.n	8001be0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	3248      	adds	r2, #72	@ 0x48
 8001bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd6:	6939      	ldr	r1, [r7, #16]
 8001bd8:	3348      	adds	r3, #72	@ 0x48
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	401a      	ands	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c26:	e007      	b.n	8001c38 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d107      	bne.n	8001c50 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c56:	f023 0201 	bic.w	r2, r3, #1
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e006      	b.n	8001c72 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	371c      	adds	r7, #28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40006400 	.word	0x40006400

08001c84 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d12e      	bne.n	8001cf6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fdde 	bl	8001870 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cb6:	e012      	b.n	8001cde <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb8:	f7ff fdda 	bl	8001870 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d90b      	bls.n	8001cde <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e012      	b.n	8001d04 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e5      	bne.n	8001cb8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e006      	b.n	8001d04 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
  }
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d003      	beq.n	8001d38 <HAL_CAN_AddTxMessage+0x2c>
 8001d30:	7ffb      	ldrb	r3, [r7, #31]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	f040 80ad 	bne.w	8001e92 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8095 	beq.w	8001e82 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	0e1b      	lsrs	r3, r3, #24
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d62:	2201      	movs	r2, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10d      	bne.n	8001d90 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	6809      	ldr	r1, [r1, #0]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3318      	adds	r3, #24
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e00f      	b.n	8001db0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d9a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001da4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3318      	adds	r3, #24
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3318      	adds	r3, #24
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	7d1b      	ldrb	r3, [r3, #20]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d111      	bne.n	8001df0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	6811      	ldr	r1, [r2, #0]
 8001de0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3318      	adds	r3, #24
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	440b      	add	r3, r1
 8001dec:	3304      	adds	r3, #4
 8001dee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3307      	adds	r3, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	061a      	lsls	r2, r3, #24
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	041b      	lsls	r3, r3, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3305      	adds	r3, #5
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	3204      	adds	r2, #4
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4610      	mov	r0, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6811      	ldr	r1, [r2, #0]
 8001e18:	ea43 0200 	orr.w	r2, r3, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e26:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3303      	adds	r3, #3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	061a      	lsls	r2, r3, #24
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3302      	adds	r3, #2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	4313      	orrs	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	4610      	mov	r0, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	ea43 0200 	orr.w	r2, r3, r0
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3318      	adds	r3, #24
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3318      	adds	r3, #24
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	440b      	add	r3, r1
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e00e      	b.n	8001ea0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e006      	b.n	8001ea0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3724      	adds	r7, #36	@ 0x24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d003      	beq.n	8001ed0 <HAL_CAN_GetRxMessage+0x24>
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	f040 8103 	bne.w	80020d6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d116      	bne.n	8001f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0f7      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0e8      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	331b      	adds	r3, #27
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0204 	and.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	331b      	adds	r3, #27
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0d5b      	lsrs	r3, r3, #21
 8001f40:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e00b      	b.n	8001f62 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	331b      	adds	r3, #27
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	331b      	adds	r3, #27
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0202 	and.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	331b      	adds	r3, #27
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2208      	movs	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	e00b      	b.n	8001fb0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	331b      	adds	r3, #27
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	331b      	adds	r3, #27
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	331b      	adds	r3, #27
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0a1a      	lsrs	r2, r3, #8
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	4413      	add	r3, r2
 800201a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0c1a      	lsrs	r2, r3, #16
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3302      	adds	r3, #2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0e1a      	lsrs	r2, r3, #24
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	3303      	adds	r3, #3
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3304      	adds	r3, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0a1a      	lsrs	r2, r3, #8
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3305      	adds	r3, #5
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0c1a      	lsrs	r2, r3, #16
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	3306      	adds	r3, #6
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e1a      	lsrs	r2, r3, #24
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3307      	adds	r3, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 0220 	orr.w	r2, r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e006      	b.n	80020e4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002100:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d002      	beq.n	800210e <HAL_CAN_ActivateNotification+0x1e>
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d109      	bne.n	8002122 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6959      	ldr	r1, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e006      	b.n	8002130 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
  }
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	@ 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07c      	beq.n	800227c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe ff5c 	bl	800105c <HAL_CAN_TxMailbox0CompleteCallback>
 80021a4:	e016      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b8:	e00c      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	e002      	b.n	80021d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f96b 	bl	80024aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff42 	bl	800107c <HAL_CAN_TxMailbox1CompleteCallback>
 80021f8:	e016      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
 800220c:	e00c      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	e002      	b.n	8002228 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f94b 	bl	80024be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d024      	beq.n	800227c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800223a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe ff28 	bl	800109c <HAL_CAN_TxMailbox2CompleteCallback>
 800224c:	e016      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d004      	beq.n	8002262 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002260:	e00c      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
 8002274:	e002      	b.n	800227c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f92b 	bl	80024d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2208      	movs	r2, #8
 80022ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f912 	bl	80024e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe feee 	bl	80010bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2208      	movs	r2, #8
 800231e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f8f4 	bl	800250e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8db 	bl	80024fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f8de 	bl	8002522 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2208      	movs	r2, #8
 8002380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8d7 	bl	8002536 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d07b      	beq.n	800248a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d072      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d043      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03e      	beq.n	8002482 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800240a:	2b60      	cmp	r3, #96	@ 0x60
 800240c:	d02b      	beq.n	8002466 <HAL_CAN_IRQHandler+0x32a>
 800240e:	2b60      	cmp	r3, #96	@ 0x60
 8002410:	d82e      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 8002412:	2b50      	cmp	r3, #80	@ 0x50
 8002414:	d022      	beq.n	800245c <HAL_CAN_IRQHandler+0x320>
 8002416:	2b50      	cmp	r3, #80	@ 0x50
 8002418:	d82a      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 800241a:	2b40      	cmp	r3, #64	@ 0x40
 800241c:	d019      	beq.n	8002452 <HAL_CAN_IRQHandler+0x316>
 800241e:	2b40      	cmp	r3, #64	@ 0x40
 8002420:	d826      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 8002422:	2b30      	cmp	r3, #48	@ 0x30
 8002424:	d010      	beq.n	8002448 <HAL_CAN_IRQHandler+0x30c>
 8002426:	2b30      	cmp	r3, #48	@ 0x30
 8002428:	d822      	bhi.n	8002470 <HAL_CAN_IRQHandler+0x334>
 800242a:	2b10      	cmp	r3, #16
 800242c:	d002      	beq.n	8002434 <HAL_CAN_IRQHandler+0x2f8>
 800242e:	2b20      	cmp	r3, #32
 8002430:	d005      	beq.n	800243e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002432:	e01d      	b.n	8002470 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	f043 0308 	orr.w	r3, r3, #8
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800243c:	e019      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002446:	e014      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002450:	e00f      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245a:	e00a      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002464:	e005      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800246e:	e000      	b.n	8002472 <HAL_CAN_IRQHandler+0x336>
            break;
 8002470:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002480:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2204      	movs	r2, #4
 8002488:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f854 	bl	800254a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	@ (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	@ (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	@ (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b04      	cmp	r3, #4
 8002790:	d106      	bne.n	80027a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800279e:	e005      	b.n	80027ac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e010 	.word	0xe000e010

080027bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff f852 	bl	8001870 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e099      	b.n	800290c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	e00f      	b.n	800281a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fa:	f7ff f839 	bl	8001870 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b05      	cmp	r3, #5
 8002806:	d908      	bls.n	800281a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e078      	b.n	800290c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e8      	bne.n	80027fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4b38      	ldr	r3, [pc, #224]	@ (8002914 <HAL_DMA_Init+0x158>)
 8002834:	4013      	ands	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2b04      	cmp	r3, #4
 8002872:	d107      	bne.n	8002884 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	4313      	orrs	r3, r2
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f023 0307 	bic.w	r3, r3, #7
 800289a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d117      	bne.n	80028de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fa91 	bl	8002de8 <DMA_CheckFifoParam>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2240      	movs	r2, #64	@ 0x40
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80028da:	2301      	movs	r3, #1
 80028dc:	e016      	b.n	800290c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa48 	bl	8002d7c <DMA_CalcBaseAndBitshift>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f4:	223f      	movs	r2, #63	@ 0x3f
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	f010803f 	.word	0xf010803f

08002918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_DMA_Start_IT+0x26>
 800293a:	2302      	movs	r3, #2
 800293c:	e040      	b.n	80029c0 <HAL_DMA_Start_IT+0xa8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d12f      	bne.n	80029b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f9da 	bl	8002d20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	223f      	movs	r2, #63	@ 0x3f
 8002972:	409a      	lsls	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0216 	orr.w	r2, r2, #22
 8002986:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0208 	orr.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e005      	b.n	80029be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029be:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d004      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00c      	b.n	8002a00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2205      	movs	r2, #5
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a18:	4b8e      	ldr	r3, [pc, #568]	@ (8002c54 <HAL_DMA_IRQHandler+0x248>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c58 <HAL_DMA_IRQHandler+0x24c>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	2208      	movs	r2, #8
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01a      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a64:	2208      	movs	r2, #8
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f043 0202 	orr.w	r2, r3, #2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d012      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f043 0204 	orr.w	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	2210      	movs	r2, #16
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d043      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d03c      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b06:	2210      	movs	r2, #16
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d108      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d024      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	4798      	blx	r3
 8002b3a:	e01f      	b.n	8002b7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
 8002b4c:	e016      	b.n	8002b7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d107      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0208 	bic.w	r2, r2, #8
 8002b6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	2220      	movs	r2, #32
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 808f 	beq.w	8002cac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8087 	beq.w	8002cac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d136      	bne.n	8002c24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0216 	bic.w	r2, r2, #22
 8002bc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x1da>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0208 	bic.w	r2, r2, #8
 8002bf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	223f      	movs	r2, #63	@ 0x3f
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d07e      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
        }
        return;
 8002c22:	e079      	b.n	8002d18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d031      	beq.n	8002cac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
 8002c50:	e02c      	b.n	8002cac <HAL_DMA_IRQHandler+0x2a0>
 8002c52:	bf00      	nop
 8002c54:	20000004 	.word	0x20000004
 8002c58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e01e      	b.n	8002cac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10f      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0210 	bic.w	r2, r2, #16
 8002c8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d032      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d307      	bcc.n	8002cf4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f2      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x2cc>
 8002cf2:	e000      	b.n	8002cf6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cf4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
 8002d16:	e000      	b.n	8002d1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d18:	bf00      	nop
    }
  }
}
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b40      	cmp	r3, #64	@ 0x40
 8002d4c:	d108      	bne.n	8002d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d5e:	e007      	b.n	8002d70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3b10      	subs	r3, #16
 8002d8c:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d96:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d909      	bls.n	8002dbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	1d1a      	adds	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dbc:	e007      	b.n	8002dce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	aaaaaaab 	.word	0xaaaaaaab
 8002de4:	08005de8 	.word	0x08005de8

08002de8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11f      	bne.n	8002e42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d856      	bhi.n	8002eb6 <DMA_CheckFifoParam+0xce>
 8002e08:	a201      	add	r2, pc, #4	@ (adr r2, 8002e10 <DMA_CheckFifoParam+0x28>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e21 	.word	0x08002e21
 8002e14:	08002e33 	.word	0x08002e33
 8002e18:	08002e21 	.word	0x08002e21
 8002e1c:	08002eb7 	.word	0x08002eb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d046      	beq.n	8002eba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e30:	e043      	b.n	8002eba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e3a:	d140      	bne.n	8002ebe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e03d      	b.n	8002ebe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	d121      	bne.n	8002e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d837      	bhi.n	8002ec2 <DMA_CheckFifoParam+0xda>
 8002e52:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <DMA_CheckFifoParam+0x70>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e69 	.word	0x08002e69
 8002e5c:	08002e6f 	.word	0x08002e6f
 8002e60:	08002e69 	.word	0x08002e69
 8002e64:	08002e81 	.word	0x08002e81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6c:	e030      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d025      	beq.n	8002ec6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7e:	e022      	b.n	8002ec6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e88:	d11f      	bne.n	8002eca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e8e:	e01c      	b.n	8002eca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d903      	bls.n	8002e9e <DMA_CheckFifoParam+0xb6>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d003      	beq.n	8002ea4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e9c:	e018      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea2:	e015      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00e      	beq.n	8002ece <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb4:	e00b      	b.n	8002ece <DMA_CheckFifoParam+0xe6>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e00a      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e008      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e006      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec2:	bf00      	nop
 8002ec4:	e004      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
    }
  } 
  
  return status; 
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	@ 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e165      	b.n	80031c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f040 8154 	bne.w	80031c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d005      	beq.n	8002f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d130      	bne.n	8002f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 0201 	and.w	r2, r3, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d017      	beq.n	8002fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d123      	bne.n	8003024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	08da      	lsrs	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3208      	adds	r2, #8
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80ae 	beq.w	80031c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b5d      	ldr	r3, [pc, #372]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	4a5c      	ldr	r2, [pc, #368]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003074:	6453      	str	r3, [r2, #68]	@ 0x44
 8003076:	4b5a      	ldr	r3, [pc, #360]	@ (80031e0 <HAL_GPIO_Init+0x300>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003082:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <HAL_GPIO_Init+0x304>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	@ (80031e8 <HAL_GPIO_Init+0x308>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d025      	beq.n	80030fa <HAL_GPIO_Init+0x21a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_GPIO_Init+0x30c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01f      	beq.n	80030f6 <HAL_GPIO_Init+0x216>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	@ (80031f0 <HAL_GPIO_Init+0x310>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d019      	beq.n	80030f2 <HAL_GPIO_Init+0x212>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	@ (80031f4 <HAL_GPIO_Init+0x314>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_GPIO_Init+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	@ (80031f8 <HAL_GPIO_Init+0x318>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00d      	beq.n	80030ea <HAL_GPIO_Init+0x20a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	@ (80031fc <HAL_GPIO_Init+0x31c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d007      	beq.n	80030e6 <HAL_GPIO_Init+0x206>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a49      	ldr	r2, [pc, #292]	@ (8003200 <HAL_GPIO_Init+0x320>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_GPIO_Init+0x202>
 80030de:	2306      	movs	r3, #6
 80030e0:	e00c      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00a      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030e6:	2305      	movs	r3, #5
 80030e8:	e008      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e004      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x21c>
 80030fa:	2300      	movs	r3, #0
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	f002 0203 	and.w	r2, r2, #3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4093      	lsls	r3, r2
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310c:	4935      	ldr	r1, [pc, #212]	@ (80031e4 <HAL_GPIO_Init+0x304>)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_GPIO_Init+0x324>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a31      	ldr	r2, [pc, #196]	@ (8003204 <HAL_GPIO_Init+0x324>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b2f      	ldr	r3, [pc, #188]	@ (8003204 <HAL_GPIO_Init+0x324>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <HAL_GPIO_Init+0x324>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316e:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <HAL_GPIO_Init+0x324>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003192:	4a1c      	ldr	r2, [pc, #112]	@ (8003204 <HAL_GPIO_Init+0x324>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <HAL_GPIO_Init+0x324>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031bc:	4a11      	ldr	r2, [pc, #68]	@ (8003204 <HAL_GPIO_Init+0x324>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f67f ae96 	bls.w	8002efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3724      	adds	r7, #36	@ 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40021400 	.word	0x40021400
 8003200:	40021800 	.word	0x40021800
 8003204:	40013c00 	.word	0x40013c00

08003208 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43d9      	mvns	r1, r3
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	400b      	ands	r3, r1
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0cc      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b68      	ldr	r3, [pc, #416]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d90c      	bls.n	8003278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b65      	ldr	r3, [pc, #404]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b63      	ldr	r3, [pc, #396]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b8      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003290:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a58      	ldr	r2, [pc, #352]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800329a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032a8:	4b53      	ldr	r3, [pc, #332]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a52      	ldr	r2, [pc, #328]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b50      	ldr	r3, [pc, #320]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	494d      	ldr	r1, [pc, #308]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b47      	ldr	r3, [pc, #284]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d119      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b3f      	ldr	r3, [pc, #252]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3b      	ldr	r3, [pc, #236]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e067      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b37      	ldr	r3, [pc, #220]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4934      	ldr	r1, [pc, #208]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fe faa0 	bl	8001870 <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fe fa9c 	bl	8001870 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04f      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2b      	ldr	r3, [pc, #172]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d20c      	bcs.n	8003384 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d001      	beq.n	8003384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e032      	b.n	80033ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	4916      	ldr	r1, [pc, #88]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d009      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ae:	4b12      	ldr	r3, [pc, #72]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	490e      	ldr	r1, [pc, #56]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033c2:	f000 f82d 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490a      	ldr	r1, [pc, #40]	@ (80033fc <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	4a09      	ldr	r2, [pc, #36]	@ (8003400 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <HAL_RCC_ClockConfig+0x1c8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fa00 	bl	80017e8 <HAL_InitTick>

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08005dd8 	.word	0x08005dd8
 8003400:	20000004 	.word	0x20000004
 8003404:	20000008 	.word	0x20000008

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b0ae      	sub	sp, #184	@ 0xb8
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4bcb      	ldr	r3, [pc, #812]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b0c      	cmp	r3, #12
 8003450:	f200 8206 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x440>
 8003454:	a201      	add	r2, pc, #4	@ (adr r2, 800345c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	08003491 	.word	0x08003491
 8003460:	08003861 	.word	0x08003861
 8003464:	08003861 	.word	0x08003861
 8003468:	08003861 	.word	0x08003861
 800346c:	08003499 	.word	0x08003499
 8003470:	08003861 	.word	0x08003861
 8003474:	08003861 	.word	0x08003861
 8003478:	08003861 	.word	0x08003861
 800347c:	080034a1 	.word	0x080034a1
 8003480:	08003861 	.word	0x08003861
 8003484:	08003861 	.word	0x08003861
 8003488:	08003861 	.word	0x08003861
 800348c:	08003691 	.word	0x08003691
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4bb9      	ldr	r3, [pc, #740]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x358>)
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003496:	e1e7      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003498:	4bb8      	ldr	r3, [pc, #736]	@ (800377c <HAL_RCC_GetSysClockFreq+0x35c>)
 800349a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800349e:	e1e3      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d071      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b8:	4bae      	ldr	r3, [pc, #696]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80034c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80034da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003510:	4649      	mov	r1, r9
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4641      	mov	r1, r8
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4641      	mov	r1, r8
 8003520:	1a51      	subs	r1, r2, r1
 8003522:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003524:	4649      	mov	r1, r9
 8003526:	eb63 0301 	sbc.w	r3, r3, r1
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003538:	4649      	mov	r1, r9
 800353a:	00cb      	lsls	r3, r1, #3
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003542:	4641      	mov	r1, r8
 8003544:	00ca      	lsls	r2, r1, #3
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	4603      	mov	r3, r0
 800354c:	4622      	mov	r2, r4
 800354e:	189b      	adds	r3, r3, r2
 8003550:	633b      	str	r3, [r7, #48]	@ 0x30
 8003552:	462b      	mov	r3, r5
 8003554:	460a      	mov	r2, r1
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003568:	4629      	mov	r1, r5
 800356a:	024b      	lsls	r3, r1, #9
 800356c:	4621      	mov	r1, r4
 800356e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003572:	4621      	mov	r1, r4
 8003574:	024a      	lsls	r2, r1, #9
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003588:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800358c:	f7fc fe90 	bl	80002b0 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4613      	mov	r3, r2
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800359a:	e067      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359c:	4b75      	ldr	r3, [pc, #468]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	099b      	lsrs	r3, r3, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80035ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035b6:	2300      	movs	r3, #0
 80035b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	0159      	lsls	r1, r3, #5
 80035cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035d0:	0150      	lsls	r0, r2, #5
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4621      	mov	r1, r4
 80035d8:	1a51      	subs	r1, r2, r1
 80035da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80035dc:	4629      	mov	r1, r5
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80035f0:	4649      	mov	r1, r9
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	4641      	mov	r1, r8
 80035f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035fa:	4641      	mov	r1, r8
 80035fc:	018a      	lsls	r2, r1, #6
 80035fe:	4641      	mov	r1, r8
 8003600:	ebb2 0a01 	subs.w	sl, r2, r1
 8003604:	4649      	mov	r1, r9
 8003606:	eb63 0b01 	sbc.w	fp, r3, r1
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800361a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361e:	4692      	mov	sl, r2
 8003620:	469b      	mov	fp, r3
 8003622:	4623      	mov	r3, r4
 8003624:	eb1a 0303 	adds.w	r3, sl, r3
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	462b      	mov	r3, r5
 800362c:	eb4b 0303 	adc.w	r3, fp, r3
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003654:	2200      	movs	r2, #0
 8003656:	673b      	str	r3, [r7, #112]	@ 0x70
 8003658:	677a      	str	r2, [r7, #116]	@ 0x74
 800365a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800365e:	f7fc fe27 	bl	80002b0 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800366c:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800367e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800368e:	e0eb      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003690:	4b38      	ldr	r3, [pc, #224]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369c:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d06b      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4b32      	ldr	r3, [pc, #200]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x354>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	2200      	movs	r2, #0
 80036b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80036bc:	2300      	movs	r3, #0
 80036be:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4621      	mov	r1, r4
 80036de:	1a51      	subs	r1, r2, r1
 80036e0:	61b9      	str	r1, [r7, #24]
 80036e2:	4629      	mov	r1, r5
 80036e4:	eb63 0301 	sbc.w	r3, r3, r1
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80036f6:	4659      	mov	r1, fp
 80036f8:	018b      	lsls	r3, r1, #6
 80036fa:	4651      	mov	r1, sl
 80036fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003700:	4651      	mov	r1, sl
 8003702:	018a      	lsls	r2, r1, #6
 8003704:	4651      	mov	r1, sl
 8003706:	ebb2 0801 	subs.w	r8, r2, r1
 800370a:	4659      	mov	r1, fp
 800370c:	eb63 0901 	sbc.w	r9, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003724:	4690      	mov	r8, r2
 8003726:	4699      	mov	r9, r3
 8003728:	4623      	mov	r3, r4
 800372a:	eb18 0303 	adds.w	r3, r8, r3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	462b      	mov	r3, r5
 8003732:	eb49 0303 	adc.w	r3, r9, r3
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003744:	4629      	mov	r1, r5
 8003746:	024b      	lsls	r3, r1, #9
 8003748:	4621      	mov	r1, r4
 800374a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800374e:	4621      	mov	r1, r4
 8003750:	024a      	lsls	r2, r1, #9
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800375a:	2200      	movs	r2, #0
 800375c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800375e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003764:	f7fc fda4 	bl	80002b0 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4613      	mov	r3, r2
 800376e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003772:	e065      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x420>
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003780:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	2200      	movs	r2, #0
 8003788:	4618      	mov	r0, r3
 800378a:	4611      	mov	r1, r2
 800378c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003790:	653b      	str	r3, [r7, #80]	@ 0x50
 8003792:	2300      	movs	r3, #0
 8003794:	657b      	str	r3, [r7, #84]	@ 0x54
 8003796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800379a:	4642      	mov	r2, r8
 800379c:	464b      	mov	r3, r9
 800379e:	f04f 0000 	mov.w	r0, #0
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	0159      	lsls	r1, r3, #5
 80037a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ac:	0150      	lsls	r0, r2, #5
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4641      	mov	r1, r8
 80037b4:	1a51      	subs	r1, r2, r1
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4649      	mov	r1, r9
 80037ba:	eb63 0301 	sbc.w	r3, r3, r1
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037cc:	4659      	mov	r1, fp
 80037ce:	018b      	lsls	r3, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d6:	4651      	mov	r1, sl
 80037d8:	018a      	lsls	r2, r1, #6
 80037da:	4651      	mov	r1, sl
 80037dc:	1a54      	subs	r4, r2, r1
 80037de:	4659      	mov	r1, fp
 80037e0:	eb63 0501 	sbc.w	r5, r3, r1
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	00eb      	lsls	r3, r5, #3
 80037ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037f2:	00e2      	lsls	r2, r4, #3
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4643      	mov	r3, r8
 80037fa:	18e3      	adds	r3, r4, r3
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	464b      	mov	r3, r9
 8003800:	eb45 0303 	adc.w	r3, r5, r3
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003812:	4629      	mov	r1, r5
 8003814:	028b      	lsls	r3, r1, #10
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800381c:	4621      	mov	r1, r4
 800381e:	028a      	lsls	r2, r1, #10
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003828:	2200      	movs	r2, #0
 800382a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800382c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800382e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003832:	f7fc fd3d 	bl	80002b0 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x458>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0f1b      	lsrs	r3, r3, #28
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800384e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800385e:	e003      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003862:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003866:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800386c:	4618      	mov	r0, r3
 800386e:	37b8      	adds	r7, #184	@ 0xb8
 8003870:	46bd      	mov	sp, r7
 8003872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	00f42400 	.word	0x00f42400

08003880 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e28d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8083 	beq.w	80039a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038a0:	4b94      	ldr	r3, [pc, #592]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d019      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038ac:	4b91      	ldr	r3, [pc, #580]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
        || \
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038b8:	4b8e      	ldr	r3, [pc, #568]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c4:	d00c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c6:	4b8b      	ldr	r3, [pc, #556]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d112      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d2:	4b88      	ldr	r3, [pc, #544]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038de:	d10b      	bne.n	80038f8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	4b84      	ldr	r3, [pc, #528]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05b      	beq.n	80039a4 <HAL_RCC_OscConfig+0x124>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d157      	bne.n	80039a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e25a      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d106      	bne.n	8003910 <HAL_RCC_OscConfig+0x90>
 8003902:	4b7c      	ldr	r3, [pc, #496]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7b      	ldr	r2, [pc, #492]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e01d      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0xb4>
 800391a:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003920:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b73      	ldr	r3, [pc, #460]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a72      	ldr	r2, [pc, #456]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e00b      	b.n	800394c <HAL_RCC_OscConfig+0xcc>
 8003934:	4b6f      	ldr	r3, [pc, #444]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6e      	ldr	r2, [pc, #440]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 800393a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b6c      	ldr	r3, [pc, #432]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6b      	ldr	r2, [pc, #428]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003946:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800394a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d013      	beq.n	800397c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fd ff8c 	bl	8001870 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800395c:	f7fd ff88 	bl	8001870 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	@ 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e21f      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	4b61      	ldr	r3, [pc, #388]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0xdc>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd ff78 	bl	8001870 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fd ff74 	bl	8001870 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e20b      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	4b57      	ldr	r3, [pc, #348]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x104>
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d06f      	beq.n	8003a92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039b2:	4b50      	ldr	r3, [pc, #320]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d017      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039be:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
        || \
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1d3      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd ff21 	bl	8001870 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7fd ff1d 	bl	8001870 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1b4      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x278>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd ff00 	bl	8001870 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd fefc 	bl	8001870 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e193      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fee0 	bl	8001870 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7fd fedc 	bl	8001870 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e173      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x234>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fd fec9 	bl	8001870 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fd fec5 	bl	8001870 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e15c      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b8a      	ldr	r3, [pc, #552]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b83      	ldr	r3, [pc, #524]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a7e      	ldr	r2, [pc, #504]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b79      	ldr	r3, [pc, #484]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b76      	ldr	r3, [pc, #472]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fe85 	bl	8001870 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fd fe81 	bl	8001870 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e118      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d30 <HAL_RCC_OscConfig+0x4b0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x31e>
 8003b90:	4b66      	ldr	r3, [pc, #408]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a65      	ldr	r2, [pc, #404]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x340>
 8003ba6:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x358>
 8003bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a59      	ldr	r2, [pc, #356]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	4a56      	ldr	r2, [pc, #344]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fe46 	bl	8001870 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd fe42 	bl	8001870 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0d7      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x368>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fe30 	bl	8001870 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd fe2c 	bl	8001870 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0c1      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a3a      	ldr	r2, [pc, #232]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80ad 	beq.w	8003dac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d060      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d145      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fe00 	bl	8001870 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fd fdfc 	bl	8001870 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e093      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b29      	ldr	r3, [pc, #164]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	491b      	ldr	r1, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fd fdd1 	bl	8001870 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd fdcd 	bl	8001870 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e064      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x452>
 8003cf0:	e05c      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4b4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fdba 	bl	8001870 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fdb6 	bl	8001870 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e04d      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_OscConfig+0x4ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x480>
 8003d1e:	e045      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e040      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <HAL_RCC_OscConfig+0x538>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d030      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d129      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d122      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d119      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10f      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fa66 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	f000 ff0e 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04e      	b.n	8003f12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9e:	d01d      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a18      	ldr	r2, [pc, #96]	@ (8003f38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d111      	bne.n	8003f00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d010      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efe:	e007      	b.n	8003f10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800

08003f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e041      	b.n	8003fd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f839 	bl	8003fda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f000 fe4e 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e022      	b.n	8004062 <HAL_TIM_PWM_Start_DMA+0x72>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d109      	bne.n	8004036 <HAL_TIM_PWM_Start_DMA+0x46>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e015      	b.n	8004062 <HAL_TIM_PWM_Start_DMA+0x72>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d109      	bne.n	8004050 <HAL_TIM_PWM_Start_DMA+0x60>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e008      	b.n	8004062 <HAL_TIM_PWM_Start_DMA+0x72>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
 8004068:	e171      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_TIM_PWM_Start_DMA+0x94>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e022      	b.n	80040ca <HAL_TIM_PWM_Start_DMA+0xda>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b04      	cmp	r3, #4
 8004088:	d109      	bne.n	800409e <HAL_TIM_PWM_Start_DMA+0xae>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e015      	b.n	80040ca <HAL_TIM_PWM_Start_DMA+0xda>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d109      	bne.n	80040b8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e008      	b.n	80040ca <HAL_TIM_PWM_Start_DMA+0xda>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d024      	beq.n	8004118 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_TIM_PWM_Start_DMA+0xea>
 80040d4:	887b      	ldrh	r3, [r7, #2]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e137      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start_DMA+0xfe>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	e016      	b.n	800411c <HAL_TIM_PWM_Start_DMA+0x12c>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start_DMA+0x10e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040fc:	e00e      	b.n	800411c <HAL_TIM_PWM_Start_DMA+0x12c>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start_DMA+0x11e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800410c:	e006      	b.n	800411c <HAL_TIM_PWM_Start_DMA+0x12c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004116:	e001      	b.n	800411c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e118      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	f200 80ae 	bhi.w	8004280 <HAL_TIM_PWM_Start_DMA+0x290>
 8004124:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004161 	.word	0x08004161
 8004130:	08004281 	.word	0x08004281
 8004134:	08004281 	.word	0x08004281
 8004138:	08004281 	.word	0x08004281
 800413c:	080041a9 	.word	0x080041a9
 8004140:	08004281 	.word	0x08004281
 8004144:	08004281 	.word	0x08004281
 8004148:	08004281 	.word	0x08004281
 800414c:	080041f1 	.word	0x080041f1
 8004150:	08004281 	.word	0x08004281
 8004154:	08004281 	.word	0x08004281
 8004158:	08004281 	.word	0x08004281
 800415c:	08004239 	.word	0x08004239
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	4a7c      	ldr	r2, [pc, #496]	@ (8004358 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004166:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	4a7b      	ldr	r2, [pc, #492]	@ (800435c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	4a7a      	ldr	r2, [pc, #488]	@ (8004360 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004176:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3334      	adds	r3, #52	@ 0x34
 8004184:	461a      	mov	r2, r3
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	f7fe fbc6 	bl	8002918 <HAL_DMA_Start_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0db      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	60da      	str	r2, [r3, #12]
      break;
 80041a6:	e06e      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004358 <HAL_TIM_PWM_Start_DMA+0x368>)
 80041ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	4a69      	ldr	r2, [pc, #420]	@ (800435c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041bc:	4a68      	ldr	r2, [pc, #416]	@ (8004360 <HAL_TIM_PWM_Start_DMA+0x370>)
 80041be:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3338      	adds	r3, #56	@ 0x38
 80041cc:	461a      	mov	r2, r3
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	f7fe fba2 	bl	8002918 <HAL_DMA_Start_IT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0b7      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ec:	60da      	str	r2, [r3, #12]
      break;
 80041ee:	e04a      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <HAL_TIM_PWM_Start_DMA+0x368>)
 80041f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	4a57      	ldr	r2, [pc, #348]	@ (800435c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a56      	ldr	r2, [pc, #344]	@ (8004360 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004206:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	333c      	adds	r3, #60	@ 0x3c
 8004214:	461a      	mov	r2, r3
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	f7fe fb7e 	bl	8002918 <HAL_DMA_Start_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e093      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004234:	60da      	str	r2, [r3, #12]
      break;
 8004236:	e026      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	4a46      	ldr	r2, [pc, #280]	@ (8004358 <HAL_TIM_PWM_Start_DMA+0x368>)
 800423e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	4a45      	ldr	r2, [pc, #276]	@ (800435c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	4a44      	ldr	r2, [pc, #272]	@ (8004360 <HAL_TIM_PWM_Start_DMA+0x370>)
 800424e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3340      	adds	r3, #64	@ 0x40
 800425c:	461a      	mov	r2, r3
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	f7fe fb5a 	bl	8002918 <HAL_DMA_Start_IT>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e06f      	b.n	800434e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800427c:	60da      	str	r2, [r3, #12]
      break;
 800427e:	e002      	b.n	8004286 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	bf00      	nop
  }

  if (status == HAL_OK)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d15f      	bne.n	800434c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 ffb1 	bl	80051fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a31      	ldr	r2, [pc, #196]	@ (8004364 <HAL_TIM_PWM_Start_DMA+0x374>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIM_PWM_Start_DMA+0x2be>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004368 <HAL_TIM_PWM_Start_DMA+0x378>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a25      	ldr	r2, [pc, #148]	@ (8004364 <HAL_TIM_PWM_Start_DMA+0x374>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042da:	d01d      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a22      	ldr	r2, [pc, #136]	@ (800436c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <HAL_TIM_PWM_Start_DMA+0x380>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <HAL_TIM_PWM_Start_DMA+0x384>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004368 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <HAL_TIM_PWM_Start_DMA+0x388>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIM_PWM_Start_DMA+0x328>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1a      	ldr	r2, [pc, #104]	@ (800437c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d111      	bne.n	800433c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b06      	cmp	r3, #6
 8004328:	d010      	beq.n	800434c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	e007      	b.n	800434c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	08004b0d 	.word	0x08004b0d
 800435c:	08004bb5 	.word	0x08004bb5
 8004360:	08004a7b 	.word	0x08004a7b
 8004364:	40010000 	.word	0x40010000
 8004368:	40010400 	.word	0x40010400
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40014000 	.word	0x40014000
 800437c:	40001800 	.word	0x40001800

08004380 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d855      	bhi.n	8004440 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	08004441 	.word	0x08004441
 80043a4:	08004441 	.word	0x08004441
 80043a8:	08004441 	.word	0x08004441
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	08004441 	.word	0x08004441
 80043b4:	08004441 	.word	0x08004441
 80043b8:	08004441 	.word	0x08004441
 80043bc:	08004409 	.word	0x08004409
 80043c0:	08004441 	.word	0x08004441
 80043c4:	08004441 	.word	0x08004441
 80043c8:	08004441 	.word	0x08004441
 80043cc:	08004425 	.word	0x08004425
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe faef 	bl	80029c8 <HAL_DMA_Abort_IT>
      break;
 80043ea:	e02c      	b.n	8004446 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	4618      	mov	r0, r3
 8004402:	f7fe fae1 	bl	80029c8 <HAL_DMA_Abort_IT>
      break;
 8004406:	e01e      	b.n	8004446 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004416:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fad3 	bl	80029c8 <HAL_DMA_Abort_IT>
      break;
 8004422:	e010      	b.n	8004446 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004432:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fac5 	bl	80029c8 <HAL_DMA_Abort_IT>
      break;
 800443e:	e002      	b.n	8004446 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	bf00      	nop
  }

  if (status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d161      	bne.n	8004510 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2200      	movs	r2, #0
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fed1 	bl	80051fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2f      	ldr	r2, [pc, #188]	@ (800451c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_TIM_PWM_Stop_DMA+0xee>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2d      	ldr	r2, [pc, #180]	@ (8004520 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d017      	beq.n	80044a8 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a1a      	ldr	r2, [r3, #32]
 80044ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a1a      	ldr	r2, [r3, #32]
 80044be:	f240 4344 	movw	r3, #1092	@ 0x444
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_TIM_PWM_Stop_DMA+0x168>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044e6:	e013      	b.n	8004510 <HAL_TIM_PWM_Stop_DMA+0x190>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d104      	bne.n	80044f8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f6:	e00b      	b.n	8004510 <HAL_TIM_PWM_Stop_DMA+0x190>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d104      	bne.n	8004508 <HAL_TIM_PWM_Stop_DMA+0x188>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004506:	e003      	b.n	8004510 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40010400 	.word	0x40010400

08004524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0202 	mvn.w	r2, #2
 8004558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa5b 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa4d 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc f82d 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0204 	mvn.w	r2, #4
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa35 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa27 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fc f807 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0208 	mvn.w	r2, #8
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2204      	movs	r2, #4
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa0f 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fa01 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fb ffe1 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d020      	beq.n	800466c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0210 	mvn.w	r2, #16
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2208      	movs	r2, #8
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9e9 	bl	8004a2a <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f9db 	bl	8004a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fb ffbb 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00c      	beq.n	8004690 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d007      	beq.n	8004690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0201 	mvn.w	r2, #1
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fd72 	bl	8001174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00c      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fea2 	bl	80053f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f9bd 	bl	8004a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0220 	mvn.w	r2, #32
 80046f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fe74 	bl	80053e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0ae      	b.n	8004880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	f200 809f 	bhi.w	8004870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800476d 	.word	0x0800476d
 800473c:	08004871 	.word	0x08004871
 8004740:	08004871 	.word	0x08004871
 8004744:	08004871 	.word	0x08004871
 8004748:	080047ad 	.word	0x080047ad
 800474c:	08004871 	.word	0x08004871
 8004750:	08004871 	.word	0x08004871
 8004754:	08004871 	.word	0x08004871
 8004758:	080047ef 	.word	0x080047ef
 800475c:	08004871 	.word	0x08004871
 8004760:	08004871 	.word	0x08004871
 8004764:	08004871 	.word	0x08004871
 8004768:	0800482f 	.word	0x0800482f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 faf8 	bl	8004d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0208 	orr.w	r2, r2, #8
 8004786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e064      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fb48 	bl	8004e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6999      	ldr	r1, [r3, #24]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	619a      	str	r2, [r3, #24]
      break;
 80047ec:	e043      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fb9d 	bl	8004f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69da      	ldr	r2, [r3, #28]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0208 	orr.w	r2, r2, #8
 8004808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0204 	bic.w	r2, r2, #4
 8004818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	61da      	str	r2, [r3, #28]
      break;
 800482c:	e023      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fbf1 	bl	800501c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69d9      	ldr	r1, [r3, #28]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	021a      	lsls	r2, r3, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	61da      	str	r2, [r3, #28]
      break;
 800486e:	e002      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
      break;
 8004874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0b4      	b.n	8004a0e <HAL_TIM_ConfigClockSource+0x186>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048dc:	d03e      	beq.n	800495c <HAL_TIM_ConfigClockSource+0xd4>
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048e2:	f200 8087 	bhi.w	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	f000 8086 	beq.w	80049fa <HAL_TIM_ConfigClockSource+0x172>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f2:	d87f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d01a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0xa6>
 80048f8:	2b70      	cmp	r3, #112	@ 0x70
 80048fa:	d87b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b60      	cmp	r3, #96	@ 0x60
 80048fe:	d050      	beq.n	80049a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004900:	2b60      	cmp	r3, #96	@ 0x60
 8004902:	d877      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b50      	cmp	r3, #80	@ 0x50
 8004906:	d03c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0xfa>
 8004908:	2b50      	cmp	r3, #80	@ 0x50
 800490a:	d873      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d058      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d86f      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d064      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004918:	2b30      	cmp	r3, #48	@ 0x30
 800491a:	d86b      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d060      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d867      	bhi.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05c      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d05a      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	e062      	b.n	80049f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800493e:	f000 fc3d 	bl	80051bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	609a      	str	r2, [r3, #8]
      break;
 800495a:	e04f      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	f000 fc26 	bl	80051bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497e:	609a      	str	r2, [r3, #8]
      break;
 8004980:	e03c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	461a      	mov	r2, r3
 8004990:	f000 fb9a 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2150      	movs	r1, #80	@ 0x50
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fbf3 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 80049a0:	e02c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ae:	461a      	mov	r2, r3
 80049b0:	f000 fbb9 	bl	8005126 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2160      	movs	r1, #96	@ 0x60
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fbe3 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 80049c0:	e01c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	461a      	mov	r2, r3
 80049d0:	f000 fb7a 	bl	80050c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2140      	movs	r1, #64	@ 0x40
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fbd3 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f000 fbca 	bl	8005186 <TIM_ITRx_SetConfig>
      break;
 80049f2:	e003      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      break;
 80049f8:	e000      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d107      	bne.n	8004aa2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa0:	e02a      	b.n	8004af8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aba:	e01d      	b.n	8004af8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d107      	bne.n	8004ad6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad4:	e010      	b.n	8004af8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d107      	bne.n	8004af0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aee:	e003      	b.n	8004af8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff ffb4 	bl	8004a66 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d10b      	bne.n	8004b3c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d136      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3a:	e031      	b.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d10b      	bne.n	8004b5e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d125      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b5c:	e020      	b.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d10b      	bne.n	8004b80 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d114      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b7e:	e00f      	b.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d10a      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f7fb fd1b 	bl	80005dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d103      	bne.n	8004bd4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	771a      	strb	r2, [r3, #28]
 8004bd2:	e019      	b.n	8004c08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d103      	bne.n	8004be6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
 8004be4:	e010      	b.n	8004c08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d103      	bne.n	8004bf8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	771a      	strb	r2, [r3, #28]
 8004bf6:	e007      	b.n	8004c08 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d102      	bne.n	8004c08 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2208      	movs	r2, #8
 8004c06:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff ff18 	bl	8004a3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a40      	ldr	r2, [pc, #256]	@ (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3f      	ldr	r2, [pc, #252]	@ (8004d44 <TIM_Base_SetConfig+0x128>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3d      	ldr	r2, [pc, #244]	@ (8004d4c <TIM_Base_SetConfig+0x130>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a32      	ldr	r2, [pc, #200]	@ (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d02b      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d027      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2f      	ldr	r2, [pc, #188]	@ (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d023      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <TIM_Base_SetConfig+0x128>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01f      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <TIM_Base_SetConfig+0x130>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <TIM_Base_SetConfig+0x134>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8004d54 <TIM_Base_SetConfig+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <TIM_Base_SetConfig+0x13c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	@ (8004d5c <TIM_Base_SetConfig+0x140>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a27      	ldr	r2, [pc, #156]	@ (8004d60 <TIM_Base_SetConfig+0x144>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a26      	ldr	r2, [pc, #152]	@ (8004d64 <TIM_Base_SetConfig+0x148>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a0e      	ldr	r2, [pc, #56]	@ (8004d3c <TIM_Base_SetConfig+0x120>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_Base_SetConfig+0xf2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <TIM_Base_SetConfig+0x130>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d103      	bne.n	8004d16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	40001c00 	.word	0x40001c00
 8004d64:	40002000 	.word	0x40002000

08004d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f023 0201 	bic.w	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f023 0302 	bic.w	r3, r3, #2
 8004db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a20      	ldr	r2, [pc, #128]	@ (8004e40 <TIM_OC1_SetConfig+0xd8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x64>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e44 <TIM_OC1_SetConfig+0xdc>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <TIM_OC1_SetConfig+0xd8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC1_SetConfig+0x8e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a14      	ldr	r2, [pc, #80]	@ (8004e44 <TIM_OC1_SetConfig+0xdc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40010400 	.word	0x40010400

08004e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f023 0210 	bic.w	r2, r3, #16
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0320 	bic.w	r3, r3, #32
 8004e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <TIM_OC2_SetConfig+0xe4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x68>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a21      	ldr	r2, [pc, #132]	@ (8004f30 <TIM_OC2_SetConfig+0xe8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10d      	bne.n	8004ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a17      	ldr	r2, [pc, #92]	@ (8004f2c <TIM_OC2_SetConfig+0xe4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC2_SetConfig+0x94>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <TIM_OC2_SetConfig+0xe8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d113      	bne.n	8004f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a21      	ldr	r2, [pc, #132]	@ (8005014 <TIM_OC3_SetConfig+0xe0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC3_SetConfig+0x66>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a20      	ldr	r2, [pc, #128]	@ (8005018 <TIM_OC3_SetConfig+0xe4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10d      	bne.n	8004fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	@ (8005014 <TIM_OC3_SetConfig+0xe0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC3_SetConfig+0x92>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <TIM_OC3_SetConfig+0xe4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400

0800501c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800504a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	031b      	lsls	r3, r3, #12
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <TIM_OC4_SetConfig+0xa4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC4_SetConfig+0x68>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a11      	ldr	r2, [pc, #68]	@ (80050c4 <TIM_OC4_SetConfig+0xa8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d109      	bne.n	8005098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800508a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40010400 	.word	0x40010400

080050c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 030a 	bic.w	r3, r3, #10
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f023 0210 	bic.w	r2, r3, #16
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	031b      	lsls	r3, r3, #12
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005162:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f043 0307 	orr.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	021a      	lsls	r2, r3, #8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	431a      	orrs	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 031f 	and.w	r3, r3, #31
 800520e:	2201      	movs	r2, #1
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1a      	ldr	r2, [r3, #32]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	43db      	mvns	r3, r3
 800521e:	401a      	ands	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	fa01 f303 	lsl.w	r3, r1, r3
 8005234:	431a      	orrs	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e05a      	b.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d01d      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10c      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40001800 	.word	0x40001800

08005340 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005358:	2302      	movs	r3, #2
 800535a:	e03d      	b.n	80053d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b510      	push	{r4, lr}
 8005410:	b09d      	sub	sp, #116	@ 0x74
 8005412:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	9006      	str	r0, [sp, #24]
 8005418:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800541c:	480a      	ldr	r0, [pc, #40]	@ (8005448 <siprintf+0x3c>)
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	9104      	str	r1, [sp, #16]
 8005422:	490a      	ldr	r1, [pc, #40]	@ (800544c <siprintf+0x40>)
 8005424:	f853 2b04 	ldr.w	r2, [r3], #4
 8005428:	9105      	str	r1, [sp, #20]
 800542a:	2400      	movs	r4, #0
 800542c:	a902      	add	r1, sp, #8
 800542e:	6800      	ldr	r0, [r0, #0]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005434:	f000 f994 	bl	8005760 <_svfiprintf_r>
 8005438:	9b02      	ldr	r3, [sp, #8]
 800543a:	701c      	strb	r4, [r3, #0]
 800543c:	b01d      	add	sp, #116	@ 0x74
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	b003      	add	sp, #12
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010
 800544c:	ffff0208 	.word	0xffff0208

08005450 <memset>:
 8005450:	4402      	add	r2, r0
 8005452:	4603      	mov	r3, r0
 8005454:	4293      	cmp	r3, r2
 8005456:	d100      	bne.n	800545a <memset+0xa>
 8005458:	4770      	bx	lr
 800545a:	f803 1b01 	strb.w	r1, [r3], #1
 800545e:	e7f9      	b.n	8005454 <memset+0x4>

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	@ (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000010 	.word	0x20000010

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	@ (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	@ (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	@ (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	@ (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 fc64 	bl	8005d4c <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005e2c 	.word	0x08005e2c
 80054a8:	08005e2c 	.word	0x08005e2c
 80054ac:	08005e2c 	.word	0x08005e2c
 80054b0:	08005e30 	.word	0x08005e30

080054b4 <__retarget_lock_acquire_recursive>:
 80054b4:	4770      	bx	lr

080054b6 <__retarget_lock_release_recursive>:
 80054b6:	4770      	bx	lr

080054b8 <_free_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4605      	mov	r5, r0
 80054bc:	2900      	cmp	r1, #0
 80054be:	d041      	beq.n	8005544 <_free_r+0x8c>
 80054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c4:	1f0c      	subs	r4, r1, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfb8      	it	lt
 80054ca:	18e4      	addlt	r4, r4, r3
 80054cc:	f000 f8e0 	bl	8005690 <__malloc_lock>
 80054d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <_free_r+0x90>)
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	b933      	cbnz	r3, 80054e4 <_free_r+0x2c>
 80054d6:	6063      	str	r3, [r4, #4]
 80054d8:	6014      	str	r4, [r2, #0]
 80054da:	4628      	mov	r0, r5
 80054dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054e0:	f000 b8dc 	b.w	800569c <__malloc_unlock>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d908      	bls.n	80054fa <_free_r+0x42>
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	1821      	adds	r1, r4, r0
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf01      	itttt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	1809      	addeq	r1, r1, r0
 80054f6:	6021      	streq	r1, [r4, #0]
 80054f8:	e7ed      	b.n	80054d6 <_free_r+0x1e>
 80054fa:	461a      	mov	r2, r3
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	b10b      	cbz	r3, 8005504 <_free_r+0x4c>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d9fa      	bls.n	80054fa <_free_r+0x42>
 8005504:	6811      	ldr	r1, [r2, #0]
 8005506:	1850      	adds	r0, r2, r1
 8005508:	42a0      	cmp	r0, r4
 800550a:	d10b      	bne.n	8005524 <_free_r+0x6c>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	4401      	add	r1, r0
 8005510:	1850      	adds	r0, r2, r1
 8005512:	4283      	cmp	r3, r0
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	d1e0      	bne.n	80054da <_free_r+0x22>
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	6053      	str	r3, [r2, #4]
 800551e:	4408      	add	r0, r1
 8005520:	6010      	str	r0, [r2, #0]
 8005522:	e7da      	b.n	80054da <_free_r+0x22>
 8005524:	d902      	bls.n	800552c <_free_r+0x74>
 8005526:	230c      	movs	r3, #12
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	e7d6      	b.n	80054da <_free_r+0x22>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	1821      	adds	r1, r4, r0
 8005530:	428b      	cmp	r3, r1
 8005532:	bf04      	itt	eq
 8005534:	6819      	ldreq	r1, [r3, #0]
 8005536:	685b      	ldreq	r3, [r3, #4]
 8005538:	6063      	str	r3, [r4, #4]
 800553a:	bf04      	itt	eq
 800553c:	1809      	addeq	r1, r1, r0
 800553e:	6021      	streq	r1, [r4, #0]
 8005540:	6054      	str	r4, [r2, #4]
 8005542:	e7ca      	b.n	80054da <_free_r+0x22>
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	bf00      	nop
 8005548:	200011d4 	.word	0x200011d4

0800554c <sbrk_aligned>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	4e0f      	ldr	r6, [pc, #60]	@ (800558c <sbrk_aligned+0x40>)
 8005550:	460c      	mov	r4, r1
 8005552:	6831      	ldr	r1, [r6, #0]
 8005554:	4605      	mov	r5, r0
 8005556:	b911      	cbnz	r1, 800555e <sbrk_aligned+0x12>
 8005558:	f000 fba4 	bl	8005ca4 <_sbrk_r>
 800555c:	6030      	str	r0, [r6, #0]
 800555e:	4621      	mov	r1, r4
 8005560:	4628      	mov	r0, r5
 8005562:	f000 fb9f 	bl	8005ca4 <_sbrk_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	d103      	bne.n	8005572 <sbrk_aligned+0x26>
 800556a:	f04f 34ff 	mov.w	r4, #4294967295
 800556e:	4620      	mov	r0, r4
 8005570:	bd70      	pop	{r4, r5, r6, pc}
 8005572:	1cc4      	adds	r4, r0, #3
 8005574:	f024 0403 	bic.w	r4, r4, #3
 8005578:	42a0      	cmp	r0, r4
 800557a:	d0f8      	beq.n	800556e <sbrk_aligned+0x22>
 800557c:	1a21      	subs	r1, r4, r0
 800557e:	4628      	mov	r0, r5
 8005580:	f000 fb90 	bl	8005ca4 <_sbrk_r>
 8005584:	3001      	adds	r0, #1
 8005586:	d1f2      	bne.n	800556e <sbrk_aligned+0x22>
 8005588:	e7ef      	b.n	800556a <sbrk_aligned+0x1e>
 800558a:	bf00      	nop
 800558c:	200011d0 	.word	0x200011d0

08005590 <_malloc_r>:
 8005590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005594:	1ccd      	adds	r5, r1, #3
 8005596:	f025 0503 	bic.w	r5, r5, #3
 800559a:	3508      	adds	r5, #8
 800559c:	2d0c      	cmp	r5, #12
 800559e:	bf38      	it	cc
 80055a0:	250c      	movcc	r5, #12
 80055a2:	2d00      	cmp	r5, #0
 80055a4:	4606      	mov	r6, r0
 80055a6:	db01      	blt.n	80055ac <_malloc_r+0x1c>
 80055a8:	42a9      	cmp	r1, r5
 80055aa:	d904      	bls.n	80055b6 <_malloc_r+0x26>
 80055ac:	230c      	movs	r3, #12
 80055ae:	6033      	str	r3, [r6, #0]
 80055b0:	2000      	movs	r0, #0
 80055b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800568c <_malloc_r+0xfc>
 80055ba:	f000 f869 	bl	8005690 <__malloc_lock>
 80055be:	f8d8 3000 	ldr.w	r3, [r8]
 80055c2:	461c      	mov	r4, r3
 80055c4:	bb44      	cbnz	r4, 8005618 <_malloc_r+0x88>
 80055c6:	4629      	mov	r1, r5
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff ffbf 	bl	800554c <sbrk_aligned>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	4604      	mov	r4, r0
 80055d2:	d158      	bne.n	8005686 <_malloc_r+0xf6>
 80055d4:	f8d8 4000 	ldr.w	r4, [r8]
 80055d8:	4627      	mov	r7, r4
 80055da:	2f00      	cmp	r7, #0
 80055dc:	d143      	bne.n	8005666 <_malloc_r+0xd6>
 80055de:	2c00      	cmp	r4, #0
 80055e0:	d04b      	beq.n	800567a <_malloc_r+0xea>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	4639      	mov	r1, r7
 80055e6:	4630      	mov	r0, r6
 80055e8:	eb04 0903 	add.w	r9, r4, r3
 80055ec:	f000 fb5a 	bl	8005ca4 <_sbrk_r>
 80055f0:	4581      	cmp	r9, r0
 80055f2:	d142      	bne.n	800567a <_malloc_r+0xea>
 80055f4:	6821      	ldr	r1, [r4, #0]
 80055f6:	1a6d      	subs	r5, r5, r1
 80055f8:	4629      	mov	r1, r5
 80055fa:	4630      	mov	r0, r6
 80055fc:	f7ff ffa6 	bl	800554c <sbrk_aligned>
 8005600:	3001      	adds	r0, #1
 8005602:	d03a      	beq.n	800567a <_malloc_r+0xea>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	442b      	add	r3, r5
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	f8d8 3000 	ldr.w	r3, [r8]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	bb62      	cbnz	r2, 800566c <_malloc_r+0xdc>
 8005612:	f8c8 7000 	str.w	r7, [r8]
 8005616:	e00f      	b.n	8005638 <_malloc_r+0xa8>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	1b52      	subs	r2, r2, r5
 800561c:	d420      	bmi.n	8005660 <_malloc_r+0xd0>
 800561e:	2a0b      	cmp	r2, #11
 8005620:	d917      	bls.n	8005652 <_malloc_r+0xc2>
 8005622:	1961      	adds	r1, r4, r5
 8005624:	42a3      	cmp	r3, r4
 8005626:	6025      	str	r5, [r4, #0]
 8005628:	bf18      	it	ne
 800562a:	6059      	strne	r1, [r3, #4]
 800562c:	6863      	ldr	r3, [r4, #4]
 800562e:	bf08      	it	eq
 8005630:	f8c8 1000 	streq.w	r1, [r8]
 8005634:	5162      	str	r2, [r4, r5]
 8005636:	604b      	str	r3, [r1, #4]
 8005638:	4630      	mov	r0, r6
 800563a:	f000 f82f 	bl	800569c <__malloc_unlock>
 800563e:	f104 000b 	add.w	r0, r4, #11
 8005642:	1d23      	adds	r3, r4, #4
 8005644:	f020 0007 	bic.w	r0, r0, #7
 8005648:	1ac2      	subs	r2, r0, r3
 800564a:	bf1c      	itt	ne
 800564c:	1a1b      	subne	r3, r3, r0
 800564e:	50a3      	strne	r3, [r4, r2]
 8005650:	e7af      	b.n	80055b2 <_malloc_r+0x22>
 8005652:	6862      	ldr	r2, [r4, #4]
 8005654:	42a3      	cmp	r3, r4
 8005656:	bf0c      	ite	eq
 8005658:	f8c8 2000 	streq.w	r2, [r8]
 800565c:	605a      	strne	r2, [r3, #4]
 800565e:	e7eb      	b.n	8005638 <_malloc_r+0xa8>
 8005660:	4623      	mov	r3, r4
 8005662:	6864      	ldr	r4, [r4, #4]
 8005664:	e7ae      	b.n	80055c4 <_malloc_r+0x34>
 8005666:	463c      	mov	r4, r7
 8005668:	687f      	ldr	r7, [r7, #4]
 800566a:	e7b6      	b.n	80055da <_malloc_r+0x4a>
 800566c:	461a      	mov	r2, r3
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	42a3      	cmp	r3, r4
 8005672:	d1fb      	bne.n	800566c <_malloc_r+0xdc>
 8005674:	2300      	movs	r3, #0
 8005676:	6053      	str	r3, [r2, #4]
 8005678:	e7de      	b.n	8005638 <_malloc_r+0xa8>
 800567a:	230c      	movs	r3, #12
 800567c:	6033      	str	r3, [r6, #0]
 800567e:	4630      	mov	r0, r6
 8005680:	f000 f80c 	bl	800569c <__malloc_unlock>
 8005684:	e794      	b.n	80055b0 <_malloc_r+0x20>
 8005686:	6005      	str	r5, [r0, #0]
 8005688:	e7d6      	b.n	8005638 <_malloc_r+0xa8>
 800568a:	bf00      	nop
 800568c:	200011d4 	.word	0x200011d4

08005690 <__malloc_lock>:
 8005690:	4801      	ldr	r0, [pc, #4]	@ (8005698 <__malloc_lock+0x8>)
 8005692:	f7ff bf0f 	b.w	80054b4 <__retarget_lock_acquire_recursive>
 8005696:	bf00      	nop
 8005698:	200011cc 	.word	0x200011cc

0800569c <__malloc_unlock>:
 800569c:	4801      	ldr	r0, [pc, #4]	@ (80056a4 <__malloc_unlock+0x8>)
 800569e:	f7ff bf0a 	b.w	80054b6 <__retarget_lock_release_recursive>
 80056a2:	bf00      	nop
 80056a4:	200011cc 	.word	0x200011cc

080056a8 <__ssputs_r>:
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	688e      	ldr	r6, [r1, #8]
 80056ae:	461f      	mov	r7, r3
 80056b0:	42be      	cmp	r6, r7
 80056b2:	680b      	ldr	r3, [r1, #0]
 80056b4:	4682      	mov	sl, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	4690      	mov	r8, r2
 80056ba:	d82d      	bhi.n	8005718 <__ssputs_r+0x70>
 80056bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056c4:	d026      	beq.n	8005714 <__ssputs_r+0x6c>
 80056c6:	6965      	ldr	r5, [r4, #20]
 80056c8:	6909      	ldr	r1, [r1, #16]
 80056ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ce:	eba3 0901 	sub.w	r9, r3, r1
 80056d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056d6:	1c7b      	adds	r3, r7, #1
 80056d8:	444b      	add	r3, r9
 80056da:	106d      	asrs	r5, r5, #1
 80056dc:	429d      	cmp	r5, r3
 80056de:	bf38      	it	cc
 80056e0:	461d      	movcc	r5, r3
 80056e2:	0553      	lsls	r3, r2, #21
 80056e4:	d527      	bpl.n	8005736 <__ssputs_r+0x8e>
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7ff ff52 	bl	8005590 <_malloc_r>
 80056ec:	4606      	mov	r6, r0
 80056ee:	b360      	cbz	r0, 800574a <__ssputs_r+0xa2>
 80056f0:	6921      	ldr	r1, [r4, #16]
 80056f2:	464a      	mov	r2, r9
 80056f4:	f000 fae6 	bl	8005cc4 <memcpy>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005702:	81a3      	strh	r3, [r4, #12]
 8005704:	6126      	str	r6, [r4, #16]
 8005706:	6165      	str	r5, [r4, #20]
 8005708:	444e      	add	r6, r9
 800570a:	eba5 0509 	sub.w	r5, r5, r9
 800570e:	6026      	str	r6, [r4, #0]
 8005710:	60a5      	str	r5, [r4, #8]
 8005712:	463e      	mov	r6, r7
 8005714:	42be      	cmp	r6, r7
 8005716:	d900      	bls.n	800571a <__ssputs_r+0x72>
 8005718:	463e      	mov	r6, r7
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	4632      	mov	r2, r6
 800571e:	4641      	mov	r1, r8
 8005720:	f000 faa6 	bl	8005c70 <memmove>
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	1b9b      	subs	r3, r3, r6
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	4433      	add	r3, r6
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	2000      	movs	r0, #0
 8005732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005736:	462a      	mov	r2, r5
 8005738:	f000 fad2 	bl	8005ce0 <_realloc_r>
 800573c:	4606      	mov	r6, r0
 800573e:	2800      	cmp	r0, #0
 8005740:	d1e0      	bne.n	8005704 <__ssputs_r+0x5c>
 8005742:	6921      	ldr	r1, [r4, #16]
 8005744:	4650      	mov	r0, sl
 8005746:	f7ff feb7 	bl	80054b8 <_free_r>
 800574a:	230c      	movs	r3, #12
 800574c:	f8ca 3000 	str.w	r3, [sl]
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	f04f 30ff 	mov.w	r0, #4294967295
 800575c:	e7e9      	b.n	8005732 <__ssputs_r+0x8a>
	...

08005760 <_svfiprintf_r>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	4698      	mov	r8, r3
 8005766:	898b      	ldrh	r3, [r1, #12]
 8005768:	061b      	lsls	r3, r3, #24
 800576a:	b09d      	sub	sp, #116	@ 0x74
 800576c:	4607      	mov	r7, r0
 800576e:	460d      	mov	r5, r1
 8005770:	4614      	mov	r4, r2
 8005772:	d510      	bpl.n	8005796 <_svfiprintf_r+0x36>
 8005774:	690b      	ldr	r3, [r1, #16]
 8005776:	b973      	cbnz	r3, 8005796 <_svfiprintf_r+0x36>
 8005778:	2140      	movs	r1, #64	@ 0x40
 800577a:	f7ff ff09 	bl	8005590 <_malloc_r>
 800577e:	6028      	str	r0, [r5, #0]
 8005780:	6128      	str	r0, [r5, #16]
 8005782:	b930      	cbnz	r0, 8005792 <_svfiprintf_r+0x32>
 8005784:	230c      	movs	r3, #12
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	b01d      	add	sp, #116	@ 0x74
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	2340      	movs	r3, #64	@ 0x40
 8005794:	616b      	str	r3, [r5, #20]
 8005796:	2300      	movs	r3, #0
 8005798:	9309      	str	r3, [sp, #36]	@ 0x24
 800579a:	2320      	movs	r3, #32
 800579c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057a4:	2330      	movs	r3, #48	@ 0x30
 80057a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005944 <_svfiprintf_r+0x1e4>
 80057aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057ae:	f04f 0901 	mov.w	r9, #1
 80057b2:	4623      	mov	r3, r4
 80057b4:	469a      	mov	sl, r3
 80057b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ba:	b10a      	cbz	r2, 80057c0 <_svfiprintf_r+0x60>
 80057bc:	2a25      	cmp	r2, #37	@ 0x25
 80057be:	d1f9      	bne.n	80057b4 <_svfiprintf_r+0x54>
 80057c0:	ebba 0b04 	subs.w	fp, sl, r4
 80057c4:	d00b      	beq.n	80057de <_svfiprintf_r+0x7e>
 80057c6:	465b      	mov	r3, fp
 80057c8:	4622      	mov	r2, r4
 80057ca:	4629      	mov	r1, r5
 80057cc:	4638      	mov	r0, r7
 80057ce:	f7ff ff6b 	bl	80056a8 <__ssputs_r>
 80057d2:	3001      	adds	r0, #1
 80057d4:	f000 80a7 	beq.w	8005926 <_svfiprintf_r+0x1c6>
 80057d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057da:	445a      	add	r2, fp
 80057dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057de:	f89a 3000 	ldrb.w	r3, [sl]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 809f 	beq.w	8005926 <_svfiprintf_r+0x1c6>
 80057e8:	2300      	movs	r3, #0
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057f2:	f10a 0a01 	add.w	sl, sl, #1
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	9307      	str	r3, [sp, #28]
 80057fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005800:	4654      	mov	r4, sl
 8005802:	2205      	movs	r2, #5
 8005804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005808:	484e      	ldr	r0, [pc, #312]	@ (8005944 <_svfiprintf_r+0x1e4>)
 800580a:	f7fa fd01 	bl	8000210 <memchr>
 800580e:	9a04      	ldr	r2, [sp, #16]
 8005810:	b9d8      	cbnz	r0, 800584a <_svfiprintf_r+0xea>
 8005812:	06d0      	lsls	r0, r2, #27
 8005814:	bf44      	itt	mi
 8005816:	2320      	movmi	r3, #32
 8005818:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581c:	0711      	lsls	r1, r2, #28
 800581e:	bf44      	itt	mi
 8005820:	232b      	movmi	r3, #43	@ 0x2b
 8005822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005826:	f89a 3000 	ldrb.w	r3, [sl]
 800582a:	2b2a      	cmp	r3, #42	@ 0x2a
 800582c:	d015      	beq.n	800585a <_svfiprintf_r+0xfa>
 800582e:	9a07      	ldr	r2, [sp, #28]
 8005830:	4654      	mov	r4, sl
 8005832:	2000      	movs	r0, #0
 8005834:	f04f 0c0a 	mov.w	ip, #10
 8005838:	4621      	mov	r1, r4
 800583a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800583e:	3b30      	subs	r3, #48	@ 0x30
 8005840:	2b09      	cmp	r3, #9
 8005842:	d94b      	bls.n	80058dc <_svfiprintf_r+0x17c>
 8005844:	b1b0      	cbz	r0, 8005874 <_svfiprintf_r+0x114>
 8005846:	9207      	str	r2, [sp, #28]
 8005848:	e014      	b.n	8005874 <_svfiprintf_r+0x114>
 800584a:	eba0 0308 	sub.w	r3, r0, r8
 800584e:	fa09 f303 	lsl.w	r3, r9, r3
 8005852:	4313      	orrs	r3, r2
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	46a2      	mov	sl, r4
 8005858:	e7d2      	b.n	8005800 <_svfiprintf_r+0xa0>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	1d19      	adds	r1, r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	9103      	str	r1, [sp, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	bfbb      	ittet	lt
 8005866:	425b      	neglt	r3, r3
 8005868:	f042 0202 	orrlt.w	r2, r2, #2
 800586c:	9307      	strge	r3, [sp, #28]
 800586e:	9307      	strlt	r3, [sp, #28]
 8005870:	bfb8      	it	lt
 8005872:	9204      	strlt	r2, [sp, #16]
 8005874:	7823      	ldrb	r3, [r4, #0]
 8005876:	2b2e      	cmp	r3, #46	@ 0x2e
 8005878:	d10a      	bne.n	8005890 <_svfiprintf_r+0x130>
 800587a:	7863      	ldrb	r3, [r4, #1]
 800587c:	2b2a      	cmp	r3, #42	@ 0x2a
 800587e:	d132      	bne.n	80058e6 <_svfiprintf_r+0x186>
 8005880:	9b03      	ldr	r3, [sp, #12]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	9203      	str	r2, [sp, #12]
 8005888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800588c:	3402      	adds	r4, #2
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005954 <_svfiprintf_r+0x1f4>
 8005894:	7821      	ldrb	r1, [r4, #0]
 8005896:	2203      	movs	r2, #3
 8005898:	4650      	mov	r0, sl
 800589a:	f7fa fcb9 	bl	8000210 <memchr>
 800589e:	b138      	cbz	r0, 80058b0 <_svfiprintf_r+0x150>
 80058a0:	9b04      	ldr	r3, [sp, #16]
 80058a2:	eba0 000a 	sub.w	r0, r0, sl
 80058a6:	2240      	movs	r2, #64	@ 0x40
 80058a8:	4082      	lsls	r2, r0
 80058aa:	4313      	orrs	r3, r2
 80058ac:	3401      	adds	r4, #1
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b4:	4824      	ldr	r0, [pc, #144]	@ (8005948 <_svfiprintf_r+0x1e8>)
 80058b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058ba:	2206      	movs	r2, #6
 80058bc:	f7fa fca8 	bl	8000210 <memchr>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d036      	beq.n	8005932 <_svfiprintf_r+0x1d2>
 80058c4:	4b21      	ldr	r3, [pc, #132]	@ (800594c <_svfiprintf_r+0x1ec>)
 80058c6:	bb1b      	cbnz	r3, 8005910 <_svfiprintf_r+0x1b0>
 80058c8:	9b03      	ldr	r3, [sp, #12]
 80058ca:	3307      	adds	r3, #7
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	3308      	adds	r3, #8
 80058d2:	9303      	str	r3, [sp, #12]
 80058d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d6:	4433      	add	r3, r6
 80058d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058da:	e76a      	b.n	80057b2 <_svfiprintf_r+0x52>
 80058dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80058e0:	460c      	mov	r4, r1
 80058e2:	2001      	movs	r0, #1
 80058e4:	e7a8      	b.n	8005838 <_svfiprintf_r+0xd8>
 80058e6:	2300      	movs	r3, #0
 80058e8:	3401      	adds	r4, #1
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	4619      	mov	r1, r3
 80058ee:	f04f 0c0a 	mov.w	ip, #10
 80058f2:	4620      	mov	r0, r4
 80058f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f8:	3a30      	subs	r2, #48	@ 0x30
 80058fa:	2a09      	cmp	r2, #9
 80058fc:	d903      	bls.n	8005906 <_svfiprintf_r+0x1a6>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0c6      	beq.n	8005890 <_svfiprintf_r+0x130>
 8005902:	9105      	str	r1, [sp, #20]
 8005904:	e7c4      	b.n	8005890 <_svfiprintf_r+0x130>
 8005906:	fb0c 2101 	mla	r1, ip, r1, r2
 800590a:	4604      	mov	r4, r0
 800590c:	2301      	movs	r3, #1
 800590e:	e7f0      	b.n	80058f2 <_svfiprintf_r+0x192>
 8005910:	ab03      	add	r3, sp, #12
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	462a      	mov	r2, r5
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <_svfiprintf_r+0x1f0>)
 8005918:	a904      	add	r1, sp, #16
 800591a:	4638      	mov	r0, r7
 800591c:	f3af 8000 	nop.w
 8005920:	1c42      	adds	r2, r0, #1
 8005922:	4606      	mov	r6, r0
 8005924:	d1d6      	bne.n	80058d4 <_svfiprintf_r+0x174>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	065b      	lsls	r3, r3, #25
 800592a:	f53f af2d 	bmi.w	8005788 <_svfiprintf_r+0x28>
 800592e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005930:	e72c      	b.n	800578c <_svfiprintf_r+0x2c>
 8005932:	ab03      	add	r3, sp, #12
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	462a      	mov	r2, r5
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <_svfiprintf_r+0x1f0>)
 800593a:	a904      	add	r1, sp, #16
 800593c:	4638      	mov	r0, r7
 800593e:	f000 f879 	bl	8005a34 <_printf_i>
 8005942:	e7ed      	b.n	8005920 <_svfiprintf_r+0x1c0>
 8005944:	08005df0 	.word	0x08005df0
 8005948:	08005dfa 	.word	0x08005dfa
 800594c:	00000000 	.word	0x00000000
 8005950:	080056a9 	.word	0x080056a9
 8005954:	08005df6 	.word	0x08005df6

08005958 <_printf_common>:
 8005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	4616      	mov	r6, r2
 800595e:	4698      	mov	r8, r3
 8005960:	688a      	ldr	r2, [r1, #8]
 8005962:	690b      	ldr	r3, [r1, #16]
 8005964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005968:	4293      	cmp	r3, r2
 800596a:	bfb8      	it	lt
 800596c:	4613      	movlt	r3, r2
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005974:	4607      	mov	r7, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b10a      	cbz	r2, 800597e <_printf_common+0x26>
 800597a:	3301      	adds	r3, #1
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	0699      	lsls	r1, r3, #26
 8005982:	bf42      	ittt	mi
 8005984:	6833      	ldrmi	r3, [r6, #0]
 8005986:	3302      	addmi	r3, #2
 8005988:	6033      	strmi	r3, [r6, #0]
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	f015 0506 	ands.w	r5, r5, #6
 8005990:	d106      	bne.n	80059a0 <_printf_common+0x48>
 8005992:	f104 0a19 	add.w	sl, r4, #25
 8005996:	68e3      	ldr	r3, [r4, #12]
 8005998:	6832      	ldr	r2, [r6, #0]
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	42ab      	cmp	r3, r5
 800599e:	dc26      	bgt.n	80059ee <_printf_common+0x96>
 80059a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	3b00      	subs	r3, #0
 80059a8:	bf18      	it	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	0692      	lsls	r2, r2, #26
 80059ae:	d42b      	bmi.n	8005a08 <_printf_common+0xb0>
 80059b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059b4:	4641      	mov	r1, r8
 80059b6:	4638      	mov	r0, r7
 80059b8:	47c8      	blx	r9
 80059ba:	3001      	adds	r0, #1
 80059bc:	d01e      	beq.n	80059fc <_printf_common+0xa4>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	f003 0306 	and.w	r3, r3, #6
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	bf02      	ittt	eq
 80059ca:	68e5      	ldreq	r5, [r4, #12]
 80059cc:	6833      	ldreq	r3, [r6, #0]
 80059ce:	1aed      	subeq	r5, r5, r3
 80059d0:	68a3      	ldr	r3, [r4, #8]
 80059d2:	bf0c      	ite	eq
 80059d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d8:	2500      	movne	r5, #0
 80059da:	4293      	cmp	r3, r2
 80059dc:	bfc4      	itt	gt
 80059de:	1a9b      	subgt	r3, r3, r2
 80059e0:	18ed      	addgt	r5, r5, r3
 80059e2:	2600      	movs	r6, #0
 80059e4:	341a      	adds	r4, #26
 80059e6:	42b5      	cmp	r5, r6
 80059e8:	d11a      	bne.n	8005a20 <_printf_common+0xc8>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e008      	b.n	8005a00 <_printf_common+0xa8>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4652      	mov	r2, sl
 80059f2:	4641      	mov	r1, r8
 80059f4:	4638      	mov	r0, r7
 80059f6:	47c8      	blx	r9
 80059f8:	3001      	adds	r0, #1
 80059fa:	d103      	bne.n	8005a04 <_printf_common+0xac>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	3501      	adds	r5, #1
 8005a06:	e7c6      	b.n	8005996 <_printf_common+0x3e>
 8005a08:	18e1      	adds	r1, r4, r3
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	2030      	movs	r0, #48	@ 0x30
 8005a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a12:	4422      	add	r2, r4
 8005a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	e7c7      	b.n	80059b0 <_printf_common+0x58>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4622      	mov	r2, r4
 8005a24:	4641      	mov	r1, r8
 8005a26:	4638      	mov	r0, r7
 8005a28:	47c8      	blx	r9
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d0e6      	beq.n	80059fc <_printf_common+0xa4>
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7d9      	b.n	80059e6 <_printf_common+0x8e>
	...

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	7e0f      	ldrb	r7, [r1, #24]
 8005a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a3c:	2f78      	cmp	r7, #120	@ 0x78
 8005a3e:	4691      	mov	r9, r2
 8005a40:	4680      	mov	r8, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	469a      	mov	sl, r3
 8005a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	@ 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d1 	beq.w	8005bf8 <_printf_i+0x1c4>
 8005a56:	2f58      	cmp	r7, #88	@ 0x58
 8005a58:	f000 80b8 	beq.w	8005bcc <_printf_i+0x198>
 8005a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a74 <_printf_i+0x40>)
 8005a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005bdf 	.word	0x08005bdf
 8005aa4:	08005b0b 	.word	0x08005b0b
 8005aa8:	08005b99 	.word	0x08005b99
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c01 	.word	0x08005c01
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b0b 	.word	0x08005b0b
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005ba1 	.word	0x08005ba1
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e09c      	b.n	8005c1a <_printf_i+0x1e6>
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6031      	str	r1, [r6, #0]
 8005ae8:	0606      	lsls	r6, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xbc>
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <_printf_i+0xc4>
 8005af0:	0645      	lsls	r5, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xb8>
 8005af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	da03      	bge.n	8005b04 <_printf_i+0xd0>
 8005afc:	232d      	movs	r3, #45	@ 0x2d
 8005afe:	426d      	negs	r5, r5
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b04:	4858      	ldr	r0, [pc, #352]	@ (8005c68 <_printf_i+0x234>)
 8005b06:	230a      	movs	r3, #10
 8005b08:	e011      	b.n	8005b2e <_printf_i+0xfa>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	0608      	lsls	r0, r1, #24
 8005b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0xe8>
 8005b16:	0649      	lsls	r1, r1, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2ad      	uxthmi	r5, r5
 8005b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b1e:	4852      	ldr	r0, [pc, #328]	@ (8005c68 <_printf_i+0x234>)
 8005b20:	6033      	str	r3, [r6, #0]
 8005b22:	bf14      	ite	ne
 8005b24:	230a      	movne	r3, #10
 8005b26:	2308      	moveq	r3, #8
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b2e:	6866      	ldr	r6, [r4, #4]
 8005b30:	60a6      	str	r6, [r4, #8]
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	db05      	blt.n	8005b42 <_printf_i+0x10e>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	432e      	orrs	r6, r5
 8005b3a:	f021 0104 	bic.w	r1, r1, #4
 8005b3e:	6021      	str	r1, [r4, #0]
 8005b40:	d04b      	beq.n	8005bda <_printf_i+0x1a6>
 8005b42:	4616      	mov	r6, r2
 8005b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b48:	fb03 5711 	mls	r7, r3, r1, r5
 8005b4c:	5dc7      	ldrb	r7, [r0, r7]
 8005b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b52:	462f      	mov	r7, r5
 8005b54:	42bb      	cmp	r3, r7
 8005b56:	460d      	mov	r5, r1
 8005b58:	d9f4      	bls.n	8005b44 <_printf_i+0x110>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d10b      	bne.n	8005b76 <_printf_i+0x142>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07df      	lsls	r7, r3, #31
 8005b62:	d508      	bpl.n	8005b76 <_printf_i+0x142>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6861      	ldr	r1, [r4, #4]
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	bfde      	ittt	le
 8005b6c:	2330      	movle	r3, #48	@ 0x30
 8005b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b76:	1b92      	subs	r2, r2, r6
 8005b78:	6122      	str	r2, [r4, #16]
 8005b7a:	f8cd a000 	str.w	sl, [sp]
 8005b7e:	464b      	mov	r3, r9
 8005b80:	aa03      	add	r2, sp, #12
 8005b82:	4621      	mov	r1, r4
 8005b84:	4640      	mov	r0, r8
 8005b86:	f7ff fee7 	bl	8005958 <_printf_common>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d14a      	bne.n	8005c24 <_printf_i+0x1f0>
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	b004      	add	sp, #16
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f043 0320 	orr.w	r3, r3, #32
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	4832      	ldr	r0, [pc, #200]	@ (8005c6c <_printf_i+0x238>)
 8005ba2:	2778      	movs	r7, #120	@ 0x78
 8005ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	6831      	ldr	r1, [r6, #0]
 8005bac:	061f      	lsls	r7, r3, #24
 8005bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bb2:	d402      	bmi.n	8005bba <_printf_i+0x186>
 8005bb4:	065f      	lsls	r7, r3, #25
 8005bb6:	bf48      	it	mi
 8005bb8:	b2ad      	uxthmi	r5, r5
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	bf44      	itt	mi
 8005bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc4:	6023      	strmi	r3, [r4, #0]
 8005bc6:	b11d      	cbz	r5, 8005bd0 <_printf_i+0x19c>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	e7ad      	b.n	8005b28 <_printf_i+0xf4>
 8005bcc:	4826      	ldr	r0, [pc, #152]	@ (8005c68 <_printf_i+0x234>)
 8005bce:	e7e9      	b.n	8005ba4 <_printf_i+0x170>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f023 0320 	bic.w	r3, r3, #32
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	e7f6      	b.n	8005bc8 <_printf_i+0x194>
 8005bda:	4616      	mov	r6, r2
 8005bdc:	e7bd      	b.n	8005b5a <_printf_i+0x126>
 8005bde:	6833      	ldr	r3, [r6, #0]
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	6961      	ldr	r1, [r4, #20]
 8005be4:	1d18      	adds	r0, r3, #4
 8005be6:	6030      	str	r0, [r6, #0]
 8005be8:	062e      	lsls	r6, r5, #24
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	d501      	bpl.n	8005bf2 <_printf_i+0x1be>
 8005bee:	6019      	str	r1, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <_printf_i+0x1c4>
 8005bf2:	0668      	lsls	r0, r5, #25
 8005bf4:	d5fb      	bpl.n	8005bee <_printf_i+0x1ba>
 8005bf6:	8019      	strh	r1, [r3, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	e7bc      	b.n	8005b7a <_printf_i+0x146>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	6032      	str	r2, [r6, #0]
 8005c06:	681e      	ldr	r6, [r3, #0]
 8005c08:	6862      	ldr	r2, [r4, #4]
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7fa faff 	bl	8000210 <memchr>
 8005c12:	b108      	cbz	r0, 8005c18 <_printf_i+0x1e4>
 8005c14:	1b80      	subs	r0, r0, r6
 8005c16:	6060      	str	r0, [r4, #4]
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c22:	e7aa      	b.n	8005b7a <_printf_i+0x146>
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	4632      	mov	r2, r6
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	47d0      	blx	sl
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d0ad      	beq.n	8005b8e <_printf_i+0x15a>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	079b      	lsls	r3, r3, #30
 8005c36:	d413      	bmi.n	8005c60 <_printf_i+0x22c>
 8005c38:	68e0      	ldr	r0, [r4, #12]
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	bfb8      	it	lt
 8005c40:	4618      	movlt	r0, r3
 8005c42:	e7a6      	b.n	8005b92 <_printf_i+0x15e>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4632      	mov	r2, r6
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	47d0      	blx	sl
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d09d      	beq.n	8005b8e <_printf_i+0x15a>
 8005c52:	3501      	adds	r5, #1
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	9903      	ldr	r1, [sp, #12]
 8005c58:	1a5b      	subs	r3, r3, r1
 8005c5a:	42ab      	cmp	r3, r5
 8005c5c:	dcf2      	bgt.n	8005c44 <_printf_i+0x210>
 8005c5e:	e7eb      	b.n	8005c38 <_printf_i+0x204>
 8005c60:	2500      	movs	r5, #0
 8005c62:	f104 0619 	add.w	r6, r4, #25
 8005c66:	e7f5      	b.n	8005c54 <_printf_i+0x220>
 8005c68:	08005e01 	.word	0x08005e01
 8005c6c:	08005e12 	.word	0x08005e12

08005c70 <memmove>:
 8005c70:	4288      	cmp	r0, r1
 8005c72:	b510      	push	{r4, lr}
 8005c74:	eb01 0402 	add.w	r4, r1, r2
 8005c78:	d902      	bls.n	8005c80 <memmove+0x10>
 8005c7a:	4284      	cmp	r4, r0
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	d807      	bhi.n	8005c90 <memmove+0x20>
 8005c80:	1e43      	subs	r3, r0, #1
 8005c82:	42a1      	cmp	r1, r4
 8005c84:	d008      	beq.n	8005c98 <memmove+0x28>
 8005c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c8e:	e7f8      	b.n	8005c82 <memmove+0x12>
 8005c90:	4402      	add	r2, r0
 8005c92:	4601      	mov	r1, r0
 8005c94:	428a      	cmp	r2, r1
 8005c96:	d100      	bne.n	8005c9a <memmove+0x2a>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ca2:	e7f7      	b.n	8005c94 <memmove+0x24>

08005ca4 <_sbrk_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d06      	ldr	r5, [pc, #24]	@ (8005cc0 <_sbrk_r+0x1c>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fb fd06 	bl	80016c0 <_sbrk>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_sbrk_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_sbrk_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200011c8 	.word	0x200011c8

08005cc4 <memcpy>:
 8005cc4:	440a      	add	r2, r1
 8005cc6:	4291      	cmp	r1, r2
 8005cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ccc:	d100      	bne.n	8005cd0 <memcpy+0xc>
 8005cce:	4770      	bx	lr
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cda:	4291      	cmp	r1, r2
 8005cdc:	d1f9      	bne.n	8005cd2 <memcpy+0xe>
 8005cde:	bd10      	pop	{r4, pc}

08005ce0 <_realloc_r>:
 8005ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	460d      	mov	r5, r1
 8005cea:	b921      	cbnz	r1, 8005cf6 <_realloc_r+0x16>
 8005cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	f7ff bc4d 	b.w	8005590 <_malloc_r>
 8005cf6:	b92a      	cbnz	r2, 8005d04 <_realloc_r+0x24>
 8005cf8:	f7ff fbde 	bl	80054b8 <_free_r>
 8005cfc:	4625      	mov	r5, r4
 8005cfe:	4628      	mov	r0, r5
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	f000 f81a 	bl	8005d3c <_malloc_usable_size_r>
 8005d08:	4284      	cmp	r4, r0
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	d802      	bhi.n	8005d14 <_realloc_r+0x34>
 8005d0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d12:	d8f4      	bhi.n	8005cfe <_realloc_r+0x1e>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4638      	mov	r0, r7
 8005d18:	f7ff fc3a 	bl	8005590 <_malloc_r>
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	b908      	cbnz	r0, 8005d24 <_realloc_r+0x44>
 8005d20:	4645      	mov	r5, r8
 8005d22:	e7ec      	b.n	8005cfe <_realloc_r+0x1e>
 8005d24:	42b4      	cmp	r4, r6
 8005d26:	4622      	mov	r2, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	bf28      	it	cs
 8005d2c:	4632      	movcs	r2, r6
 8005d2e:	f7ff ffc9 	bl	8005cc4 <memcpy>
 8005d32:	4629      	mov	r1, r5
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff fbbf 	bl	80054b8 <_free_r>
 8005d3a:	e7f1      	b.n	8005d20 <_realloc_r+0x40>

08005d3c <_malloc_usable_size_r>:
 8005d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d40:	1f18      	subs	r0, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfbc      	itt	lt
 8005d46:	580b      	ldrlt	r3, [r1, r0]
 8005d48:	18c0      	addlt	r0, r0, r3
 8005d4a:	4770      	bx	lr

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr
